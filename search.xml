<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>“Linux常用基础命令”</title>
      <link href="/2025/08/04/%E2%80%9CLinux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E2%80%9D/"/>
      <url>/2025/08/04/%E2%80%9CLinux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="linux常用基础命令"><a href="#linux常用基础命令" class="headerlink" title="linux常用基础命令"></a>linux常用基础命令</h1><h2 id="一、文件管理与查询"><a href="#一、文件管理与查询" class="headerlink" title="一、文件管理与查询"></a>一、文件管理与查询</h2><h3 id="1-touch-创建文件"><a href="#1-touch-创建文件" class="headerlink" title="1.touch #创建文件"></a>1.touch #创建文件</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> test.txt  <span class="comment">#单个创建</span></span><br><span class="line"><span class="built_in">touch</span> test1.txt test2.txt  <span class="comment">#批量创建</span></span><br></pre></td></tr></table></figure><h3 id="2-mkdir-创建目录"><a href="#2-mkdir-创建目录" class="headerlink" title="2.mkdir #创建目录"></a>2.mkdir #创建目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 【选项】 目录名</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">dir</span>/  <span class="comment">#单级创建</span></span><br><span class="line"><span class="built_in">mkdir</span> -p dir1/dir2  <span class="comment">#递归创建</span></span><br></pre></td></tr></table></figure><h3 id="3-rm-删除文件及目录"><a href="#3-rm-删除文件及目录" class="headerlink" title="3.rm #删除文件及目录"></a>3.rm #删除文件及目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> 【选项】 文件名or目录名</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> test.txt  <span class="comment">#删除单个文件</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="built_in">dir</span>/  <span class="comment">#删除整个目录及其以下所有内容</span></span><br><span class="line"><span class="built_in">rm</span> -f test.txt  <span class="comment">#强制删除</span></span><br></pre></td></tr></table></figure><h3 id="4-cp-复制文件或目录"><a href="#4-cp-复制文件或目录" class="headerlink" title="4.cp #复制文件或目录"></a>4.cp #复制文件或目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 【选项】 文件名or目录名 指定路径</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> test.txt <span class="built_in">dir</span>/  <span class="comment">#将test.txt复制到dir/目录</span></span><br><span class="line"><span class="built_in">cp</span> -r dir1/ dir2/  <span class="comment">#将dir1递归复制到dir2</span></span><br><span class="line"><span class="built_in">cp</span> -f dir1/ dir2/  <span class="comment">#强制复制</span></span><br><span class="line"><span class="built_in">cp</span> -i test.txt dir1/  <span class="comment">#若有覆盖，提示确认</span></span><br></pre></td></tr></table></figure><h3 id="5-mv-移动文件或重命名"><a href="#5-mv-移动文件或重命名" class="headerlink" title="5.mv #移动文件或重命名"></a>5.mv #移动文件或重命名</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 源文件 目标路径or名称</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> old.txt nwe.txt  <span class="comment">#重命名</span></span><br><span class="line"><span class="built_in">mv</span> test.txt <span class="built_in">dir</span>/  <span class="comment">#移动test.txt到dir/目录</span></span><br></pre></td></tr></table></figure><h3 id="6-ls-查看目录"><a href="#6-ls-查看目录" class="headerlink" title="6.ls #查看目录"></a>6.ls #查看目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> 【选项】</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span>  <span class="comment">#查看当前目录下所有文件</span></span><br><span class="line"><span class="built_in">ls</span> -a  <span class="comment">#显示当前目录下的隐藏文件</span></span><br><span class="line"><span class="built_in">ls</span> -l  <span class="comment">#长格式显示，显示各文件权限、所属主/组、时间等</span></span><br><span class="line"><span class="built_in">ls</span> -h  <span class="comment">#人类可读的文件大小</span></span><br><span class="line"><span class="built_in">ls</span> -R  <span class="comment">#递归显示子目录</span></span><br></pre></td></tr></table></figure><h3 id="7-cat-查看文件"><a href="#7-cat-查看文件" class="headerlink" title="7.cat #查看文件"></a>7.cat #查看文件</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 【选项】 文件名</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> test.txt  <span class="comment">#查看test.txt文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> test1.txt test2.txt  <span class="comment">#查看多个文件内容</span></span><br><span class="line"><span class="built_in">cat</span> test1.txt test2.txt &gt; test3.txt  <span class="comment">#合并文件 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> -n  <span class="comment">#显示行号</span></span><br><span class="line"><span class="built_in">cat</span> -b  <span class="comment">#显示行号（忽略空行）</span></span><br><span class="line"><span class="built_in">cat</span> -s  <span class="comment">#压缩连续空行为一行</span></span><br><span class="line"><span class="built_in">cat</span> -E  <span class="comment">#在行尾显示$符号</span></span><br></pre></td></tr></table></figure><p>高阶用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建文件</span><br><span class="line"><span class="built_in">cat</span> &gt; test.txt &lt;&lt; <span class="string">EOF  #创建test.txt文件</span></span><br><span class="line"><span class="string">示例</span></span><br><span class="line"><span class="string">[root@localhost test]# cat &gt; test789.txt &lt;&lt;EOF</span></span><br><span class="line">&gt; qwer</span><br><span class="line">&gt; EOF</span><br><span class="line">[root@localhost <span class="built_in">test</span>]# <span class="built_in">cat</span> test789.txt </span><br><span class="line">qwer</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> test1.txt &gt; test2.txt  <span class="comment">#将test1的内容追加到test2末尾</span></span><br></pre></td></tr></table></figure><h3 id="8-tail-查看文件末尾内容"><a href="#8-tail-查看文件末尾内容" class="headerlink" title="8.tail #查看文件末尾内容"></a>8.tail #查看文件末尾内容</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> 【选项】 文件名</span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> test.txt  <span class="comment">#查看末尾10行内容</span></span><br><span class="line"><span class="built_in">tail</span> -n 20 test.txt  <span class="comment">#查看末尾20行，-n用于指定显示行数</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/message  <span class="comment">#实时追踪变化</span></span><br></pre></td></tr></table></figure><h3 id="9-grep-进行正则匹配文本内容"><a href="#9-grep-进行正则匹配文本内容" class="headerlink" title="9.grep #进行正则匹配文本内容"></a>9.grep #进行正则匹配文本内容</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep 【选项】 “搜索模式” 文件名or目录</span><br><span class="line"></span><br><span class="line">grep -i <span class="string">&quot;error&quot;</span> file  <span class="comment">#忽略大小写</span></span><br><span class="line">grep -v <span class="string">&quot;debug&quot;</span> file  <span class="comment">#反向匹配，排除搜索模式</span></span><br><span class="line">grep -n <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示行号</span></span><br><span class="line">grep -c <span class="string">&quot;eqwe&quot;</span> file  <span class="comment">#统计行数</span></span><br><span class="line">grep -r <span class="string">&quot;123&quot;</span> /etc/  <span class="comment">#递归搜索目录</span></span><br><span class="line">grep -w <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#精确匹配</span></span><br><span class="line">grep -o <span class="string">&quot;[0-9]&quot;</span> file  <span class="comment">#仅输出匹配内容</span></span><br><span class="line">grep -A 12 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及后12行 </span></span><br><span class="line">grep -B 14 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及前14行</span></span><br><span class="line">grep -C 18 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及前后各18行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次linux实操作业</title>
      <link href="/2025/08/03/linux%E5%9F%BA%E7%A1%80%E5%A4%A7%E4%BD%9C%E4%B8%9Aw1/"/>
      <url>/2025/08/03/linux%E5%9F%BA%E7%A1%80%E5%A4%A7%E4%BD%9C%E4%B8%9Aw1/</url>
      
        <content type="html"><![CDATA[<h1 id="大作业要求"><a href="#大作业要求" class="headerlink" title="大作业要求"></a>大作业要求</h1><h4 id="1、不看笔记完成"><a href="#1、不看笔记完成" class="headerlink" title="1、不看笔记完成"></a>1、不看笔记完成</h4><h4 id="2、命令解释"><a href="#2、命令解释" class="headerlink" title="2、命令解释"></a>2、命令解释</h4><p>eg：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ddd<span class="comment">#ddd是干什么的</span></span><br></pre></td></tr></table></figure><h4 id="3、回显截图"><a href="#3、回显截图" class="headerlink" title="3、回显截图"></a>3、回显截图</h4><h2 id="实验1：文件目录结构与基本命令操作"><a href="#实验1：文件目录结构与基本命令操作" class="headerlink" title="实验1：文件目录结构与基本命令操作"></a>实验1：文件目录结构与基本命令操作</h2><p>1、在&#x2F;tmp目录下创建如下目录结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/tmp/test/</span><br><span class="line">├── dir1/</span><br><span class="line">│   ├── file1.txt</span><br><span class="line">│   └── file2.txt</span><br><span class="line">├── dir2/</span><br><span class="line">│   └── subdir/</span><br><span class="line">└── file3.txt</span><br></pre></td></tr></table></figure><p>①cd &#x2F;tmp #进入tmp文件夹</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152531969.png"></p><p>②mkdir -p test&#x2F;dir1 test&#x2F;dir2&#x2F;subdir #在当前目录创建一个test父级文件夹，并且创建dir1、dir2子文件夹，并在dir2中创建subdir子文件夹</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152731980.png"></p><p>③cd test&#x2F;dir1 #进入新建的dir1文件夹，touch file1.txt file2.txt #创建file1、file2两个txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152801030.png"></p><p>④touch file3.txt #创建file3.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152829966.png"></p><p>⑤至此目录结构创建完成</p><p>2、将dir1目录及其内容复制到dir2&#x2F;subdir下</p><p>①cp -r dir1 dir2&#x2F;subdir #将dir1完全复制到subdir下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152855231.png"></p><p>3、查找&#x2F;tmp目录下所有.txt文件并显示详细信息</p><p>①find &#x2F;tmp -type f -name “*.txt” -exec ls -l {} ; #搜索&#x2F;tmp目录下所有txt文件，并执行ls -l命令，{}替换为文件路径</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152920058.png"></p><p>4、将file3.txt移动到dir1目录并重命名为newfile.txt</p><p>①mv test&#x2F;file3.txt test&#x2F;dir1&#x2F;newfile.txt #在tmp目录下，将file3.txt移动到dir1并重命名为newfile.txt，需要绝对路径</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152947625.png"></p><h2 id="实验2：用户与组管理"><a href="#实验2：用户与组管理" class="headerlink" title="实验2：用户与组管理"></a>实验2：用户与组管理</h2><p>1、创建用户user1、user2和组group1</p><p>useradd -m user1#创建user1，创建user2同理，groupadd group1 #创建组group1</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153018280.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153039905.png"></p><p>2、将user1和user2加入group1组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153107450.png"></p><p>3、创建目录&#x2F;shared，设置权限使group1组成员可以读写，其他人无权限</p><p>mkdir shared #创建shared目录</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153126630.png"></p><p>chgrp group1 shared #将目录所属组变为group1，chmod 770 shared #将目录权限改为属组可读写，其他人无权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153144268.png"></p><p>4、验证user1可以在&#x2F;shared中创建文件，user3(非组成员)不能访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153210596.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153224472.png"></p><h2 id="实验3：权限管理-UGO"><a href="#实验3：权限管理-UGO" class="headerlink" title="实验3：权限管理(UGO)"></a>实验3：权限管理(UGO)</h2><p>1、创建文件&#x2F;data&#x2F;secret.txt，内容为”Top Secret”</p><p>mkdir &#x2F;data #创建data目录，vim secret.txt #创建secret文件并编写内容</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153256986.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153312410.png"></p><p>2、设置权限：所有者root可读写，组admin可读，其他人无权限</p><p>groupadd admin #创建admin组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153418797.png"></p><p>chgrp admin secret.txt #将文件属组改为admin</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153434104.png"></p><p>chmod 740 secret.txt #设置权限为root可读写，组admin可读，其他无权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153450867.png"></p><p>3、创建用户testuser并尝试访问该文件验证权限</p><p>useradd testuser #创建testuser</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153513883.png"></p><p>su testuser #切换到testuser用户，cat secret.txt #获取文件，验证权限，无法访问，权限不够</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153529921.png"></p><p>4、使用ACL添加testuser的读写权限</p><p>setfacl -m u:testuser:rw- secret.txt #给testuser设置权限，可读写secret.txt</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153548526.png"></p><p>再次切换到testuser，cat secret.txt验证是否能访问，成功访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153603961.png"></p><h2 id="实验4：SUID权限应用"><a href="#实验4：SUID权限应用" class="headerlink" title="实验4：SUID权限应用"></a>实验4：SUID权限应用</h2><p>1、创建脚本&#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile，内容为显示&#x2F;etc&#x2F;shadow文件内容</p><p>vim &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh #创建脚本文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153655093.png"></p><p>chmod u+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh  #给文件设置可执行权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153710345.png"></p><p>2、设置脚本所有者为root并添加SUID权限</p><p>chown root &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh   #设置脚本所有者为root</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153723810.png"></p><p>chmod 4755 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh #设置suid权限，4表示suid，也可使用chmod u+s来设置suid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153748232.png"></p><p>3、使用普通用户执行该脚本验证权限提升</p><p>su - user1  #切换到普通用户</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153804171.png"></p><p>cat &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile  #使用命令来验证能否查看脚本内容</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153822790.png"></p><p>成功查看</p><p>4、实验完成后移除SUID权限</p><p>chmod 755 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh  #移除suid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153840253.png"></p><p>要求：对脚本内容进行注释</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#showfile</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#!/bin/bash</span></span><br><span class="line"><span class="string">cat /etc/shadow&#x27;</span> &gt; /usr/local/bin/showfile</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/showfile</span><br></pre></td></tr></table></figure><h2 id="实验5：文件属性保护"><a href="#实验5：文件属性保护" class="headerlink" title="实验5：文件属性保护"></a>实验5：文件属性保护</h2><p>1、创建重要配置文件&#x2F;etc&#x2F;important.conf</p><p>touch &#x2F;etc&#x2F;important.conf #创建文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153925705.png"></p><p>2、使用chattr命令防止文件被修改或删除</p><p>chattr +i &#x2F;etc&#x2F;importtant.conf #设置i属性，防止修改删除</p><p>lsattr &#x2F;etc&#x2F;importtant.conf #查看属性</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153944567.png"></p><p>3、尝试修改和删除文件验证保护效果</p><p>rm &#x2F;etc&#x2F;importtant.conf #删除文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153959428.png"></p><p>4、恢复文件正常属性</p><p>chattr &#x3D;表示移除所有属性，移除后进行验证，是否能删除</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154014963.png"></p><p>成功删除</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154028650.png"></p><h2 id="实验6：sudo权限配置"><a href="#实验6：sudo权限配置" class="headerlink" title="实验6：sudo权限配置"></a>实验6：sudo权限配置</h2><p>1、创建用户admin和组sudoadmin</p><p>useradd admin #创建用户，groupadd admin #创建组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154043700.png"></p><p>此时admin用户无法使用sudo无密码执行</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154057227.png"></p><p>2、配置sudo使sudoadmin组成员可以执行所有命令无需密码</p><p>visudo修改配置文件，添加%sudoadmin ALL&#x3D;(ALL:ALL) NOPASSWD: ALL</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154115116.png"></p><p>3、将admin用户加入sudoadmin组</p><p>usermod -aG sudoadmin admin #将用户加入组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154132357.png"></p><p>4、验证admin用户可以使用sudo执行特权命令</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154145543.png"></p><p>成功执行</p><h2 id="实验7：综合权限管理"><a href="#实验7：综合权限管理" class="headerlink" title="实验7：综合权限管理"></a>实验7：综合权限管理</h2><p>1、创建目录&#x2F;project，属组为devteam</p><p>先创建目录和组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154200718.png"></p><p>修改&#x2F;project属组为devteam</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154213425.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154229983.png"></p><p>2、设置权限：组成员可读写，其他人只读</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154256184.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154308399.png"></p><p>3、设置SGID权限使新建文件自动继承组权限</p><p>chmod g+s可设置sgid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154321067.png"></p><p>4、创建用户dev1、dev2并加入devteam组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154332694.png"></p><p>5、验证dev1创建的文件dev2可以编辑</p><p>切换到dev1用户，在project目录下创建一个1.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154343649.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154354225.png"></p><p>切换到dev2用户，尝试修改1.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154409774.png"></p><p>成功执行</p><h3 id="实验8：日志分析与安全审计："><a href="#实验8：日志分析与安全审计：" class="headerlink" title="实验8：日志分析与安全审计："></a>实验8：日志分析与安全审计：</h3><p>1、创建日志文件<br> 将以下内容保存为 <code>/var/log/application.log</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-15 09:10:22 [INFO] User &#x27;admin&#x27; authenticated from 192.168.1.100 (session: SESS-7X2G9P)</span><br><span class="line">2024-03-15 09:11:05 [ERROR] Failed login attempt for user &#x27;root&#x27; from 10.0.0.55 (reason: invalid password)</span><br><span class="line">2024-03-15 09:12:33 [WARNING] High CPU usage detected (92%) on server-node-01</span><br><span class="line">2024-03-15 09:13:17 [SECURITY] Sensitive file accessed: /etc/shadow by user &#x27;backup&#x27;</span><br><span class="line">2024-03-15 09:14:02 [DEBUG] API request: GET /api/v1/users?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</span><br><span class="line">2024-03-15 09:15:48 [INFO] Payment processed: $250.00 via Credit Card (ref: PAY-8832)</span><br><span class="line">2024-03-15 09:16:30 [ERROR] Database connection timeout (MySQL@10.0.0.100:3306)</span><br><span class="line">2024-03-15 09:17:11 [ALERT] SSH brute force detected from 45.33.12.88 (15 attempts)</span><br></pre></td></tr></table></figure><p>2、设置权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 640 /var/log/application.log</span><br><span class="line">chown root:adm /var/log/application.log</span><br></pre></td></tr></table></figure><p><strong>任务1.1</strong>：统计日志中所有错误事件的数量</p><p><strong>任务1.2</strong>：提取所有包含IP地址的行（仅显示IP）</p><p><strong>任务2.1</strong>：查看<code>SECURITY</code>事件及其前后1行内容</p><p><strong>任务3.1</strong>：找出所有涉及金额的记录（含<code>$</code>符号）</p><p><strong>扩展任务</strong>：提取金额数值并计算总和</p><p>​   时间范围统计：统计09:10-09:15期间的事件数量</p><p><strong>任务4.1</strong>：检测潜在暴力破解行为</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed login\|brute force&quot;</span> /var/log/application.log</span><br></pre></td></tr></table></figure><p>编写自动化脚本，analyzer.sh，并使用chmod +x赋予执行权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 多功能日志分析工具</span><br><span class="line"># 用法：./analyzer.sh [日志文件路径]</span><br><span class="line"></span><br><span class="line">LOG_FILE=&quot;$&#123;1:-/var/log/syslog&#125;&quot;  # 默认使用syslog，可指定其他文件</span><br><span class="line">TEMP_IP_FILE=&quot;/tmp/ips.tmp&quot;       # IP临时文件</span><br><span class="line">TEMP_AMOUNT_FILE=&quot;/tmp/amounts.tmp&quot; # 金额临时文件</span><br><span class="line"></span><br><span class="line"># 任务1.1: 统计错误事件数量</span><br><span class="line">analyze_errors() &#123;</span><br><span class="line">    echo &quot;===== 任务1.1: 错误事件统计 =====&quot;</span><br><span class="line">    local error_count=$(grep -i -E &quot;error|fail|critical|exception&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;总错误事件数量: $error_count&quot;</span><br><span class="line">    </span><br><span class="line">    # 错误类型细分</span><br><span class="line">    echo -e &quot;\n错误类型分布:&quot;</span><br><span class="line">    grep -i -o -E &quot;error|fail|critical|exception&quot; &quot;$LOG_FILE&quot; | sort | uniq -c | sort -nr</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务1.2: 提取所有IP地址</span><br><span class="line">extract_ips() &#123;</span><br><span class="line">    echo &quot;===== 任务1.2: IP地址提取 =====&quot;</span><br><span class="line">    # 使用增强IP正则表达式</span><br><span class="line">    grep -E -o &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot; &quot;$LOG_FILE&quot; | sort -u &gt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">    echo &quot;找到唯一IP地址: $(wc -l &lt; &quot;$TEMP_IP_FILE&quot;)&quot;</span><br><span class="line">    echo -e &quot;\n前10个IP:&quot;</span><br><span class="line">    head -n 10 &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务2.1: 查看SECURITY事件及上下文</span><br><span class="line">show_security_events() &#123;</span><br><span class="line">    echo &quot;===== 任务2.1: SECURITY事件分析 =====&quot;</span><br><span class="line">    local security_count=$(grep -i &quot;SECURITY&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;找到SECURITY事件: $security_count&quot;</span><br><span class="line">    </span><br><span class="line">    if [ &quot;$security_count&quot; -gt 0 ]; then</span><br><span class="line">        echo -e &quot;\nSECURITY事件及上下文 (前5个):&quot;</span><br><span class="line">        grep -i &quot;SECURITY&quot; -A 1 -B 1 &quot;$LOG_FILE&quot; | head -n 15</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到SECURITY事件&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务3.1: 金额记录分析</span><br><span class="line">analyze_amounts() &#123;</span><br><span class="line">    echo &quot;===== 任务3.1: 金额记录分析 =====&quot;</span><br><span class="line">    # 查找所有包含$符号的行</span><br><span class="line">    grep &quot;\$&quot; &quot;$LOG_FILE&quot; &gt; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">    local amount_count=$(wc -l &lt; &quot;$TEMP_AMOUNT_FILE&quot;)</span><br><span class="line">    echo &quot;找到包含金额的记录: $amount_count&quot;</span><br><span class="line">    </span><br><span class="line">    if [ &quot;$amount_count&quot; -gt 0 ]; then</span><br><span class="line">        # 扩展任务: 提取金额并计算总和</span><br><span class="line">        echo -e &quot;\n金额记录示例 (前5个):&quot;</span><br><span class="line">        head -n 5 &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        # 提取金额数值</span><br><span class="line">        local total_amount=0</span><br><span class="line">        local amounts=()</span><br><span class="line">        while IFS= read -r line; do</span><br><span class="line">            # 匹配$后跟数字/小数点的金额</span><br><span class="line">            if [[ &quot;$line&quot; =~ \$([0-9]+(\.[0-9]&#123;1,2&#125;)?) ]]; then</span><br><span class="line">                amount=&quot;$&#123;BASH_REMATCH[1]&#125;&quot;</span><br><span class="line">                amounts+=(&quot;$amount&quot;)</span><br><span class="line">                total_amount=$(awk &quot;BEGIN &#123;printf \&quot;%.2f\&quot;, $total_amount + $amount&#125;&quot;)</span><br><span class="line">            fi</span><br><span class="line">        done &lt; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        echo -e &quot;\n金额总和: \$$total_amount&quot;</span><br><span class="line">        echo &quot;提取金额数量: $&#123;#amounts[@]&#125;&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到金额记录&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 扩展任务: 时间范围统计</span><br><span class="line">time_range_analysis() &#123;</span><br><span class="line">    echo &quot;===== 扩展任务: 时间范围统计 (09:10-09:15) =====&quot;</span><br><span class="line">    # 根据日志格式调整时间匹配模式</span><br><span class="line">    local time_count=$(grep -E &quot;09:(1[0-4]|15)&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;09:10-09:15期间的事件数量: $time_count&quot;</span><br><span class="line">    </span><br><span class="line">    # 显示该时间段的事件类型分布</span><br><span class="line">    echo -e &quot;\n事件类型分布:&quot;</span><br><span class="line">    grep -E &quot;09:(1[0-4]|15)&quot; &quot;$LOG_FILE&quot; | grep -o -E &quot;\[[A-Z]+\]|\b[A-Z]&#123;3,&#125;\b&quot; | sort | uniq -c | sort -nr | head -5</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务4.1: 检测潜在暴力破解</span><br><span class="line">detect_bruteforce() &#123;</span><br><span class="line">    echo &quot;===== 任务4.1: 潜在暴力破解检测 =====&quot;</span><br><span class="line">    # 检测失败的登录尝试</span><br><span class="line">    echo &quot;检测失败的登录尝试...&quot;</span><br><span class="line">    local failed_logins=$(grep -i &quot;fail&quot; &quot;$LOG_FILE&quot; | grep -E &quot;login|auth|ssh&quot;)</span><br><span class="line">    </span><br><span class="line">    if [ -n &quot;$failed_logins&quot; ]; then</span><br><span class="line">        # 提取IP和尝试次数</span><br><span class="line">        echo &quot;$failed_logins&quot; | grep -E -o &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot; | sort | uniq -c | sort -nr &gt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        local suspicious_count=0</span><br><span class="line">        echo -e &quot;\n登录失败统计:&quot;</span><br><span class="line">        while IFS= read -r line; do</span><br><span class="line">            attempts=$(echo &quot;$line&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">            ip=$(echo &quot;$line&quot; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">            </span><br><span class="line">            if [ &quot;$attempts&quot; -gt 5 ]; then</span><br><span class="line">                echo &quot;[!] 可疑: IP $ip 有 $attempts 次失败尝试&quot;</span><br><span class="line">                ((suspicious_count++))</span><br><span class="line">            else</span><br><span class="line">                echo &quot;[ ] 正常: IP $ip 有 $attempts 次失败尝试&quot;</span><br><span class="line">            fi</span><br><span class="line">        done &lt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        echo -e &quot;\n检测到 $suspicious_count 个可疑IP&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到失败登录记录&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 主函数</span><br><span class="line">main() &#123;</span><br><span class="line">    # 检查日志文件是否存在</span><br><span class="line">    if [ ! -f &quot;$LOG_FILE&quot; ]; then</span><br><span class="line">        echo &quot;错误: 日志文件不存在 - $LOG_FILE&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    echo &quot;===== 开始分析日志: $LOG_FILE =====&quot;</span><br><span class="line">    echo &quot;文件大小: $(du -h &quot;$LOG_FILE&quot; | cut -f1)&quot;</span><br><span class="line">    echo &quot;最后修改: $(stat -c %y &quot;$LOG_FILE&quot;)&quot;</span><br><span class="line">    echo &quot;总行数: $(wc -l &lt; &quot;$LOG_FILE&quot;)&quot;</span><br><span class="line">    echo</span><br><span class="line">    </span><br><span class="line">    # 执行所有分析任务</span><br><span class="line">    analyze_errors</span><br><span class="line">    extract_ips</span><br><span class="line">    show_security_events</span><br><span class="line">    analyze_amounts</span><br><span class="line">    time_range_analysis</span><br><span class="line">    detect_bruteforce</span><br><span class="line">    </span><br><span class="line">    # 清理临时文件</span><br><span class="line">    rm -f &quot;$TEMP_IP_FILE&quot; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">    </span><br><span class="line">    echo &quot;===== 分析完成 =====&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 执行主函数</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>执行后如图</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154427410.png"></p><p><strong>任务5.1</strong>：分析脚本文件生成安全事件报告</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安全事件报告&quot;</span> &gt; report.txt<span class="comment">#输出安全事件报告标题到report中</span></span><br><span class="line"><span class="built_in">date</span> &gt;&gt; report.txt                  <span class="comment">#输出日期到报告中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=== 高风险事件 ===&quot;</span> &gt;&gt; report.txt    <span class="comment">#输出高风险事件标题</span></span><br><span class="line">grep -E <span class="string">&quot;SECURITY|ALERT&quot;</span> /var/log/application.log &gt;&gt; report.txt   <span class="comment">#匹配SECURITY和ALERT事件，并输出到报告中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=== 异常IP列表 ===&quot;</span> &gt;&gt; report.txt <span class="comment">#输出异常IP到报告中 </span></span><br><span class="line">grep -Eo <span class="string">&quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span> /var/log/application.log | <span class="built_in">sort</span> -u &gt;&gt; report.txt    <span class="comment">#匹配IP，并输出到报告中</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154450789.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/08/02/1/"/>
      <url>/2025/08/02/1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
